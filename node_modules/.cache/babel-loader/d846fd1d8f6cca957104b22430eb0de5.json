{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport React from 'react';\nimport Utils from '../utils/utils';\nimport Mixins from '../utils/mixins';\nimport F7CardHeader from './card-header';\nimport F7CardContent from './card-content';\nimport F7CardFooter from './card-footer';\nimport __reactComponentWatch from '../runtime-helpers/react-component-watch.js';\nimport __reactComponentDispatchEvent from '../runtime-helpers/react-component-dispatch-event.js';\nimport __reactComponentSlots from '../runtime-helpers/react-component-slots.js';\nimport __reactComponentSetProps from '../runtime-helpers/react-component-set-props.js';\n\nvar F7Card = /*#__PURE__*/function (_React$Component) {\n  _inherits(F7Card, _React$Component);\n\n  function F7Card(props, context) {\n    var _this;\n\n    _classCallCheck(this, F7Card);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(F7Card).call(this, props, context));\n    _this.__reactRefs = {};\n\n    (function () {\n      Utils.bindMethods(_assertThisInitialized(_this), 'onBeforeOpen onOpen onOpened onClose onClosed'.split(' '));\n    })();\n\n    return _this;\n  }\n\n  _createClass(F7Card, [{\n    key: \"open\",\n    value: function open() {\n      var self = this;\n      if (!self.refs.el) return;\n      self.$f7.card.open(self.refs.el);\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      var self = this;\n      if (!self.refs.el) return;\n      self.$f7.card.close(self.refs.el);\n    }\n  }, {\n    key: \"onBeforeOpen\",\n    value: function onBeforeOpen(el, prevent) {\n      if (this.eventTargetEl !== el) return;\n      this.dispatchEvent('cardBeforeOpen card:beforeopen', el, prevent);\n    }\n  }, {\n    key: \"onOpen\",\n    value: function onOpen(el) {\n      if (this.eventTargetEl !== el) return;\n      this.dispatchEvent('cardOpen card:open', el);\n    }\n  }, {\n    key: \"onOpened\",\n    value: function onOpened(el, pageEl) {\n      if (this.eventTargetEl !== el) return;\n      this.dispatchEvent('cardOpened card:opened', el, pageEl);\n    }\n  }, {\n    key: \"onClose\",\n    value: function onClose(el) {\n      if (this.eventTargetEl !== el) return;\n      this.dispatchEvent('cardClose card:close', el);\n    }\n  }, {\n    key: \"onClosed\",\n    value: function onClosed(el, pageEl) {\n      if (this.eventTargetEl !== el) return;\n      this.dispatchEvent('cardClosed card:closed', el, pageEl);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var self = this;\n      var props = self.props;\n      var className = props.className,\n          id = props.id,\n          style = props.style,\n          title = props.title,\n          content = props.content,\n          footer = props.footer,\n          padding = props.padding,\n          outline = props.outline,\n          expandable = props.expandable,\n          expandableAnimateWidth = props.expandableAnimateWidth,\n          animate = props.animate,\n          hideNavbarOnOpen = props.hideNavbarOnOpen,\n          hideToolbarOnOpen = props.hideToolbarOnOpen,\n          hideStatusbarOnOpen = props.hideStatusbarOnOpen,\n          swipeToClose = props.swipeToClose,\n          closeByBackdropClick = props.closeByBackdropClick,\n          backdrop = props.backdrop,\n          backdropEl = props.backdropEl,\n          noShadow = props.noShadow,\n          noBorder = props.noBorder;\n      var headerEl;\n      var contentEl;\n      var footerEl;\n      var classes = Utils.classNames(className, 'card', {\n        'card-outline': outline,\n        'card-expandable': expandable,\n        'card-expandable-animate-width': expandableAnimateWidth,\n        'no-shadow': noShadow,\n        'no-border': noBorder\n      }, Mixins.colorClasses(props));\n\n      if (title || self.slots && self.slots.header) {\n        headerEl = React.createElement(F7CardHeader, null, title, this.slots['header']);\n      }\n\n      if (content || self.slots && self.slots.content) {\n        contentEl = React.createElement(F7CardContent, {\n          padding: padding\n        }, content, this.slots['content']);\n      }\n\n      if (footer || self.slots && self.slots.footer) {\n        footerEl = React.createElement(F7CardFooter, null, footer, this.slots['footer']);\n      }\n\n      return React.createElement('div', {\n        id: id,\n        style: style,\n        className: classes,\n        ref: function ref(__reactNode) {\n          _this2.__reactRefs['el'] = __reactNode;\n        },\n        'data-animate': typeof animate === 'undefined' ? animate : animate.toString(),\n        'data-hide-navbar-on-open': typeof hideNavbarOnOpen === 'undefined' ? hideNavbarOnOpen : hideNavbarOnOpen.toString(),\n        'data-hide-toolbar-on-open': typeof hideToolbarOnOpen === 'undefined' ? hideToolbarOnOpen : hideToolbarOnOpen.toString(),\n        'data-hide-statusbar-on-open': typeof hideStatusbarOnOpen === 'undefined' ? hideStatusbarOnOpen : hideStatusbarOnOpen.toString(),\n        'data-swipe-to-close': typeof swipeToClose === 'undefined' ? swipeToClose : swipeToClose.toString(),\n        'data-close-by-backdrop-click': typeof closeByBackdropClick === 'undefined' ? closeByBackdropClick : closeByBackdropClick.toString(),\n        'data-backdrop': typeof backdrop === 'undefined' ? backdrop : backdrop.toString(),\n        'data-backdrop-el': backdropEl\n      }, headerEl, contentEl, footerEl, this.slots['default']);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var self = this;\n      if (!self.props.expandable) return;\n      var el = self.refs.el;\n      if (!el || !self.$f7) return;\n      self.$f7.off('cardBeforeOpen', self.onBeforeOpen);\n      self.$f7.off('cardOpen', self.onOpen);\n      self.$f7.off('cardOpened', self.onOpened);\n      self.$f7.off('cardClose', self.onClose);\n      self.$f7.off('cardClosed', self.onClosed);\n      self.eventTargetEl = null;\n      delete self.eventTargetEl;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var self = this;\n      if (!self.props.expandable) return;\n      var el = self.refs.el;\n      if (!el) return;\n      self.eventTargetEl = el;\n      self.$f7ready(function (f7) {\n        f7.on('cardBeforeOpen', self.onBeforeOpen);\n        f7.on('cardOpen', self.onOpen);\n        f7.on('cardOpened', self.onOpened);\n        f7.on('cardClose', self.onClose);\n        f7.on('cardClosed', self.onClosed);\n\n        if (self.props.expandable && self.props.expandableOpened) {\n          self.$f7.card.open(el, false);\n        }\n      });\n    }\n  }, {\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(events) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return __reactComponentDispatchEvent.apply(void 0, [this, events].concat(args));\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this3 = this;\n\n      __reactComponentWatch(this, 'props.expandableOpened', prevProps, prevState, function (expandableOpened) {\n        var self = _this3;\n\n        if (expandableOpened) {\n          self.open();\n        } else {\n          self.close();\n        }\n      });\n    }\n  }, {\n    key: \"slots\",\n    get: function get() {\n      return __reactComponentSlots(this.props);\n    }\n  }, {\n    key: \"refs\",\n    get: function get() {\n      return this.__reactRefs;\n    },\n    set: function set(refs) {}\n  }]);\n\n  return F7Card;\n}(React.Component);\n\n__reactComponentSetProps(F7Card, Object.assign({\n  id: [String, Number],\n  className: String,\n  style: Object,\n  title: [String, Number],\n  content: [String, Number],\n  footer: [String, Number],\n  outline: Boolean,\n  expandable: Boolean,\n  expandableAnimateWidth: Boolean,\n  expandableOpened: Boolean,\n  animate: {\n    type: Boolean,\n    default: undefined\n  },\n  hideNavbarOnOpen: {\n    type: Boolean,\n    default: undefined\n  },\n  hideToolbarOnOpen: {\n    type: Boolean,\n    default: undefined\n  },\n  hideStatusbarOnOpen: {\n    type: Boolean,\n    default: undefined\n  },\n  swipeToClose: {\n    type: Boolean,\n    default: undefined\n  },\n  closeByBackdropClick: {\n    type: Boolean,\n    default: undefined\n  },\n  backdrop: {\n    type: Boolean,\n    default: undefined\n  },\n  backdropEl: {\n    type: String,\n    default: undefined\n  },\n  noShadow: Boolean,\n  noBorder: Boolean,\n  padding: {\n    type: Boolean,\n    default: true\n  }\n}, Mixins.colorProps));\n\nF7Card.displayName = 'f7-card';\nexport default F7Card;","map":null,"metadata":{},"sourceType":"module"}