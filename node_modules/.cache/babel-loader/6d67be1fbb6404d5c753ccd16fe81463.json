{"ast":null,"code":"import $ from 'dom7';\nimport Utils from '../../utils/utils';\nimport Modal from '../modal/modal-class';\n\nclass Popover extends Modal {\n  constructor(app, params) {\n    const extendedParams = Utils.extend({\n      on: {}\n    }, app.params.popover, params); // Extends with open/close Modal methods;\n\n    super(app, extendedParams);\n    const popover = this;\n    popover.params = extendedParams; // Find Element\n\n    let $el;\n\n    if (!popover.params.el) {\n      $el = $(popover.params.content).filter((elIndex, node) => node.nodeType === 1).eq(0);\n    } else {\n      $el = $(popover.params.el).eq(0);\n    }\n\n    if ($el && $el.length > 0 && $el[0].f7Modal) {\n      return $el[0].f7Modal;\n    } // Find Target\n\n\n    const $targetEl = $(popover.params.targetEl).eq(0);\n\n    if ($el.length === 0) {\n      return popover.destroy();\n    } // Backdrop\n\n\n    let $backdropEl;\n\n    if (popover.params.backdrop && popover.params.backdropEl) {\n      $backdropEl = $(popover.params.backdropEl);\n    } else if (popover.params.backdrop) {\n      $backdropEl = app.root.children('.popover-backdrop');\n\n      if ($backdropEl.length === 0) {\n        $backdropEl = $('<div class=\"popover-backdrop\"></div>');\n        app.root.append($backdropEl);\n      }\n    } // Find Angle\n\n\n    let $angleEl;\n\n    if ($el.find('.popover-angle').length === 0) {\n      $angleEl = $('<div class=\"popover-angle\"></div>');\n      $el.prepend($angleEl);\n    } else {\n      $angleEl = $el.find('.popover-angle');\n    } // Open\n\n\n    const originalOpen = popover.open;\n    Utils.extend(popover, {\n      app,\n      $el,\n      el: $el[0],\n      $targetEl,\n      targetEl: $targetEl[0],\n      $angleEl,\n      angleEl: $angleEl[0],\n      $backdropEl,\n      backdropEl: $backdropEl && $backdropEl[0],\n      type: 'popover',\n\n      open() {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        let [targetEl, animate] = args;\n        if (typeof args[0] === 'boolean') [animate, targetEl] = args;\n\n        if (targetEl) {\n          popover.$targetEl = $(targetEl);\n          popover.targetEl = popover.$targetEl[0];\n        }\n\n        return originalOpen.call(popover, animate);\n      }\n\n    });\n\n    function handleResize() {\n      popover.resize();\n    }\n\n    popover.on('popoverOpen', () => {\n      popover.resize();\n      app.on('resize', handleResize);\n      $(window).on('keyboardDidShow keyboardDidHide', handleResize);\n      popover.on('popoverClose popoverBeforeDestroy', () => {\n        app.off('resize', handleResize);\n        $(window).off('keyboardDidShow keyboardDidHide', handleResize);\n      });\n    });\n\n    function handleClick(e) {\n      const target = e.target;\n      const $target = $(target);\n      const keyboardOpened = !app.device.desktop && app.device.cordova && (window.Keyboard && window.Keyboard.isVisible || window.cordova.plugins && window.cordova.plugins.Keyboard && window.cordova.plugins.Keyboard.isVisible);\n      if (keyboardOpened) return;\n\n      if ($target.closest(popover.el).length === 0) {\n        if (popover.params.closeByBackdropClick && popover.params.backdrop && popover.backdropEl && popover.backdropEl === target) {\n          popover.close();\n        } else if (popover.params.closeByOutsideClick) {\n          popover.close();\n        }\n      }\n    }\n\n    function onKeyDown(e) {\n      const keyCode = e.keyCode;\n\n      if (keyCode === 27 && popover.params.closeOnEscape) {\n        popover.close();\n      }\n    }\n\n    if (popover.params.closeOnEscape) {\n      popover.on('popoverOpen', () => {\n        $(document).on('keydown', onKeyDown);\n      });\n      popover.on('popoverClose', () => {\n        $(document).off('keydown', onKeyDown);\n      });\n    }\n\n    popover.on('popoverOpened', () => {\n      if (popover.params.closeByOutsideClick || popover.params.closeByBackdropClick) {\n        app.on('click', handleClick);\n      }\n    });\n    popover.on('popoverClose', () => {\n      if (popover.params.closeByOutsideClick || popover.params.closeByBackdropClick) {\n        app.off('click', handleClick);\n      }\n    });\n    $el[0].f7Modal = popover;\n    return popover;\n  }\n\n  resize() {\n    const popover = this;\n    const {\n      app,\n      $el,\n      $targetEl,\n      $angleEl\n    } = popover;\n    const {\n      targetX,\n      targetY\n    } = popover.params;\n    $el.css({\n      left: '',\n      top: ''\n    });\n    const [width, height] = [$el.width(), $el.height()];\n    let angleSize = 0;\n    let angleLeft;\n    let angleTop;\n\n    if (app.theme === 'ios' || app.theme === 'aurora') {\n      $angleEl.removeClass('on-left on-right on-top on-bottom').css({\n        left: '',\n        top: ''\n      });\n      angleSize = $angleEl.width() / 2;\n    } else {\n      $el.removeClass('popover-on-left popover-on-right popover-on-top popover-on-bottom popover-on-middle').css({\n        left: '',\n        top: ''\n      });\n    }\n\n    let targetWidth;\n    let targetHeight;\n    let targetOffsetLeft;\n    let targetOffsetTop;\n    let safeAreaTop = parseInt($('html').css('--f7-safe-area-top'), 10);\n    if (Number.isNaN(safeAreaTop)) safeAreaTop = 0;\n\n    if ($targetEl && $targetEl.length > 0) {\n      targetWidth = $targetEl.outerWidth();\n      targetHeight = $targetEl.outerHeight();\n      const targetOffset = $targetEl.offset();\n      targetOffsetLeft = targetOffset.left - app.left;\n      targetOffsetTop = targetOffset.top - app.top;\n      const targetParentPage = $targetEl.parents('.page');\n\n      if (targetParentPage.length > 0) {\n        targetOffsetTop -= targetParentPage[0].scrollTop;\n      }\n    } else if (typeof targetX !== 'undefined' && targetY !== 'undefined') {\n      targetOffsetLeft = targetX;\n      targetOffsetTop = targetY;\n      targetWidth = popover.params.targetWidth || 0;\n      targetHeight = popover.params.targetHeight || 0;\n    }\n\n    let [left, top, diff] = [0, 0, 0]; // Top Position\n\n    let position = app.theme === 'md' ? 'bottom' : 'top';\n\n    if (app.theme === 'md') {\n      if (height < app.height - targetOffsetTop - targetHeight) {\n        // On bottom\n        position = 'bottom';\n        top = targetOffsetTop + targetHeight;\n      } else if (height < targetOffsetTop - safeAreaTop) {\n        // On top\n        top = targetOffsetTop - height;\n        position = 'top';\n      } else {\n        // On middle\n        position = 'middle';\n        top = targetHeight / 2 + targetOffsetTop - height / 2;\n      }\n\n      top = Math.max(8, Math.min(top, app.height - height - 8)); // Horizontal Position\n\n      let hPosition;\n\n      if (targetOffsetLeft < app.width / 2) {\n        hPosition = 'right';\n        left = position === 'middle' ? targetOffsetLeft + targetWidth : targetOffsetLeft;\n      } else {\n        hPosition = 'left';\n        left = position === 'middle' ? targetOffsetLeft - width : targetOffsetLeft + targetWidth - width;\n      }\n\n      left = Math.max(8, Math.min(left, app.width - width - 8));\n      $el.addClass(`popover-on-${position} popover-on-${hPosition}`);\n    } else {\n      // ios and aurora\n      if (height + angleSize < targetOffsetTop - safeAreaTop) {\n        // On top\n        top = targetOffsetTop - height - angleSize;\n      } else if (height + angleSize < app.height - targetOffsetTop - targetHeight) {\n        // On bottom\n        position = 'bottom';\n        top = targetOffsetTop + targetHeight + angleSize;\n      } else {\n        // On middle\n        position = 'middle';\n        top = targetHeight / 2 + targetOffsetTop - height / 2;\n        diff = top;\n        top = Math.max(5, Math.min(top, app.height - height - 5));\n        diff -= top;\n      } // Horizontal Position\n\n\n      if (position === 'top' || position === 'bottom') {\n        left = targetWidth / 2 + targetOffsetLeft - width / 2;\n        diff = left;\n        left = Math.max(5, Math.min(left, app.width - width - 5));\n\n        if (position === 'top') {\n          $angleEl.addClass('on-bottom');\n        }\n\n        if (position === 'bottom') {\n          $angleEl.addClass('on-top');\n        }\n\n        diff -= left;\n        angleLeft = width / 2 - angleSize + diff;\n        angleLeft = Math.max(Math.min(angleLeft, width - angleSize * 2 - 13), 13);\n        $angleEl.css({\n          left: `${angleLeft}px`\n        });\n      } else if (position === 'middle') {\n        left = targetOffsetLeft - width - angleSize;\n        $angleEl.addClass('on-right');\n\n        if (left < 5 || left + width > app.width) {\n          if (left < 5) left = targetOffsetLeft + targetWidth + angleSize;\n          if (left + width > app.width) left = app.width - width - 5;\n          $angleEl.removeClass('on-right').addClass('on-left');\n        }\n\n        angleTop = height / 2 - angleSize + diff;\n        angleTop = Math.max(Math.min(angleTop, height - angleSize * 2 - 13), 13);\n        $angleEl.css({\n          top: `${angleTop}px`\n        });\n      }\n    } // Apply Styles\n\n\n    $el.css({\n      top: `${top}px`,\n      left: `${left}px`\n    });\n  }\n\n}\n\nexport default Popover;","map":null,"metadata":{},"sourceType":"module"}