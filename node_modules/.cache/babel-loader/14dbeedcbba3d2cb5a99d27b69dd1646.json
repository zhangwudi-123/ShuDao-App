{"ast":null,"code":"import $ from 'dom7';\nimport Utils from '../../utils/utils';\nimport TextEditor from './text-editor-class';\nimport ConstructorMethods from '../../utils/constructor-methods';\nexport default {\n  name: 'textEditor',\n  params: {\n    textEditor: {\n      el: null,\n      mode: 'toolbar',\n      // or 'popover'\n      value: undefined,\n      // will use html content\n      customButtons: null,\n      buttons: [['bold', 'italic', 'underline', 'strikeThrough'], ['orderedList', 'unorderedList'], ['link', 'image'], ['paragraph', 'h1', 'h2', 'h3'], ['alignLeft', 'alignCenter', 'alignRight', 'alignJustify'], ['subscript', 'superscript'], ['indent', 'outdent']],\n      dividers: true,\n      imageUrlText: 'Insert image URL',\n      linkUrlText: 'Insert link URL',\n      placeholder: null,\n      clearFormattingOnPaste: true\n    }\n  },\n\n  create() {\n    const app = this;\n    app.textEditor = Utils.extend(ConstructorMethods({\n      defaultSelector: '.text-editor',\n      constructor: TextEditor,\n      app,\n      domProp: 'f7TextEditor'\n    }));\n  },\n\n  static: {\n    TextEditor\n  },\n  on: {\n    tabMounted(tabEl) {\n      const app = this;\n      $(tabEl).find('.text-editor-init').each((index, editorEl) => {\n        const dataset = $(editorEl).dataset();\n        app.textEditor.create(Utils.extend({\n          el: editorEl\n        }, dataset || {}));\n      });\n    },\n\n    tabBeforeRemove(tabEl) {\n      $(tabEl).find('.text-editor-init').each((index, editorEl) => {\n        if (editorEl.f7TextEditor) editorEl.f7TextEditor.destroy();\n      });\n    },\n\n    pageInit(page) {\n      const app = this;\n      page.$el.find('.text-editor-init').each((index, editorEl) => {\n        const dataset = $(editorEl).dataset();\n        app.textEditor.create(Utils.extend({\n          el: editorEl\n        }, dataset || {}));\n      });\n    },\n\n    pageBeforeRemove(page) {\n      page.$el.find('.text-editor-init').each((index, editorEl) => {\n        if (editorEl.f7TextEditor) editorEl.f7TextEditor.destroy();\n      });\n    }\n\n  },\n  vnode: {\n    'text-editor-init': {\n      insert(vnode) {\n        const app = this;\n        const editorEl = vnode.elm;\n        const dataset = $(editorEl).dataset();\n        app.textEditor.create(Utils.extend({\n          el: editorEl\n        }, dataset || {}));\n      },\n\n      destroy(vnode) {\n        const editorEl = vnode.elm;\n        if (editorEl.f7TextEditor) editorEl.f7TextEditor.destroy();\n      }\n\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}