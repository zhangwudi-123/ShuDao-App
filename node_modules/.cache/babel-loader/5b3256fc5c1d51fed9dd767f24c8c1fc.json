{"ast":null,"code":"import React, { useRef, useMemo } from 'react';\nimport classNames from 'classnames';\nimport { DownOutline, TextDeletionOutline } from 'antd-mobile-icons';\nimport { mergeProps } from '../../utils/with-default-props';\nimport { shuffle } from '../../utils/shuffle';\nimport Popup from '../popup';\nimport { withNativeProps } from '../../utils/native-props';\nimport SafeArea from '../safe-area';\nimport { useMemoizedFn } from 'ahooks';\nconst classPrefix = 'adm-number-keyboard';\nconst defaultProps = {\n  defaultVisible: false,\n  randomOrder: false,\n  showCloseButton: true,\n  confirmText: null,\n  closeOnConfirm: true,\n  safeArea: true,\n  destroyOnClose: false,\n  forceRender: false\n};\nexport const NumberKeyboard = p => {\n  const props = mergeProps(defaultProps, p);\n  const {\n    visible,\n    title,\n    getContainer,\n    confirmText,\n    customKey,\n    randomOrder,\n    showCloseButton,\n    onInput\n  } = props;\n  const keyboardRef = useRef(null);\n  const keys = useMemo(() => {\n    const defaultKeys = ['1', '2', '3', '4', '5', '6', '7', '8', '9'];\n    const keyList = randomOrder ? shuffle(defaultKeys) : defaultKeys;\n    const customKeys = Array.isArray(customKey) ? customKey : [customKey];\n    keyList.push('0');\n\n    if (confirmText) {\n      if (customKeys.length === 2) {\n        keyList.splice(9, 0, customKeys.pop());\n      }\n\n      keyList.push(customKeys[0] || '');\n    } else {\n      keyList.splice(9, 0, customKeys[0] || '');\n      keyList.push(customKeys[1] || 'BACKSPACE');\n    }\n\n    return keyList;\n  }, [customKey, confirmText, randomOrder, randomOrder && visible]);\n  const timeoutRef = useRef(-1);\n  const intervalRef = useRef(-1);\n  const onDelete = useMemoizedFn(() => {\n    var _a;\n\n    (_a = props.onDelete) === null || _a === void 0 ? void 0 : _a.call(props);\n  });\n\n  const onBackspacePressStart = () => {\n    timeoutRef.current = window.setTimeout(() => {\n      onDelete();\n      intervalRef.current = window.setInterval(onDelete, 150);\n    }, 700);\n  };\n\n  const onBackspacePressEnd = () => {\n    clearTimeout(timeoutRef.current);\n    clearInterval(intervalRef.current);\n  };\n\n  const onKeyPress = (e, key) => {\n    var _a, _b;\n\n    e.preventDefault();\n\n    switch (key) {\n      case 'BACKSPACE':\n        onDelete === null || onDelete === void 0 ? void 0 : onDelete();\n        break;\n\n      case 'OK':\n        (_a = props.onConfirm) === null || _a === void 0 ? void 0 : _a.call(props);\n\n        if (props.closeOnConfirm) {\n          (_b = props.onClose) === null || _b === void 0 ? void 0 : _b.call(props);\n        }\n\n        break;\n\n      default:\n        // onInput should't be called when customKey doesn't exist\n        if (key !== '') onInput === null || onInput === void 0 ? void 0 : onInput(key);\n        break;\n    }\n  };\n\n  const renderHeader = () => {\n    if (!showCloseButton && !title) return null;\n    return React.createElement(\"div\", {\n      className: classNames(`${classPrefix}-header`, {\n        [`${classPrefix}-header-with-title`]: !!title\n      })\n    }, 'title' && React.createElement(\"div\", {\n      className: `${classPrefix}-title`,\n      \"aria-label\": title\n    }, title), showCloseButton && React.createElement(\"span\", {\n      className: `${classPrefix}-header-close-button`,\n      onClick: () => {\n        var _a;\n\n        (_a = props.onClose) === null || _a === void 0 ? void 0 : _a.call(props);\n      },\n      role: 'grid',\n      title: 'CLOSE',\n      tabIndex: -1\n    }, React.createElement(DownOutline, null)));\n  };\n\n  const renderKey = (key, index) => {\n    const isNumberKey = /^\\d$/.test(key);\n    const className = classNames(`${classPrefix}-key`, {\n      [`${classPrefix}-key-number`]: isNumberKey,\n      [`${classPrefix}-key-sign`]: !isNumberKey && key,\n      [`${classPrefix}-key-mid`]: index === 9 && !!confirmText && keys.length < 12\n    });\n    const ariaProps = key ? {\n      role: 'grid',\n      title: key,\n      tabIndex: -1\n    } : undefined;\n    return React.createElement(\"div\", Object.assign({\n      key: key,\n      className: className,\n      onTouchStart: () => {\n        if (key === 'BACKSPACE') {\n          onBackspacePressStart();\n        }\n      },\n      onTouchEnd: e => {\n        onKeyPress(e, key);\n\n        if (key === 'BACKSPACE') {\n          onBackspacePressEnd();\n        }\n      }\n    }, ariaProps), key === 'BACKSPACE' ? React.createElement(TextDeletionOutline, null) : key);\n  };\n\n  return React.createElement(Popup, {\n    visible: visible,\n    getContainer: getContainer,\n    mask: false,\n    afterClose: props.afterClose,\n    afterShow: props.afterShow,\n    className: `${classPrefix}-popup`,\n    stopPropagation: props.stopPropagation,\n    destroyOnClose: props.destroyOnClose,\n    forceRender: props.forceRender\n  }, withNativeProps(props, React.createElement(\"div\", {\n    ref: keyboardRef,\n    className: classPrefix,\n    onMouseDown: e => {\n      e.preventDefault();\n    }\n  }, renderHeader(), React.createElement(\"div\", {\n    className: `${classPrefix}-wrapper`\n  }, React.createElement(\"div\", {\n    className: classNames(`${classPrefix}-main`, {\n      [`${classPrefix}-main-confirmed-style`]: !!confirmText\n    })\n  }, keys.map(renderKey)), !!confirmText && React.createElement(\"div\", {\n    className: `${classPrefix}-confirm`\n  }, React.createElement(\"div\", {\n    className: `${classPrefix}-key ${classPrefix}-key-extra ${classPrefix}-key-bs`,\n    onTouchStart: () => {\n      onBackspacePressStart();\n    },\n    onTouchEnd: e => {\n      onKeyPress(e, 'BACKSPACE');\n      onBackspacePressEnd();\n    },\n    title: 'BACKSPACE',\n    role: 'grid',\n    tabIndex: -1\n  }, React.createElement(TextDeletionOutline, null)), React.createElement(\"div\", {\n    className: `${classPrefix}-key ${classPrefix}-key-extra ${classPrefix}-key-ok`,\n    onTouchEnd: e => onKeyPress(e, 'OK'),\n    role: 'grid',\n    tabIndex: -1,\n    \"aria-label\": confirmText\n  }, confirmText))), props.safeArea && React.createElement(\"div\", {\n    className: `${classPrefix}-footer`\n  }, React.createElement(SafeArea, {\n    position: 'bottom'\n  })))));\n};","map":null,"metadata":{},"sourceType":"module"}