{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport React, { forwardRef, useImperativeHandle, useRef, useState } from 'react';\nimport classNames from 'classnames';\nimport DotLoading from '../dot-loading';\nimport { mergeProps } from '../../utils/with-default-props';\nimport { withNativeProps } from '../../utils/native-props';\nimport { isPromise } from '../../utils/validate';\nconst classPrefix = `adm-button`;\nconst defaultProps = {\n  color: 'default',\n  fill: 'solid',\n  block: false,\n  loading: false,\n  loadingIcon: React.createElement(DotLoading, {\n    color: 'currentColor'\n  }),\n  type: 'button',\n  shape: 'default',\n  size: 'middle'\n};\nexport const Button = forwardRef((p, ref) => {\n  const props = mergeProps(defaultProps, p);\n  const [innerLoading, setInnerLoading] = useState(false);\n  const nativeButtonRef = useRef(null);\n  const loading = props.loading === 'auto' ? innerLoading : props.loading;\n  const disabled = props.disabled || loading;\n  useImperativeHandle(ref, () => ({\n    get nativeElement() {\n      return nativeButtonRef.current;\n    }\n\n  }));\n\n  const handleClick = e => __awaiter(void 0, void 0, void 0, function* () {\n    if (!props.onClick) return;\n    const promise = props.onClick(e);\n\n    if (isPromise(promise)) {\n      try {\n        setInnerLoading(true);\n        yield promise;\n        setInnerLoading(false);\n      } catch (e) {\n        setInnerLoading(false);\n        throw e;\n      }\n    }\n  });\n\n  return withNativeProps(props, React.createElement(\"button\", {\n    ref: nativeButtonRef,\n    type: props.type,\n    onClick: handleClick,\n    className: classNames(classPrefix, props.color ? `${classPrefix}-${props.color}` : null, {\n      [`${classPrefix}-block`]: props.block,\n      [`${classPrefix}-disabled`]: disabled,\n      [`${classPrefix}-fill-outline`]: props.fill === 'outline',\n      [`${classPrefix}-fill-none`]: props.fill === 'none',\n      [`${classPrefix}-mini`]: props.size === 'mini',\n      [`${classPrefix}-small`]: props.size === 'small',\n      [`${classPrefix}-large`]: props.size === 'large',\n      [`${classPrefix}-loading`]: loading\n    }, `${classPrefix}-shape-${props.shape}`),\n    disabled: disabled,\n    onMouseDown: props.onMouseDown,\n    onMouseUp: props.onMouseUp,\n    onTouchStart: props.onTouchStart,\n    onTouchEnd: props.onTouchEnd\n  }, loading ? React.createElement(\"div\", {\n    className: `${classPrefix}-loading-wrapper`\n  }, props.loadingIcon, props.loadingText) : React.createElement(\"span\", null, props.children)));\n});","map":null,"metadata":{},"sourceType":"module"}