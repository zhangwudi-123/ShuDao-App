{"ast":null,"code":"import { __rest } from \"tslib\";\nimport React, { forwardRef, useMemo } from 'react';\nimport classNames from 'classnames';\nimport List from '../list';\nimport RcForm from 'rc-field-form';\nimport { defaultFormContext, FormContext } from './context';\nimport { mergeProps } from '../../utils/with-default-props';\nimport { Header } from './header';\nimport { useConfig } from '../config-provider';\nimport merge from 'lodash/merge';\nimport { FormArray } from './form-array';\nimport { traverseReactNode } from '../../utils/traverse-react-node';\nconst classPrefix = 'adm-form';\nconst defaultProps = defaultFormContext;\nexport const Form = forwardRef((p, ref) => {\n  const props = mergeProps(defaultProps, p);\n\n  const {\n    className,\n    style,\n    hasFeedback,\n    children,\n    layout,\n    footer,\n    mode,\n    disabled,\n    requiredMarkStyle\n  } = props,\n        formProps = __rest(props, [\"className\", \"style\", \"hasFeedback\", \"children\", \"layout\", \"footer\", \"mode\", \"disabled\", \"requiredMarkStyle\"]);\n\n  const {\n    locale\n  } = useConfig();\n  const validateMessages = useMemo(() => merge({}, locale.Form.defaultValidateMessages, formProps.validateMessages), [locale.Form.defaultValidateMessages, formProps.validateMessages]);\n  const lists = [];\n  let currentHeader = null;\n  let items = [];\n  let count = 0;\n\n  function collect() {\n    if (items.length === 0) return;\n    count += 1;\n    lists.push(React.createElement(List, {\n      header: currentHeader,\n      key: count,\n      mode: mode\n    }, items));\n    items = [];\n  }\n\n  traverseReactNode(props.children, child => {\n    if (React.isValidElement(child)) {\n      if (child.type === Header) {\n        collect();\n        currentHeader = child.props.children;\n        return;\n      }\n\n      if (child.type === FormArray) {\n        collect();\n        lists.push(child);\n        return;\n      }\n    }\n\n    items.push(child);\n  });\n  collect();\n  return React.createElement(RcForm, Object.assign({\n    className: classNames(classPrefix, className),\n    style: style,\n    ref: ref\n  }, formProps, {\n    validateMessages: validateMessages\n  }), React.createElement(FormContext.Provider, {\n    value: {\n      name: formProps.name,\n      hasFeedback,\n      layout,\n      requiredMarkStyle,\n      disabled\n    }\n  }, lists), footer && React.createElement(\"div\", {\n    className: `${classPrefix}-footer`\n  }, footer));\n});","map":null,"metadata":{},"sourceType":"module"}