{"ast":null,"code":"import $ from 'dom7';\nimport Utils from '../../utils/utils';\nimport Framework7Class from '../../utils/class';\n\nclass Calendar extends Framework7Class {\n  constructor(app) {\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(params, [app]);\n    const calendar = this;\n    calendar.params = Utils.extend({}, app.params.calendar, params);\n    let $containerEl;\n\n    if (calendar.params.containerEl) {\n      $containerEl = $(calendar.params.containerEl);\n      if ($containerEl.length === 0) return calendar;\n    }\n\n    let $inputEl;\n\n    if (calendar.params.inputEl) {\n      $inputEl = $(calendar.params.inputEl);\n    }\n\n    let view;\n\n    if ($inputEl) {\n      view = $inputEl.parents('.view').length && $inputEl.parents('.view')[0].f7View;\n    }\n\n    if (!view) view = app.views.main;\n    const isHorizontal = calendar.params.direction === 'horizontal';\n    let inverter = 1;\n\n    if (isHorizontal) {\n      inverter = app.rtl ? -1 : 1;\n    }\n\n    Utils.extend(calendar, {\n      app,\n      $containerEl,\n      containerEl: $containerEl && $containerEl[0],\n      inline: $containerEl && $containerEl.length > 0,\n      $inputEl,\n      inputEl: $inputEl && $inputEl[0],\n      initialized: false,\n      opened: false,\n      url: calendar.params.url,\n      isHorizontal,\n      inverter,\n      view,\n      animating: false,\n      hasTimePicker: calendar.params.timePicker && !calendar.params.rangePicker && !calendar.params.multiple\n    });\n    calendar.dayFormatter = new Intl.DateTimeFormat(calendar.params.locale, {\n      day: 'numeric'\n    });\n    calendar.monthFormatter = new Intl.DateTimeFormat(calendar.params.locale, {\n      month: 'long'\n    });\n    calendar.yearFormatter = new Intl.DateTimeFormat(calendar.params.locale, {\n      year: 'numeric'\n    });\n    calendar.timeSelectorFormatter = new Intl.DateTimeFormat(calendar.params.locale, calendar.params.timePickerFormat); // Auto names\n\n    let {\n      monthNames,\n      monthNamesShort,\n      dayNames,\n      dayNamesShort\n    } = calendar.params;\n    const {\n      monthNamesIntl,\n      monthNamesShortIntl,\n      dayNamesIntl,\n      dayNamesShortIntl\n    } = calendar.getIntlNames();\n    if (monthNames === 'auto') monthNames = monthNamesIntl;\n    if (monthNamesShort === 'auto') monthNamesShort = monthNamesShortIntl;\n    if (dayNames === 'auto') dayNames = dayNamesIntl;\n    if (dayNamesShort === 'auto') dayNamesShort = dayNamesShortIntl;\n    Utils.extend(calendar, {\n      monthNames,\n      monthNamesShort,\n      dayNames,\n      dayNamesShort\n    });\n\n    function onInputClick() {\n      calendar.open();\n    }\n\n    function onInputFocus(e) {\n      e.preventDefault();\n    }\n\n    function onInputClear() {\n      calendar.setValue([]);\n\n      if (calendar.opened) {\n        calendar.update();\n      }\n    }\n\n    function onHtmlClick(e) {\n      const $targetEl = $(e.target);\n      if (calendar.destroyed || !calendar.params) return;\n      if (calendar.isPopover()) return;\n      if (!calendar.opened || calendar.closing) return;\n      if ($targetEl.closest('[class*=\"backdrop\"]').length) return;\n\n      if ($inputEl && $inputEl.length > 0) {\n        if ($targetEl[0] !== $inputEl[0] && $targetEl.closest('.sheet-modal, .calendar-modal').length === 0) {\n          calendar.close();\n        }\n      } else if ($(e.target).closest('.sheet-modal, .calendar-modal').length === 0) {\n        calendar.close();\n      }\n    } // Events\n\n\n    Utils.extend(calendar, {\n      attachInputEvents() {\n        calendar.$inputEl.on('click', onInputClick);\n        calendar.$inputEl.on('input:clear', onInputClear);\n\n        if (calendar.params.inputReadOnly) {\n          calendar.$inputEl.on('focus mousedown', onInputFocus);\n        }\n      },\n\n      detachInputEvents() {\n        calendar.$inputEl.off('click', onInputClick);\n        calendar.$inputEl.off('input:clear', onInputClear);\n\n        if (calendar.params.inputReadOnly) {\n          calendar.$inputEl.off('focus mousedown', onInputFocus);\n        }\n      },\n\n      attachHtmlEvents() {\n        app.on('click', onHtmlClick);\n      },\n\n      detachHtmlEvents() {\n        app.off('click', onHtmlClick);\n      }\n\n    });\n\n    calendar.attachCalendarEvents = function attachCalendarEvents() {\n      let allowItemClick = true;\n      let isTouched;\n      let isMoved;\n      let touchStartX;\n      let touchStartY;\n      let touchCurrentX;\n      let touchCurrentY;\n      let touchStartTime;\n      let touchEndTime;\n      let currentTranslate;\n      let wrapperWidth;\n      let wrapperHeight;\n      let percentage;\n      let touchesDiff;\n      let isScrolling;\n      const {\n        $el,\n        $wrapperEl\n      } = calendar;\n\n      function handleTouchStart(e) {\n        if (isMoved || isTouched) return;\n        isTouched = true;\n        touchStartX = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;\n        touchCurrentX = touchStartX;\n        touchStartY = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;\n        touchCurrentY = touchStartY;\n        touchStartTime = new Date().getTime();\n        percentage = 0;\n        allowItemClick = true;\n        isScrolling = undefined;\n        currentTranslate = calendar.monthsTranslate;\n      }\n\n      function handleTouchMove(e) {\n        if (!isTouched) return;\n        const {\n          isHorizontal: isH\n        } = calendar;\n        touchCurrentX = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;\n        touchCurrentY = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;\n\n        if (typeof isScrolling === 'undefined') {\n          isScrolling = !!(isScrolling || Math.abs(touchCurrentY - touchStartY) > Math.abs(touchCurrentX - touchStartX));\n        }\n\n        if (isH && isScrolling) {\n          isTouched = false;\n          return;\n        }\n\n        e.preventDefault();\n\n        if (calendar.animating) {\n          isTouched = false;\n          return;\n        }\n\n        allowItemClick = false;\n\n        if (!isMoved) {\n          // First move\n          isMoved = true;\n          wrapperWidth = $wrapperEl[0].offsetWidth;\n          wrapperHeight = $wrapperEl[0].offsetHeight;\n          $wrapperEl.transition(0);\n        }\n\n        touchesDiff = isH ? touchCurrentX - touchStartX : touchCurrentY - touchStartY;\n        percentage = touchesDiff / (isH ? wrapperWidth : wrapperHeight);\n        currentTranslate = (calendar.monthsTranslate * calendar.inverter + percentage) * 100; // Transform wrapper\n\n        $wrapperEl.transform(`translate3d(${isH ? currentTranslate : 0}%, ${isH ? 0 : currentTranslate}%, 0)`);\n      }\n\n      function handleTouchEnd() {\n        if (!isTouched || !isMoved) {\n          isTouched = false;\n          isMoved = false;\n          return;\n        }\n\n        isTouched = false;\n        isMoved = false;\n        touchEndTime = new Date().getTime();\n\n        if (touchEndTime - touchStartTime < 300) {\n          if (Math.abs(touchesDiff) < 10) {\n            calendar.resetMonth();\n          } else if (touchesDiff >= 10) {\n            if (app.rtl) calendar.nextMonth();else calendar.prevMonth();\n          } else if (app.rtl) calendar.prevMonth();else calendar.nextMonth();\n        } else if (percentage <= -0.5) {\n          if (app.rtl) calendar.prevMonth();else calendar.nextMonth();\n        } else if (percentage >= 0.5) {\n          if (app.rtl) calendar.nextMonth();else calendar.prevMonth();\n        } else {\n          calendar.resetMonth();\n        } // Allow click\n\n\n        setTimeout(() => {\n          allowItemClick = true;\n        }, 100);\n      }\n\n      function handleDayClick(e) {\n        if (!allowItemClick) return;\n        let $dayEl = $(e.target).parents('.calendar-day');\n\n        if ($dayEl.length === 0 && $(e.target).hasClass('calendar-day')) {\n          $dayEl = $(e.target);\n        }\n\n        if ($dayEl.length === 0) return;\n        if ($dayEl.hasClass('calendar-day-disabled')) return;\n\n        if (!calendar.params.rangePicker) {\n          if ($dayEl.hasClass('calendar-day-next')) calendar.nextMonth();\n          if ($dayEl.hasClass('calendar-day-prev')) calendar.prevMonth();\n        }\n\n        const dateYear = parseInt($dayEl.attr('data-year'), 10);\n        const dateMonth = parseInt($dayEl.attr('data-month'), 10);\n        const dateDay = parseInt($dayEl.attr('data-day'), 10);\n        calendar.emit('local::dayClick calendarDayClick', calendar, $dayEl[0], dateYear, dateMonth, dateDay);\n\n        if (!$dayEl.hasClass('calendar-day-selected') || calendar.params.multiple || calendar.params.rangePicker) {\n          const valueToAdd = new Date(dateYear, dateMonth, dateDay, 0, 0, 0);\n\n          if (calendar.hasTimePicker) {\n            if (calendar.value && calendar.value[0]) {\n              valueToAdd.setHours(calendar.value[0].getHours(), calendar.value[0].getMinutes());\n            } else {\n              valueToAdd.setHours(new Date().getHours(), new Date().getMinutes());\n            }\n          }\n\n          calendar.addValue(valueToAdd);\n        }\n\n        if (calendar.params.closeOnSelect) {\n          if (calendar.params.rangePicker && calendar.value.length === 2 || !calendar.params.rangePicker) {\n            calendar.close();\n          }\n        }\n      }\n\n      function onNextMonthClick() {\n        calendar.nextMonth();\n      }\n\n      function onPrevMonthClick() {\n        calendar.prevMonth();\n      }\n\n      function onNextYearClick() {\n        calendar.nextYear();\n      }\n\n      function onPrevYearClick() {\n        calendar.prevYear();\n      }\n\n      function onMonthSelectorClick() {\n        $el.append(calendar.renderMonthPicker());\n      }\n\n      function onMonthSelectorItemClick() {\n        const $clickedEl = $(this);\n\n        if ($clickedEl.hasClass('calendar-month-picker-item-current')) {\n          $el.find('.calendar-month-picker').remove();\n          return;\n        }\n\n        $el.find('.calendar-month-picker-item-current').add($clickedEl).toggleClass('calendar-month-picker-item-current');\n        const index = $clickedEl.index();\n        const localeMonthIndex = parseInt(calendar.$el.find('.calendar-month-current').attr('data-locale-month'), 10);\n        const monthIndex = calendar.currentMonth;\n        const diff = localeMonthIndex - monthIndex;\n        const diffIndex = index - diff;\n        calendar.setYearMonth(calendar.currentYear, diffIndex, 0);\n        setTimeout(() => {\n          $el.find('.calendar-month-picker').remove();\n        }, 200);\n      }\n\n      function onYearSelectorClick() {\n        $el.append(calendar.renderYearPicker());\n        const $currentEl = $el.find('.calendar-year-picker-item-current');\n        const $yearPickerEl = $el.find('.calendar-year-picker');\n        if (!$currentEl || !$currentEl.length) return;\n        $yearPickerEl.scrollTop($currentEl[0].offsetTop - $yearPickerEl[0].offsetHeight / 2 + $currentEl[0].offsetHeight / 2);\n      }\n\n      function onYearSelectorItemClick() {\n        const $clickedEl = $(this);\n\n        if ($clickedEl.hasClass('calendar-year-picker-item-current')) {\n          $el.find('.calendar-year-picker').remove();\n          return;\n        }\n\n        $el.find('.calendar-year-picker-item-current').add($clickedEl).toggleClass('calendar-year-picker-item-current');\n        const year = parseInt($clickedEl.attr('data-year'), 10);\n        calendar.setYearMonth(year, undefined, 0);\n        setTimeout(() => {\n          $el.find('.calendar-year-picker').remove();\n        }, 200);\n      }\n\n      function onTimeSelectorClick() {\n        calendar.openTimePicker();\n      }\n\n      function onTimePickerCloseClick() {\n        calendar.closeTimePicker();\n      }\n\n      const passiveListener = app.touchEvents.start === 'touchstart' && app.support.passiveListener ? {\n        passive: true,\n        capture: false\n      } : false; // Selectors clicks\n\n      $el.find('.calendar-prev-month-button').on('click', onPrevMonthClick);\n      $el.find('.calendar-next-month-button').on('click', onNextMonthClick);\n      $el.find('.calendar-prev-year-button').on('click', onPrevYearClick);\n      $el.find('.calendar-next-year-button').on('click', onNextYearClick);\n\n      if (calendar.params.monthPicker) {\n        $el.find('.current-month-value').on('click', onMonthSelectorClick);\n        $el.on('click', '.calendar-month-picker-item', onMonthSelectorItemClick);\n      }\n\n      if (calendar.params.yearPicker) {\n        $el.find('.current-year-value').on('click', onYearSelectorClick);\n        $el.on('click', '.calendar-year-picker-item', onYearSelectorItemClick);\n      }\n\n      if (calendar.hasTimePicker) {\n        $el.find('.calendar-time-selector a').on('click', onTimeSelectorClick);\n        $el.on('click', '.calendar-time-picker-close', onTimePickerCloseClick);\n      } // Day clicks\n\n\n      $wrapperEl.on('click', handleDayClick); // Touch events\n\n      if (calendar.params.touchMove) {\n        $wrapperEl.on(app.touchEvents.start, handleTouchStart, passiveListener);\n        app.on('touchmove:active', handleTouchMove);\n        app.on('touchend:passive', handleTouchEnd);\n      }\n\n      calendar.detachCalendarEvents = function detachCalendarEvents() {\n        $el.find('.calendar-prev-month-button').off('click', onPrevMonthClick);\n        $el.find('.calendar-next-month-button').off('click', onNextMonthClick);\n        $el.find('.calendar-prev-year-button').off('click', onPrevYearClick);\n        $el.find('.calendar-next-year-button').off('click', onNextYearClick);\n\n        if (calendar.params.monthPicker) {\n          $el.find('.current-month-value').off('click', onMonthSelectorClick);\n          $el.off('click', '.calendar-month-picker-item', onMonthSelectorItemClick);\n        }\n\n        if (calendar.params.yearPicker) {\n          $el.find('.current-year-value').off('click', onYearSelectorClick);\n          $el.off('click', '.calendar-year-picker-item', onYearSelectorItemClick);\n        }\n\n        if (calendar.hasTimePicker) {\n          $el.find('.calendar-time-selector a').off('click', onTimeSelectorClick);\n          $el.off('click', '.calendar-time-picker-close', onTimePickerCloseClick);\n        }\n\n        $wrapperEl.off('click', handleDayClick);\n\n        if (calendar.params.touchMove) {\n          $wrapperEl.off(app.touchEvents.start, handleTouchStart, passiveListener);\n          app.off('touchmove:active', handleTouchMove);\n          app.off('touchend:passive', handleTouchEnd);\n        }\n      };\n    };\n\n    calendar.init();\n    return calendar;\n  }\n\n  getIntlNames() {\n    const calendar = this;\n    const locale = calendar.params.locale;\n    const monthNamesIntl = [];\n    const monthNamesShortIntl = [];\n    const dayNamesIntl = [];\n    const dayNamesShortIntl = [];\n    const formatterMonthNames = new Intl.DateTimeFormat(locale, {\n      month: 'long'\n    });\n    const formatterMonthNamesShort = new Intl.DateTimeFormat(locale, {\n      month: 'short'\n    });\n    const formatterDayNames = new Intl.DateTimeFormat(locale, {\n      weekday: 'long'\n    });\n    const formatterDayNamesShort = new Intl.DateTimeFormat(locale, {\n      weekday: 'short'\n    });\n    let year;\n    let yearStarted;\n    let yearEnded;\n\n    for (let i = 0; i < 24; i += 1) {\n      const date = new Date().setMonth(i, 1);\n      const currentYear = calendar.yearFormatter.format(date);\n\n      if (year && currentYear !== year) {\n        if (yearStarted) yearEnded = true;\n        yearStarted = true;\n        year = currentYear;\n      }\n\n      if (!year) {\n        year = currentYear;\n      }\n\n      if (yearStarted && year === currentYear && !yearEnded) {\n        monthNamesIntl.push(formatterMonthNames.format(date));\n        monthNamesShortIntl.push(formatterMonthNamesShort.format(date));\n      }\n    }\n\n    const weekDay = new Date().getDay();\n\n    for (let i = 0; i < 7; i += 1) {\n      const date = new Date().getTime() + (i - weekDay) * 24 * 60 * 60 * 1000;\n      dayNamesIntl.push(formatterDayNames.format(date));\n      dayNamesShortIntl.push(formatterDayNamesShort.format(date));\n    }\n\n    return {\n      monthNamesIntl,\n      monthNamesShortIntl,\n      dayNamesIntl,\n      dayNamesShortIntl\n    };\n  }\n\n  normalizeDate(date) {\n    const calendar = this;\n    const d = new Date(date);\n\n    if (calendar.hasTimePicker) {\n      return new Date(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes());\n    }\n\n    return new Date(d.getFullYear(), d.getMonth(), d.getDate());\n  }\n\n  normalizeValues(values) {\n    const calendar = this;\n    let newValues = [];\n\n    if (values && Array.isArray(values)) {\n      newValues = values.map(val => calendar.normalizeDate(val));\n    }\n\n    return newValues;\n  }\n\n  initInput() {\n    const calendar = this;\n    if (!calendar.$inputEl) return;\n    if (calendar.params.inputReadOnly) calendar.$inputEl.prop('readOnly', true);\n  }\n\n  isPopover() {\n    const calendar = this;\n    const {\n      app,\n      modal,\n      params\n    } = calendar;\n    if (params.openIn === 'sheet') return false;\n    if (modal && modal.type !== 'popover') return false;\n\n    if (!calendar.inline && calendar.inputEl) {\n      if (params.openIn === 'popover') return true;\n\n      if (app.device.ios) {\n        return !!app.device.ipad;\n      }\n\n      if (app.width >= 768) {\n        return true;\n      }\n\n      if (app.device.desktop && app.theme === 'aurora') {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  formatDate(d) {\n    const calendar = this;\n    const date = new Date(d);\n    const year = date.getFullYear();\n    const month = date.getMonth();\n    const month1 = month + 1;\n    const day = date.getDate();\n    const weekDay = date.getDay();\n    const {\n      monthNames,\n      monthNamesShort,\n      dayNames,\n      dayNamesShort\n    } = calendar;\n    const {\n      dateFormat,\n      locale\n    } = calendar.params;\n\n    if (typeof dateFormat === 'string') {\n      return dateFormat.replace(/yyyy/g, year).replace(/yy/g, String(year).substring(2)).replace(/mm/g, month1 < 10 ? `0${month1}` : month1).replace(/m(\\W+)/g, `${month1}$1`).replace(/MM/g, monthNames[month]).replace(/M(\\W+)/g, `${monthNamesShort[month]}$1`).replace(/dd/g, day < 10 ? `0${day}` : day).replace(/d(\\W+)/g, `${day}$1`).replace(/DD/g, dayNames[weekDay]).replace(/D(\\W+)/g, `${dayNamesShort[weekDay]}$1`);\n    }\n\n    if (typeof dateFormat === 'function') {\n      return dateFormat(date);\n    } // Intl Object\n\n\n    const formatter = new Intl.DateTimeFormat(locale, dateFormat);\n    return formatter.format(date);\n  }\n\n  formatValue() {\n    const calendar = this;\n    const {\n      value\n    } = calendar;\n\n    if (calendar.params.formatValue) {\n      return calendar.params.formatValue.call(calendar, value);\n    }\n\n    return value.map(v => calendar.formatDate(v)).join(calendar.params.rangePicker ? ' - ' : ', ');\n  }\n\n  addValue(newValue) {\n    const calendar = this;\n    const {\n      multiple,\n      rangePicker,\n      rangePickerMinDays,\n      rangePickerMaxDays\n    } = calendar.params;\n\n    if (multiple) {\n      if (!calendar.value) calendar.value = [];\n      let inValuesIndex;\n\n      for (let i = 0; i < calendar.value.length; i += 1) {\n        if (new Date(newValue).getTime() === new Date(calendar.value[i]).getTime()) {\n          inValuesIndex = i;\n        }\n      }\n\n      if (typeof inValuesIndex === 'undefined') {\n        calendar.value.push(newValue);\n      } else {\n        calendar.value.splice(inValuesIndex, 1);\n      }\n\n      calendar.updateValue();\n    } else if (rangePicker) {\n      if (!calendar.value) calendar.value = [];\n\n      if (calendar.value.length === 2 || calendar.value.length === 0) {\n        calendar.value = [];\n      }\n\n      if (calendar.value.length === 0 || Math.abs(calendar.value[0].getTime() - newValue.getTime()) >= (rangePickerMinDays - 1) * 60 * 60 * 24 * 1000 && (rangePickerMaxDays === 0 || Math.abs(calendar.value[0].getTime() - newValue.getTime()) <= (rangePickerMaxDays - 1) * 60 * 60 * 24 * 1000)) calendar.value.push(newValue);else calendar.value = [];\n      calendar.value.sort((a, b) => a - b);\n      calendar.updateValue();\n    } else {\n      calendar.value = [newValue];\n      calendar.updateValue();\n    }\n  }\n\n  setValue(values) {\n    const calendar = this;\n    const currentValue = calendar.value;\n\n    if (Array.isArray(currentValue) && Array.isArray(values) && currentValue.length === values.length) {\n      let equal = true;\n      currentValue.forEach((v, index) => {\n        if (v !== values[index]) equal = false;\n      });\n      if (equal) return;\n    }\n\n    calendar.value = values;\n    calendar.updateValue();\n  }\n\n  getValue() {\n    const calendar = this;\n    return calendar.value;\n  }\n\n  updateValue(onlyHeader) {\n    const calendar = this;\n    const {\n      $el,\n      $wrapperEl,\n      $inputEl,\n      value,\n      params\n    } = calendar;\n    let i;\n\n    if ($el && $el.length > 0) {\n      $wrapperEl.find('.calendar-day-selected').removeClass('calendar-day-selected');\n      let valueDate;\n\n      if (params.rangePicker && value.length === 2) {\n        for (i = new Date(value[0]).getTime(); i <= new Date(value[1]).getTime(); i += 24 * 60 * 60 * 1000) {\n          valueDate = new Date(i);\n          $wrapperEl.find(`.calendar-day[data-date=\"${valueDate.getFullYear()}-${valueDate.getMonth()}-${valueDate.getDate()}\"]`).addClass('calendar-day-selected');\n        }\n      } else {\n        for (i = 0; i < calendar.value.length; i += 1) {\n          valueDate = new Date(value[i]);\n          $wrapperEl.find(`.calendar-day[data-date=\"${valueDate.getFullYear()}-${valueDate.getMonth()}-${valueDate.getDate()}\"]`).addClass('calendar-day-selected');\n        }\n      }\n    }\n\n    if (!onlyHeader) {\n      calendar.emit('local::change calendarChange', calendar, value);\n    }\n\n    if ($el && $el.length > 0 && calendar.hasTimePicker) {\n      $el.find('.calendar-time-selector a').text(value && value.length ? calendar.timeSelectorFormatter.format(value[0]) : calendar.params.timePickerPlaceholder);\n    }\n\n    if ($inputEl && $inputEl.length || params.header) {\n      const inputValue = calendar.formatValue(value);\n\n      if (params.header && $el && $el.length) {\n        $el.find('.calendar-selected-date').text(inputValue);\n      }\n\n      if ($inputEl && $inputEl.length && !onlyHeader) {\n        $inputEl.val(inputValue);\n        $inputEl.trigger('change');\n      }\n    }\n  }\n\n  updateCurrentMonthYear(dir) {\n    const calendar = this;\n    const {\n      $months,\n      $el,\n      monthNames\n    } = calendar;\n    let currentLocaleMonth;\n    let currentLocaleYear;\n\n    if (typeof dir === 'undefined') {\n      calendar.currentMonth = parseInt($months.eq(1).attr('data-month'), 10);\n      calendar.currentYear = parseInt($months.eq(1).attr('data-year'), 10);\n      currentLocaleMonth = $months.eq(1).attr('data-locale-month');\n      currentLocaleYear = $months.eq(1).attr('data-locale-year');\n    } else {\n      calendar.currentMonth = parseInt($months.eq(dir === 'next' ? $months.length - 1 : 0).attr('data-month'), 10);\n      calendar.currentYear = parseInt($months.eq(dir === 'next' ? $months.length - 1 : 0).attr('data-year'), 10);\n      currentLocaleMonth = $months.eq(dir === 'next' ? $months.length - 1 : 0).attr('data-locale-month');\n      currentLocaleYear = $months.eq(dir === 'next' ? $months.length - 1 : 0).attr('data-locale-year');\n    }\n\n    $el.find('.current-month-value').text(monthNames[currentLocaleMonth]);\n    $el.find('.current-year-value').text(currentLocaleYear);\n  }\n\n  update() {\n    const calendar = this;\n    const {\n      currentYear,\n      currentMonth,\n      $wrapperEl\n    } = calendar;\n    const currentDate = new Date(currentYear, currentMonth);\n    const prevMonthHtml = calendar.renderMonth(currentDate, 'prev');\n    const currentMonthHtml = calendar.renderMonth(currentDate);\n    const nextMonthHtml = calendar.renderMonth(currentDate, 'next');\n    $wrapperEl.transition(0).html(`${prevMonthHtml}${currentMonthHtml}${nextMonthHtml}`).transform('translate3d(0,0,0)');\n    calendar.$months = $wrapperEl.find('.calendar-month');\n    calendar.monthsTranslate = 0;\n    calendar.setMonthsTranslate();\n    calendar.$months.each((index, monthEl) => {\n      calendar.emit('local::monthAdd calendarMonthAdd', monthEl);\n    });\n  }\n\n  onMonthChangeStart(dir) {\n    const calendar = this;\n    const {\n      $months,\n      currentYear,\n      currentMonth\n    } = calendar;\n    calendar.updateCurrentMonthYear(dir);\n    $months.removeClass('calendar-month-current calendar-month-prev calendar-month-next');\n    const currentIndex = dir === 'next' ? $months.length - 1 : 0;\n    $months.eq(currentIndex).addClass('calendar-month-current');\n    $months.eq(dir === 'next' ? currentIndex - 1 : currentIndex + 1).addClass(dir === 'next' ? 'calendar-month-prev' : 'calendar-month-next');\n    calendar.emit('local::monthYearChangeStart calendarMonthYearChangeStart', calendar, currentYear, currentMonth);\n  }\n\n  onMonthChangeEnd(dir, rebuildBoth) {\n    const calendar = this;\n    const {\n      currentYear,\n      currentMonth,\n      $wrapperEl,\n      monthsTranslate\n    } = calendar;\n    calendar.animating = false;\n    let nextMonthHtml;\n    let prevMonthHtml;\n    let currentMonthHtml;\n    $wrapperEl.find('.calendar-month:not(.calendar-month-prev):not(.calendar-month-current):not(.calendar-month-next)').remove();\n\n    if (typeof dir === 'undefined') {\n      dir = 'next'; // eslint-disable-line\n\n      rebuildBoth = true; // eslint-disable-line\n    }\n\n    if (!rebuildBoth) {\n      currentMonthHtml = calendar.renderMonth(new Date(currentYear, currentMonth), dir);\n    } else {\n      $wrapperEl.find('.calendar-month-next, .calendar-month-prev').remove();\n      prevMonthHtml = calendar.renderMonth(new Date(currentYear, currentMonth), 'prev');\n      nextMonthHtml = calendar.renderMonth(new Date(currentYear, currentMonth), 'next');\n    }\n\n    if (dir === 'next' || rebuildBoth) {\n      $wrapperEl.append(currentMonthHtml || nextMonthHtml);\n    }\n\n    if (dir === 'prev' || rebuildBoth) {\n      $wrapperEl.prepend(currentMonthHtml || prevMonthHtml);\n    }\n\n    const $months = $wrapperEl.find('.calendar-month');\n    calendar.$months = $months;\n    calendar.setMonthsTranslate(monthsTranslate);\n    calendar.emit('local::monthAdd calendarMonthAdd', calendar, dir === 'next' ? $months.eq($months.length - 1)[0] : $months.eq(0)[0]);\n    calendar.emit('local::monthYearChangeEnd calendarMonthYearChangeEnd', calendar, currentYear, currentMonth);\n  }\n\n  setMonthsTranslate(translate) {\n    const calendar = this;\n    const {\n      $months,\n      isHorizontal: isH,\n      inverter\n    } = calendar; // eslint-disable-next-line\n\n    translate = translate || calendar.monthsTranslate || 0;\n\n    if (typeof calendar.monthsTranslate === 'undefined') {\n      calendar.monthsTranslate = translate;\n    }\n\n    $months.removeClass('calendar-month-current calendar-month-prev calendar-month-next');\n    const prevMonthTranslate = -(translate + 1) * 100 * inverter;\n    const currentMonthTranslate = -translate * 100 * inverter;\n    const nextMonthTranslate = -(translate - 1) * 100 * inverter;\n    $months.eq(0).transform(`translate3d(${isH ? prevMonthTranslate : 0}%, ${isH ? 0 : prevMonthTranslate}%, 0)`).addClass('calendar-month-prev');\n    $months.eq(1).transform(`translate3d(${isH ? currentMonthTranslate : 0}%, ${isH ? 0 : currentMonthTranslate}%, 0)`).addClass('calendar-month-current');\n    $months.eq(2).transform(`translate3d(${isH ? nextMonthTranslate : 0}%, ${isH ? 0 : nextMonthTranslate}%, 0)`).addClass('calendar-month-next');\n  }\n\n  nextMonth(transition) {\n    const calendar = this;\n    const {\n      params,\n      $wrapperEl,\n      inverter,\n      isHorizontal: isH\n    } = calendar;\n\n    if (typeof transition === 'undefined' || typeof transition === 'object') {\n      transition = ''; // eslint-disable-line\n\n      if (!params.animate) transition = 0; // eslint-disable-line\n    }\n\n    const nextMonth = parseInt(calendar.$months.eq(calendar.$months.length - 1).attr('data-month'), 10);\n    const nextYear = parseInt(calendar.$months.eq(calendar.$months.length - 1).attr('data-year'), 10);\n    const nextDate = new Date(nextYear, nextMonth);\n    const nextDateTime = nextDate.getTime();\n    const transitionEndCallback = !calendar.animating;\n\n    if (params.maxDate) {\n      if (nextDateTime > new Date(params.maxDate).getTime()) {\n        calendar.resetMonth();\n        return;\n      }\n    }\n\n    calendar.monthsTranslate -= 1;\n\n    if (nextMonth === calendar.currentMonth) {\n      const nextMonthTranslate = -calendar.monthsTranslate * 100 * inverter;\n      const nextMonthHtml = $(calendar.renderMonth(nextDateTime, 'next')).transform(`translate3d(${isH ? nextMonthTranslate : 0}%, ${isH ? 0 : nextMonthTranslate}%, 0)`).addClass('calendar-month-next');\n      $wrapperEl.append(nextMonthHtml[0]);\n      calendar.$months = $wrapperEl.find('.calendar-month');\n      calendar.emit('local::monthAdd calendarMonthAdd', calendar.$months.eq(calendar.$months.length - 1)[0]);\n    }\n\n    calendar.animating = true;\n    calendar.onMonthChangeStart('next');\n    const translate = calendar.monthsTranslate * 100 * inverter;\n    $wrapperEl.transition(transition).transform(`translate3d(${isH ? translate : 0}%, ${isH ? 0 : translate}%, 0)`);\n\n    if (transitionEndCallback) {\n      $wrapperEl.transitionEnd(() => {\n        calendar.onMonthChangeEnd('next');\n      });\n    }\n\n    if (!params.animate) {\n      calendar.onMonthChangeEnd('next');\n    }\n  }\n\n  prevMonth(transition) {\n    const calendar = this;\n    const {\n      params,\n      $wrapperEl,\n      inverter,\n      isHorizontal: isH\n    } = calendar;\n\n    if (typeof transition === 'undefined' || typeof transition === 'object') {\n      transition = ''; // eslint-disable-line\n\n      if (!params.animate) transition = 0; // eslint-disable-line\n    }\n\n    const prevMonth = parseInt(calendar.$months.eq(0).attr('data-month'), 10);\n    const prevYear = parseInt(calendar.$months.eq(0).attr('data-year'), 10);\n    const prevDate = new Date(prevYear, prevMonth + 1, -1);\n    const prevDateTime = prevDate.getTime();\n    const transitionEndCallback = !calendar.animating;\n\n    if (params.minDate) {\n      let minDate = new Date(params.minDate);\n      minDate = new Date(minDate.getFullYear(), minDate.getMonth(), 1);\n\n      if (prevDateTime < minDate.getTime()) {\n        calendar.resetMonth();\n        return;\n      }\n    }\n\n    calendar.monthsTranslate += 1;\n\n    if (prevMonth === calendar.currentMonth) {\n      const prevMonthTranslate = -calendar.monthsTranslate * 100 * inverter;\n      const prevMonthHtml = $(calendar.renderMonth(prevDateTime, 'prev')).transform(`translate3d(${isH ? prevMonthTranslate : 0}%, ${isH ? 0 : prevMonthTranslate}%, 0)`).addClass('calendar-month-prev');\n      $wrapperEl.prepend(prevMonthHtml[0]);\n      calendar.$months = $wrapperEl.find('.calendar-month');\n      calendar.emit('local::monthAdd calendarMonthAdd', calendar.$months.eq(0)[0]);\n    }\n\n    calendar.animating = true;\n    calendar.onMonthChangeStart('prev');\n    const translate = calendar.monthsTranslate * 100 * inverter;\n    $wrapperEl.transition(transition).transform(`translate3d(${isH ? translate : 0}%, ${isH ? 0 : translate}%, 0)`);\n\n    if (transitionEndCallback) {\n      $wrapperEl.transitionEnd(() => {\n        calendar.onMonthChangeEnd('prev');\n      });\n    }\n\n    if (!params.animate) {\n      calendar.onMonthChangeEnd('prev');\n    }\n  }\n\n  resetMonth() {\n    let transition = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    const calendar = this;\n    const {\n      $wrapperEl,\n      inverter,\n      isHorizontal: isH,\n      monthsTranslate\n    } = calendar;\n    const translate = monthsTranslate * 100 * inverter;\n    $wrapperEl.transition(transition).transform(`translate3d(${isH ? translate : 0}%, ${isH ? 0 : translate}%, 0)`);\n  } // eslint-disable-next-line\n\n\n  setYearMonth(year, month, transition) {\n    const calendar = this;\n    const {\n      params,\n      isHorizontal: isH,\n      $wrapperEl,\n      inverter\n    } = calendar; // eslint-disable-next-line\n\n    if (typeof year === 'undefined') year = calendar.currentYear; // eslint-disable-next-line\n\n    if (typeof month === 'undefined') month = calendar.currentMonth;\n\n    if (typeof transition === 'undefined' || typeof transition === 'object') {\n      // eslint-disable-next-line\n      transition = ''; // eslint-disable-next-line\n\n      if (!params.animate) transition = 0;\n    }\n\n    let targetDate;\n\n    if (year < calendar.currentYear) {\n      targetDate = new Date(year, month + 1, -1).getTime();\n    } else {\n      targetDate = new Date(year, month).getTime();\n    }\n\n    if (params.maxDate && targetDate > new Date(params.maxDate).getTime()) {\n      return false;\n    }\n\n    if (params.minDate) {\n      let minDate = new Date(params.minDate);\n      minDate = new Date(minDate.getFullYear(), minDate.getMonth(), 1);\n\n      if (targetDate < minDate.getTime()) {\n        return false;\n      }\n    }\n\n    const currentDate = new Date(calendar.currentYear, calendar.currentMonth).getTime();\n    const dir = targetDate > currentDate ? 'next' : 'prev';\n    const newMonthHTML = calendar.renderMonth(new Date(year, month));\n    calendar.monthsTranslate = calendar.monthsTranslate || 0;\n    const prevTranslate = calendar.monthsTranslate;\n    let monthTranslate;\n    const transitionEndCallback = !calendar.animating && transition !== 0;\n\n    if (targetDate > currentDate) {\n      // To next\n      calendar.monthsTranslate -= 1;\n      if (!calendar.animating) calendar.$months.eq(calendar.$months.length - 1).remove();\n      $wrapperEl.append(newMonthHTML);\n      calendar.$months = $wrapperEl.find('.calendar-month');\n      monthTranslate = -(prevTranslate - 1) * 100 * inverter;\n      calendar.$months.eq(calendar.$months.length - 1).transform(`translate3d(${isH ? monthTranslate : 0}%, ${isH ? 0 : monthTranslate}%, 0)`).addClass('calendar-month-next');\n    } else {\n      // To prev\n      calendar.monthsTranslate += 1;\n      if (!calendar.animating) calendar.$months.eq(0).remove();\n      $wrapperEl.prepend(newMonthHTML);\n      calendar.$months = $wrapperEl.find('.calendar-month');\n      monthTranslate = -(prevTranslate + 1) * 100 * inverter;\n      calendar.$months.eq(0).transform(`translate3d(${isH ? monthTranslate : 0}%, ${isH ? 0 : monthTranslate}%, 0)`).addClass('calendar-month-prev');\n    }\n\n    calendar.emit('local::monthAdd calendarMonthAdd', dir === 'next' ? calendar.$months.eq(calendar.$months.length - 1)[0] : calendar.$months.eq(0)[0]);\n    calendar.animating = true;\n    calendar.onMonthChangeStart(dir);\n    const wrapperTranslate = calendar.monthsTranslate * 100 * inverter;\n    $wrapperEl.transition(transition).transform(`translate3d(${isH ? wrapperTranslate : 0}%, ${isH ? 0 : wrapperTranslate}%, 0)`);\n\n    if (transitionEndCallback) {\n      $wrapperEl.transitionEnd(() => {\n        calendar.onMonthChangeEnd(dir, true);\n      });\n    }\n\n    if (!params.animate || transition === 0) {\n      calendar.onMonthChangeEnd(dir, true);\n    }\n  }\n\n  nextYear() {\n    const calendar = this;\n    calendar.setYearMonth(calendar.currentYear + 1);\n  }\n\n  prevYear() {\n    const calendar = this;\n    calendar.setYearMonth(calendar.currentYear - 1);\n  } // eslint-disable-next-line\n\n\n  dateInRange(dayDate, range) {\n    let match = false;\n    let i;\n    if (!range) return false;\n\n    if (Array.isArray(range)) {\n      for (i = 0; i < range.length; i += 1) {\n        if (range[i].from || range[i].to) {\n          if (range[i].from && range[i].to) {\n            if (dayDate <= new Date(range[i].to).getTime() && dayDate >= new Date(range[i].from).getTime()) {\n              match = true;\n            }\n          } else if (range[i].from) {\n            if (dayDate >= new Date(range[i].from).getTime()) {\n              match = true;\n            }\n          } else if (range[i].to) {\n            if (dayDate <= new Date(range[i].to).getTime()) {\n              match = true;\n            }\n          }\n        } else if (range[i].date) {\n          if (dayDate === new Date(range[i].date).getTime()) {\n            match = true;\n          }\n        } else if (dayDate === new Date(range[i]).getTime()) {\n          match = true;\n        }\n      }\n    } else if (range.from || range.to) {\n      if (range.from && range.to) {\n        if (dayDate <= new Date(range.to).getTime() && dayDate >= new Date(range.from).getTime()) {\n          match = true;\n        }\n      } else if (range.from) {\n        if (dayDate >= new Date(range.from).getTime()) {\n          match = true;\n        }\n      } else if (range.to) {\n        if (dayDate <= new Date(range.to).getTime()) {\n          match = true;\n        }\n      }\n    } else if (range.date) {\n      match = dayDate === new Date(range.date).getTime();\n    } else if (typeof range === 'function') {\n      match = range(new Date(dayDate));\n    }\n\n    return match;\n  } // eslint-disable-next-line\n\n\n  daysInMonth(date) {\n    const d = new Date(date);\n    return new Date(d.getFullYear(), d.getMonth() + 1, 0).getDate();\n  }\n\n  renderMonths(date) {\n    const calendar = this;\n\n    if (calendar.params.renderMonths) {\n      return calendar.params.renderMonths.call(calendar, date);\n    }\n\n    return `\n    <div class=\"calendar-months-wrapper\">\n    ${calendar.renderMonth(date, 'prev')}\n    ${calendar.renderMonth(date)}\n    ${calendar.renderMonth(date, 'next')}\n    </div>\n  `.trim();\n  }\n\n  renderMonth(d, offset) {\n    const calendar = this;\n    const {\n      params,\n      value\n    } = calendar;\n\n    if (params.renderMonth) {\n      return params.renderMonth.call(calendar, d, offset);\n    }\n\n    let date = new Date(d);\n    let year = date.getFullYear();\n    let month = date.getMonth();\n    let localeMonth = calendar.monthNames.indexOf(calendar.monthFormatter.format(date));\n    if (localeMonth < 0) localeMonth = month;\n    let localeYear = calendar.yearFormatter.format(date);\n\n    if (offset === 'next') {\n      if (month === 11) date = new Date(year + 1, 0);else date = new Date(year, month + 1, 1);\n    }\n\n    if (offset === 'prev') {\n      if (month === 0) date = new Date(year - 1, 11);else date = new Date(year, month - 1, 1);\n    }\n\n    if (offset === 'next' || offset === 'prev') {\n      month = date.getMonth();\n      year = date.getFullYear();\n      localeMonth = calendar.monthNames.indexOf(calendar.monthFormatter.format(date));\n      if (localeMonth < 0) localeMonth = month;\n      localeYear = calendar.yearFormatter.format(date);\n    }\n\n    const currentValues = [];\n    const today = new Date().setHours(0, 0, 0, 0);\n    const minDate = params.minDate ? new Date(params.minDate).getTime() : null;\n    const maxDate = params.maxDate ? new Date(params.maxDate).getTime() : null;\n    const rows = 6;\n    const cols = 7;\n    const daysInPrevMonth = calendar.daysInMonth(new Date(date.getFullYear(), date.getMonth()).getTime() - 10 * 24 * 60 * 60 * 1000);\n    const daysInMonth = calendar.daysInMonth(date);\n    const minDayNumber = params.firstDay === 6 ? 0 : 1;\n    let monthHtml = '';\n    let dayIndex = 0 + (params.firstDay - 1);\n    let disabled;\n    let hasEvents;\n    let firstDayOfMonthIndex = new Date(date.getFullYear(), date.getMonth()).getDay();\n    if (firstDayOfMonthIndex === 0) firstDayOfMonthIndex = 7;\n\n    if (value && value.length) {\n      for (let i = 0; i < value.length; i += 1) {\n        currentValues.push(new Date(value[i]).setHours(0, 0, 0, 0));\n      }\n    }\n\n    for (let row = 1; row <= rows; row += 1) {\n      let rowHtml = '';\n\n      for (let col = 1; col <= cols; col += 1) {\n        dayIndex += 1;\n        let dayDate;\n        let dayNumber = dayIndex - firstDayOfMonthIndex;\n        let addClass = '';\n\n        if (row === 1 && col === 1 && dayNumber > minDayNumber && params.firstDay !== 1) {\n          dayIndex -= 7;\n          dayNumber = dayIndex - firstDayOfMonthIndex;\n        }\n\n        const weekDayIndex = col - 1 + params.firstDay > 6 ? col - 1 - 7 + params.firstDay : col - 1 + params.firstDay;\n\n        if (dayNumber < 0) {\n          dayNumber = daysInPrevMonth + dayNumber + 1;\n          addClass += ' calendar-day-prev';\n          dayDate = new Date(month - 1 < 0 ? year - 1 : year, month - 1 < 0 ? 11 : month - 1, dayNumber).getTime();\n        } else {\n          dayNumber += 1;\n\n          if (dayNumber > daysInMonth) {\n            dayNumber -= daysInMonth;\n            addClass += ' calendar-day-next';\n            dayDate = new Date(month + 1 > 11 ? year + 1 : year, month + 1 > 11 ? 0 : month + 1, dayNumber).getTime();\n          } else {\n            dayDate = new Date(year, month, dayNumber).getTime();\n          }\n        } // Today\n\n\n        if (dayDate === today) addClass += ' calendar-day-today'; // Selected\n\n        if (params.rangePicker && currentValues.length === 2) {\n          if (dayDate >= currentValues[0] && dayDate <= currentValues[1]) addClass += ' calendar-day-selected';\n        } else if (currentValues.indexOf(dayDate) >= 0) addClass += ' calendar-day-selected'; // Weekend\n\n\n        if (params.weekendDays.indexOf(weekDayIndex) >= 0) {\n          addClass += ' calendar-day-weekend';\n        } // Events\n\n\n        let eventsHtml = '';\n        hasEvents = false;\n\n        if (params.events) {\n          if (calendar.dateInRange(dayDate, params.events)) {\n            hasEvents = true;\n          }\n        }\n\n        if (hasEvents) {\n          addClass += ' calendar-day-has-events';\n          eventsHtml = `\n            <span class=\"calendar-day-events\">\n              <span class=\"calendar-day-event\"></span>\n            </span>\n          `;\n\n          if (Array.isArray(params.events)) {\n            const eventDots = [];\n            params.events.forEach(ev => {\n              const color = ev.color || '';\n\n              if (eventDots.indexOf(color) < 0 && calendar.dateInRange(dayDate, ev)) {\n                eventDots.push(color);\n              }\n            });\n            eventsHtml = `\n              <span class=\"calendar-day-events\">\n                ${eventDots.map(color => `\n                  <span class=\"calendar-day-event\" style=\"${color ? `background-color: ${color}` : ''}\"></span>\n                `.trim()).join('')}\n              </span>\n            `;\n          }\n        } // Custom Ranges\n\n\n        if (params.rangesClasses) {\n          for (let k = 0; k < params.rangesClasses.length; k += 1) {\n            if (calendar.dateInRange(dayDate, params.rangesClasses[k].range)) {\n              addClass += ` ${params.rangesClasses[k].cssClass}`;\n            }\n          }\n        } // Disabled\n\n\n        disabled = false;\n\n        if (minDate && dayDate < minDate || maxDate && dayDate > maxDate) {\n          disabled = true;\n        }\n\n        if (params.disabled) {\n          if (calendar.dateInRange(dayDate, params.disabled)) {\n            disabled = true;\n          }\n        }\n\n        if (disabled) {\n          addClass += ' calendar-day-disabled';\n        }\n\n        dayDate = new Date(dayDate);\n        const dayYear = dayDate.getFullYear();\n        const dayMonth = dayDate.getMonth();\n        const dayNumberDisplay = calendar.dayFormatter.format(dayDate);\n        rowHtml += `\n          <div data-year=\"${dayYear}\" data-month=\"${dayMonth}\" data-day=\"${dayNumber}\" class=\"calendar-day${addClass}\" data-date=\"${dayYear}-${dayMonth}-${dayNumber}\">\n            <span class=\"calendar-day-number\">${dayNumberDisplay}${eventsHtml}</span>\n          </div>`.trim();\n      }\n\n      monthHtml += `<div class=\"calendar-row\">${rowHtml}</div>`;\n    }\n\n    monthHtml = `<div class=\"calendar-month\" data-year=\"${year}\" data-month=\"${month}\" data-locale-year=\"${localeYear}\" data-locale-month=\"${localeMonth}\">${monthHtml}</div>`;\n    return monthHtml;\n  }\n\n  renderWeekHeader() {\n    const calendar = this;\n\n    if (calendar.params.renderWeekHeader) {\n      return calendar.params.renderWeekHeader.call(calendar);\n    }\n\n    const {\n      params\n    } = calendar;\n    let weekDaysHtml = '';\n\n    for (let i = 0; i < 7; i += 1) {\n      const dayIndex = i + params.firstDay > 6 ? i - 7 + params.firstDay : i + params.firstDay;\n      const dayName = calendar.dayNamesShort[dayIndex];\n      weekDaysHtml += `<div class=\"calendar-week-day\">${dayName}</div>`;\n    }\n\n    return `\n    <div class=\"calendar-week-header\">\n      ${weekDaysHtml}\n    </div>\n  `.trim();\n  }\n\n  renderMonthSelector() {\n    const calendar = this;\n\n    if (calendar.params.renderMonthSelector) {\n      return calendar.params.renderMonthSelector.call(calendar);\n    }\n\n    return `\n    <div class=\"calendar-month-selector\">\n      <a class=\"link icon-only calendar-prev-month-button\">\n        <i class=\"icon icon-prev\"></i>\n      </a>\n      ${calendar.params.monthPicker ? `\n        <a class=\"current-month-value link\"></a>\n      ` : `\n        <span class=\"current-month-value\"></span>\n      `}\n      <a class=\"link icon-only calendar-next-month-button\">\n        <i class=\"icon icon-next\"></i>\n      </a>\n    </div>\n  `.trim();\n  }\n\n  renderMonthPicker() {\n    const calendar = this;\n    const localeMonth = parseInt(calendar.$el.find('.calendar-month-current').attr('data-locale-month'), 10);\n    return `\n      <div class=\"calendar-month-picker\">\n        ${calendar.monthNames.map((m, index) => `\n          <div class=\"calendar-month-picker-item ${localeMonth === index ? 'calendar-month-picker-item-current' : ''}\">\n            <span>${m}</span>\n          </div>\n        `).join('')}\n      </div>\n    `;\n  }\n\n  renderYearSelector() {\n    const calendar = this;\n\n    if (calendar.params.renderYearSelector) {\n      return calendar.params.renderYearSelector.call(calendar);\n    }\n\n    return `\n    <div class=\"calendar-year-selector\">\n      <a class=\"link icon-only calendar-prev-year-button\">\n        <i class=\"icon icon-prev\"></i>\n      </a>\n      ${calendar.params.yearPicker ? `\n        <a class=\"current-year-value link\"></a>\n      ` : `\n        <span class=\"current-year-value\"></span>\n      `}\n      <a class=\"link icon-only calendar-next-year-button\">\n        <i class=\"icon icon-next\"></i>\n      </a>\n    </div>\n  `.trim();\n  }\n\n  renderYearPicker() {\n    const calendar = this;\n    const currentYear = calendar.currentYear;\n    let yearMin = calendar.params.yearPickerMin || new Date().getFullYear() - 100;\n\n    if (calendar.params.minDate) {\n      yearMin = Math.max(yearMin, new Date(calendar.params.minDate).getFullYear());\n    }\n\n    let yearMax = calendar.params.yearPickerMax || new Date().getFullYear() + 100;\n\n    if (calendar.params.maxDate) {\n      yearMax = Math.min(yearMax, new Date(calendar.params.maxDate).getFullYear());\n    }\n\n    const years = [];\n\n    for (let i = yearMin; i <= yearMax; i += 1) {\n      years.push(i);\n    }\n\n    return `\n      <div class=\"calendar-year-picker\">\n        ${years.map(year => `\n          <div data-year=\"${year}\" class=\"calendar-year-picker-item ${year === currentYear ? 'calendar-year-picker-item-current' : ''}\">\n            <span>${calendar.yearFormatter.format(new Date().setFullYear(year))}</span>\n          </div>\n        `).join('')}\n      </div>\n    `;\n  } // eslint-disable-next-line\n\n\n  renderTimeSelector() {\n    const calendar = this;\n    const value = calendar.value && calendar.value[0];\n    let timeString;\n    if (value) timeString = calendar.timeSelectorFormatter.format(value);\n    return `\n      <div class=\"calendar-time-selector\"><a class=\"link\">${timeString || calendar.params.timePickerPlaceholder}</a></div>\n    `;\n  }\n\n  renderHeader() {\n    const calendar = this;\n\n    if (calendar.params.renderHeader) {\n      return calendar.params.renderHeader.call(calendar);\n    }\n\n    return `\n    <div class=\"calendar-header\">\n      <div class=\"calendar-selected-date\">${calendar.params.headerPlaceholder}</div>\n    </div>\n  `.trim();\n  }\n\n  renderFooter() {\n    const calendar = this;\n    const app = calendar.app;\n\n    if (calendar.params.renderFooter) {\n      return calendar.params.renderFooter.call(calendar);\n    }\n\n    return `\n    <div class=\"calendar-footer\">\n      <a class=\"${app.theme === 'md' ? 'button' : 'link'} calendar-close sheet-close popover-close\">${calendar.params.toolbarCloseText}</a>\n    </div>\n  `.trim();\n  }\n\n  renderToolbar() {\n    const calendar = this;\n\n    if (calendar.params.renderToolbar) {\n      return calendar.params.renderToolbar.call(calendar, calendar);\n    }\n\n    return `\n    <div class=\"toolbar toolbar-top no-shadow\">\n      <div class=\"toolbar-inner\">\n        ${calendar.params.monthSelector ? calendar.renderMonthSelector() : ''}\n        ${calendar.params.yearSelector ? calendar.renderYearSelector() : ''}\n      </div>\n    </div>\n  `.trim();\n  } // eslint-disable-next-line\n\n\n  renderInline() {\n    const calendar = this;\n    const {\n      cssClass,\n      toolbar,\n      header,\n      footer,\n      rangePicker,\n      weekHeader\n    } = calendar.params;\n    const {\n      value,\n      hasTimePicker\n    } = calendar;\n    const date = value && value.length ? value[0] : new Date().setHours(0, 0, 0);\n    const inlineHtml = `\n    <div class=\"calendar calendar-inline ${rangePicker ? 'calendar-range' : ''} ${cssClass || ''}\">\n      ${header ? calendar.renderHeader() : ''}\n      ${toolbar ? calendar.renderToolbar() : ''}\n      ${weekHeader ? calendar.renderWeekHeader() : ''}\n      <div class=\"calendar-months\">\n        ${calendar.renderMonths(date)}\n      </div>\n      ${hasTimePicker ? calendar.renderTimeSelector() : ''}\n      ${footer ? calendar.renderFooter() : ''}\n    </div>\n  `.trim();\n    return inlineHtml;\n  }\n\n  renderCustomModal() {\n    const calendar = this;\n    const {\n      cssClass,\n      toolbar,\n      header,\n      footer,\n      rangePicker,\n      weekHeader\n    } = calendar.params;\n    const {\n      value,\n      hasTimePicker\n    } = calendar;\n    const date = value && value.length ? value[0] : new Date().setHours(0, 0, 0);\n    const sheetHtml = `\n    <div class=\"calendar calendar-modal ${rangePicker ? 'calendar-range' : ''} ${cssClass || ''}\">\n      ${header ? calendar.renderHeader() : ''}\n      ${toolbar ? calendar.renderToolbar() : ''}\n      ${weekHeader ? calendar.renderWeekHeader() : ''}\n      <div class=\"calendar-months\">\n        ${calendar.renderMonths(date)}\n      </div>\n      ${hasTimePicker ? calendar.renderTimeSelector() : ''}\n      ${footer ? calendar.renderFooter() : ''}\n    </div>\n  `.trim();\n    return sheetHtml;\n  }\n\n  renderSheet() {\n    const calendar = this;\n    const {\n      cssClass,\n      toolbar,\n      header,\n      footer,\n      rangePicker,\n      weekHeader\n    } = calendar.params;\n    const {\n      value,\n      hasTimePicker\n    } = calendar;\n    const date = value && value.length ? value[0] : new Date().setHours(0, 0, 0);\n    const sheetHtml = `\n    <div class=\"sheet-modal calendar calendar-sheet ${rangePicker ? 'calendar-range' : ''} ${cssClass || ''}\">\n      ${header ? calendar.renderHeader() : ''}\n      ${toolbar ? calendar.renderToolbar() : ''}\n      ${weekHeader ? calendar.renderWeekHeader() : ''}\n      <div class=\"sheet-modal-inner calendar-months\">\n        ${calendar.renderMonths(date)}\n      </div>\n      ${hasTimePicker ? calendar.renderTimeSelector() : ''}\n      ${footer ? calendar.renderFooter() : ''}\n    </div>\n  `.trim();\n    return sheetHtml;\n  }\n\n  renderPopover() {\n    const calendar = this;\n    const {\n      cssClass,\n      toolbar,\n      header,\n      footer,\n      rangePicker,\n      weekHeader\n    } = calendar.params;\n    const {\n      value,\n      hasTimePicker\n    } = calendar;\n    const date = value && value.length ? value[0] : new Date().setHours(0, 0, 0);\n    const popoverHtml = `\n    <div class=\"popover calendar-popover\">\n      <div class=\"popover-inner\">\n        <div class=\"calendar ${rangePicker ? 'calendar-range' : ''} ${cssClass || ''}\">\n        ${header ? calendar.renderHeader() : ''}\n        ${toolbar ? calendar.renderToolbar() : ''}\n        ${weekHeader ? calendar.renderWeekHeader() : ''}\n        <div class=\"calendar-months\">\n          ${calendar.renderMonths(date)}\n        </div>\n        ${hasTimePicker ? calendar.renderTimeSelector() : ''}\n        ${footer ? calendar.renderFooter() : ''}\n        </div>\n      </div>\n    </div>\n  `.trim();\n    return popoverHtml;\n  }\n\n  render() {\n    const calendar = this;\n    const {\n      params\n    } = calendar;\n    if (params.render) return params.render.call(calendar);\n\n    if (!calendar.inline) {\n      let modalType = params.openIn;\n      if (modalType === 'auto') modalType = calendar.isPopover() ? 'popover' : 'sheet';\n      if (modalType === 'popover') return calendar.renderPopover();\n      if (modalType === 'sheet') return calendar.renderSheet();\n      return calendar.renderCustomModal();\n    }\n\n    return calendar.renderInline();\n  }\n\n  openTimePicker() {\n    const calendar = this;\n    const {\n      $el,\n      app\n    } = calendar;\n    if (!$el || !$el.length) return;\n    $el.append('<div class=\"calendar-time-picker\"></div>');\n    const hoursArr = [];\n    const minutesArr = [];\n\n    for (let i = 0; i <= 23; i += 1) {\n      hoursArr.push(i);\n    }\n\n    for (let i = 0; i <= 59; i += 1) {\n      minutesArr.push(i);\n    }\n\n    let value;\n\n    if (calendar.value && calendar.value.length) {\n      value = [calendar.value[0].getHours(), calendar.value[0].getMinutes()];\n    } else {\n      value = [new Date().getHours(), new Date().getMinutes()];\n    }\n\n    calendar.timePickerInstance = app.picker.create({\n      containerEl: $el.find('.calendar-time-picker'),\n      value,\n      toolbar: true,\n      rotateEffect: false,\n      toolbarCloseText: calendar.params.toolbarCloseText,\n      cols: [{\n        values: hoursArr\n      }, {\n        divider: true,\n        content: ':'\n      }, {\n        values: minutesArr,\n        displayValues: minutesArr.map(m => m < 10 ? `0${m}` : m)\n      }]\n    });\n    calendar.timePickerInstance.$el.find('.toolbar a').removeClass('sheet-close popover-close').addClass('calendar-time-picker-close');\n  }\n\n  closeTimePicker() {\n    const calendar = this;\n\n    if (calendar.timePickerInstance) {\n      const [hours, minutes] = calendar.timePickerInstance.value.map(v => parseInt(v, 10));\n      let value = calendar.value && calendar.value.length && calendar.value[0];\n\n      if (!value) {\n        value = new Date();\n        value.setHours(hours, minutes, 0, 0);\n      } else {\n        value = new Date(value);\n        value.setHours(hours, minutes);\n      }\n\n      calendar.setValue([value]);\n      calendar.timePickerInstance.close();\n      calendar.timePickerInstance.destroy();\n      delete calendar.timePickerInstance;\n    }\n\n    if (calendar.$el && calendar.$el.length) {\n      calendar.$el.find('.calendar-time-picker').remove();\n    }\n  }\n\n  onOpen() {\n    const calendar = this;\n    const {\n      initialized,\n      $el,\n      app,\n      $inputEl,\n      inline,\n      value,\n      params\n    } = calendar;\n    calendar.closing = false;\n    calendar.opened = true;\n    calendar.opening = true; // Init main events\n\n    calendar.attachCalendarEvents();\n    const updateValue = !value && params.value; // Set value\n\n    if (!initialized) {\n      if (value) calendar.setValue(value, 0);else if (params.value) {\n        calendar.setValue(calendar.normalizeValues(params.value), 0);\n      }\n    } else if (value) {\n      calendar.setValue(value, 0);\n    } // Update current month and year\n\n\n    calendar.updateCurrentMonthYear(); // Set initial translate\n\n    calendar.monthsTranslate = 0;\n    calendar.setMonthsTranslate(); // Update input value\n\n    if (updateValue) calendar.updateValue();else if (params.header && value) {\n      calendar.updateValue(true);\n    } // Extra focus\n\n    if (!inline && $inputEl && $inputEl.length && app.theme === 'md') {\n      $inputEl.trigger('focus');\n    }\n\n    calendar.initialized = true;\n    calendar.$months.each((index, monthEl) => {\n      calendar.emit('local::monthAdd calendarMonthAdd', monthEl);\n    }); // Trigger events\n\n    if ($el) {\n      $el.trigger('calendar:open');\n    }\n\n    if ($inputEl) {\n      $inputEl.trigger('calendar:open');\n    }\n\n    calendar.emit('local::open calendarOpen', calendar);\n  }\n\n  onOpened() {\n    const calendar = this;\n    calendar.opening = false;\n\n    if (calendar.$el) {\n      calendar.$el.trigger('calendar:opened');\n    }\n\n    if (calendar.$inputEl) {\n      calendar.$inputEl.trigger('calendar:opened');\n    }\n\n    calendar.emit('local::opened calendarOpened', calendar);\n  }\n\n  onClose() {\n    const calendar = this;\n    const app = calendar.app;\n    calendar.opening = false;\n    calendar.closing = true;\n\n    if (calendar.$inputEl && app.theme === 'md') {\n      calendar.$inputEl.trigger('blur');\n    }\n\n    if (calendar.detachCalendarEvents) {\n      calendar.detachCalendarEvents();\n    }\n\n    if (calendar.$el) {\n      calendar.$el.trigger('calendar:close');\n    }\n\n    if (calendar.$inputEl) {\n      calendar.$inputEl.trigger('calendar:close');\n    }\n\n    calendar.emit('local::close calendarClose', calendar);\n  }\n\n  onClosed() {\n    const calendar = this;\n    calendar.opened = false;\n    calendar.closing = false;\n\n    if (!calendar.inline) {\n      Utils.nextTick(() => {\n        if (calendar.modal && calendar.modal.el && calendar.modal.destroy) {\n          if (!calendar.params.routableModals) {\n            calendar.modal.destroy();\n          }\n        }\n\n        delete calendar.modal;\n      });\n    }\n\n    if (calendar.timePickerInstance) {\n      if (calendar.timePickerInstance.destroy) calendar.timePickerInstance.destroy();\n      delete calendar.timePickerInstance;\n    }\n\n    if (calendar.$el) {\n      calendar.$el.trigger('calendar:closed');\n    }\n\n    if (calendar.$inputEl) {\n      calendar.$inputEl.trigger('calendar:closed');\n    }\n\n    calendar.emit('local::closed calendarClosed', calendar);\n  }\n\n  open() {\n    const calendar = this;\n    const {\n      app,\n      opened,\n      inline,\n      $inputEl,\n      params\n    } = calendar;\n    if (opened) return;\n\n    if (inline) {\n      calendar.$el = $(calendar.render());\n      calendar.$el[0].f7Calendar = calendar;\n      calendar.$wrapperEl = calendar.$el.find('.calendar-months-wrapper');\n      calendar.$months = calendar.$wrapperEl.find('.calendar-month');\n      calendar.$containerEl.append(calendar.$el);\n      calendar.onOpen();\n      calendar.onOpened();\n      return;\n    }\n\n    let modalType = params.openIn;\n\n    if (modalType === 'auto') {\n      modalType = calendar.isPopover() ? 'popover' : 'sheet';\n    }\n\n    const modalContent = calendar.render();\n    const modalParams = {\n      targetEl: $inputEl,\n      scrollToEl: params.scrollToInput ? $inputEl : undefined,\n      content: modalContent,\n      backdrop: params.backdrop === true || modalType === 'popover' && app.params.popover.backdrop !== false && params.backdrop !== false,\n      closeByBackdropClick: params.closeByBackdropClick,\n      on: {\n        open() {\n          const modal = this;\n          calendar.modal = modal;\n          calendar.$el = modalType === 'popover' ? modal.$el.find('.calendar') : modal.$el;\n          calendar.$wrapperEl = calendar.$el.find('.calendar-months-wrapper');\n          calendar.$months = calendar.$wrapperEl.find('.calendar-month');\n          calendar.$el[0].f7Calendar = calendar;\n\n          if (modalType === 'customModal') {\n            $(calendar.$el).find('.calendar-close').once('click', () => {\n              calendar.close();\n            });\n          }\n\n          calendar.onOpen();\n        },\n\n        opened() {\n          calendar.onOpened();\n        },\n\n        close() {\n          calendar.onClose();\n        },\n\n        closed() {\n          calendar.onClosed();\n        }\n\n      }\n    };\n\n    if (modalType === 'sheet') {\n      modalParams.push = params.sheetPush;\n      modalParams.swipeToClose = params.sheetSwipeToClose;\n    }\n\n    if (params.routableModals) {\n      calendar.view.router.navigate({\n        url: calendar.url,\n        route: {\n          path: calendar.url,\n          [modalType]: modalParams\n        }\n      });\n    } else {\n      calendar.modal = app[modalType].create(modalParams);\n      calendar.modal.open();\n    }\n  }\n\n  close() {\n    const calendar = this;\n    const {\n      opened,\n      inline\n    } = calendar;\n    if (!opened) return;\n\n    if (inline) {\n      calendar.onClose();\n      calendar.onClosed();\n      return;\n    }\n\n    if (calendar.params.routableModals) {\n      calendar.view.router.back();\n    } else {\n      calendar.modal.close();\n    }\n  }\n\n  init() {\n    const calendar = this;\n    calendar.initInput();\n\n    if (calendar.inline) {\n      calendar.open();\n      calendar.emit('local::init calendarInit', calendar);\n      return;\n    }\n\n    if (!calendar.initialized && calendar.params.value) {\n      calendar.setValue(calendar.normalizeValues(calendar.params.value));\n    } // Attach input Events\n\n\n    if (calendar.$inputEl) {\n      calendar.attachInputEvents();\n    }\n\n    if (calendar.params.closeByOutsideClick) {\n      calendar.attachHtmlEvents();\n    }\n\n    calendar.emit('local::init calendarInit', calendar);\n  }\n\n  destroy() {\n    const calendar = this;\n    if (calendar.destroyed) return;\n    const {\n      $el\n    } = calendar;\n    calendar.emit('local::beforeDestroy calendarBeforeDestroy', calendar);\n    if ($el) $el.trigger('calendar:beforedestroy');\n    calendar.close(); // Detach Events\n\n    if (calendar.$inputEl) {\n      calendar.detachInputEvents();\n    }\n\n    if (calendar.params.closeByOutsideClick) {\n      calendar.detachHtmlEvents();\n    }\n\n    if (calendar.timePickerInstance) {\n      if (calendar.timePickerInstance.destroy) calendar.timePickerInstance.destroy();\n      delete calendar.timePickerInstance;\n    }\n\n    if ($el && $el.length) delete calendar.$el[0].f7Calendar;\n    Utils.deleteProps(calendar);\n    calendar.destroyed = true;\n  }\n\n}\n\nexport default Calendar;","map":null,"metadata":{},"sourceType":"module"}