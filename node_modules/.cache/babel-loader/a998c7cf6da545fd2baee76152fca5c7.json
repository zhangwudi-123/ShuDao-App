{"ast":null,"code":"import React, { forwardRef, useImperativeHandle, useRef, useState } from 'react';\nimport { withNativeProps } from '../../utils/native-props';\nimport { useDrag } from '@use-gesture/react';\nimport { useSpring, animated } from '@react-spring/web';\nimport { supportsPassive } from '../../utils/supports-passive';\nimport { nearest } from '../../utils/nearest';\nimport { mergeProps } from '../../utils/with-default-props';\nimport { useLockScroll } from '../../utils/use-lock-scroll';\nimport { useMemoizedFn } from 'ahooks';\nconst defaultProps = {\n  handleDraggingOfContent: true\n};\nexport const FloatingPanel = forwardRef((p, ref) => {\n  var _a, _b;\n\n  const props = mergeProps(defaultProps, p);\n  const {\n    anchors\n  } = props;\n  const maxHeight = (_a = anchors[anchors.length - 1]) !== null && _a !== void 0 ? _a : window.innerHeight;\n  const possibles = anchors.map(x => -x);\n  const elementRef = useRef(null);\n  const headerRef = useRef(null);\n  const contentRef = useRef(null);\n  const [pulling, setPulling] = useState(false);\n  const pullingRef = useRef(false);\n  const bounds = {\n    top: possibles[possibles.length - 1],\n    bottom: possibles[0]\n  };\n  const onHeightChange = useMemoizedFn((_b = props.onHeightChange) !== null && _b !== void 0 ? _b : () => {});\n  const [{\n    y\n  }, api] = useSpring(() => ({\n    y: bounds.bottom,\n    config: {\n      tension: 300\n    },\n    onChange: result => {\n      onHeightChange(-result.value.y, y.isAnimating);\n    }\n  }));\n  useDrag(state => {\n    const [, offsetY] = state.offset;\n\n    if (state.first) {\n      const target = state.event.target;\n      const header = headerRef.current;\n\n      if (header === target || (header === null || header === void 0 ? void 0 : header.contains(target))) {\n        pullingRef.current = true;\n      } else {\n        if (!props.handleDraggingOfContent) return;\n        const reachedTop = y.goal <= bounds.top;\n        const content = contentRef.current;\n        if (!content) return;\n\n        if (reachedTop) {\n          if (content.scrollTop <= 0 && state.direction[1] > 0) {\n            pullingRef.current = true;\n          }\n        } else {\n          pullingRef.current = true;\n        }\n      }\n    }\n\n    setPulling(pullingRef.current);\n    if (!pullingRef.current) return;\n    const {\n      event\n    } = state;\n\n    if (event.cancelable) {\n      event.preventDefault();\n    }\n\n    event.stopPropagation();\n    let nextY = offsetY;\n\n    if (state.last) {\n      pullingRef.current = false;\n      setPulling(false);\n      nextY = nearest(possibles, offsetY);\n    }\n\n    api.start({\n      y: nextY\n    });\n  }, {\n    axis: 'y',\n    bounds,\n    rubberband: true,\n    from: () => [0, y.get()],\n    pointer: {\n      touch: true\n    },\n    target: elementRef,\n    eventOptions: supportsPassive ? {\n      passive: false\n    } : false\n  });\n  useImperativeHandle(ref, () => ({\n    setHeight: (height, options) => {\n      api.start({\n        y: -height,\n        immediate: options === null || options === void 0 ? void 0 : options.immediate\n      });\n    }\n  }), [api]);\n  useLockScroll(elementRef, true);\n  return withNativeProps(props, React.createElement(animated.div, {\n    ref: elementRef,\n    className: 'adm-floating-panel',\n    style: {\n      height: Math.round(maxHeight),\n      translateY: y.to(y => `calc(100% + (${Math.round(y)}px))`)\n    }\n  }, React.createElement(\"div\", {\n    className: 'adm-floating-panel-mask',\n    style: {\n      display: pulling ? 'block' : 'none'\n    }\n  }), React.createElement(\"div\", {\n    className: 'adm-floating-panel-header',\n    ref: headerRef\n  }, React.createElement(\"div\", {\n    className: 'adm-floating-panel-bar'\n  })), React.createElement(\"div\", {\n    className: 'adm-floating-panel-content',\n    ref: contentRef\n  }, props.children)));\n});","map":null,"metadata":{},"sourceType":"module"}