{"ast":null,"code":"import { __values } from \"tslib\";\nimport { useRef, useEffect } from 'react';\n\nvar EventEmitter =\n/** @class */\nfunction () {\n  function EventEmitter() {\n    var _this = this;\n\n    this.subscriptions = new Set();\n\n    this.emit = function (val) {\n      var e_1, _a;\n\n      try {\n        for (var _b = __values(_this.subscriptions), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var subscription = _c.value;\n          subscription(val);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    };\n\n    this.useSubscription = function (callback) {\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      var callbackRef = useRef();\n      callbackRef.current = callback; // eslint-disable-next-line react-hooks/rules-of-hooks\n\n      useEffect(function () {\n        function subscription(val) {\n          if (callbackRef.current) {\n            callbackRef.current(val);\n          }\n        }\n\n        _this.subscriptions.add(subscription);\n\n        return function () {\n          _this.subscriptions.delete(subscription);\n        };\n      }, []);\n    };\n  }\n\n  return EventEmitter;\n}();\n\nexport { EventEmitter };\nexport default function useEventEmitter() {\n  var ref = useRef();\n\n  if (!ref.current) {\n    ref.current = new EventEmitter();\n  }\n\n  return ref.current;\n}","map":null,"metadata":{},"sourceType":"module"}