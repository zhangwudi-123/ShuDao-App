{"ast":null,"code":"import React, { useState, useRef, forwardRef, useImperativeHandle } from 'react';\nimport classNames from 'classnames';\nimport Input from '../input';\nimport Button from '../button';\nimport { withNativeProps } from '../../utils/native-props';\nimport { mergeProps } from '../../utils/with-default-props';\nimport { SearchOutline } from 'antd-mobile-icons';\nimport { usePropsValue } from '../../utils/use-props-value';\nimport { useConfig } from '../config-provider';\nconst classPrefix = `adm-search-bar`;\nconst defaultProps = {\n  clearable: true,\n  onlyShowClearWhenFocus: false,\n  showCancelButton: false,\n  defaultValue: '',\n  clearOnCancel: true,\n  icon: React.createElement(SearchOutline, null)\n};\nexport const SearchBar = forwardRef((p, ref) => {\n  const {\n    locale\n  } = useConfig();\n  const props = mergeProps(defaultProps, {\n    cancelText: locale.common.cancel\n  }, p);\n  const [value, setValue] = usePropsValue(props);\n  const [hasFocus, setHasFocus] = useState(false);\n  const inputRef = useRef(null);\n  const composingRef = useRef(false);\n  useImperativeHandle(ref, () => ({\n    clear: () => {\n      var _a;\n\n      return (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.clear();\n    },\n    focus: () => {\n      var _a;\n\n      return (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n    },\n    blur: () => {\n      var _a;\n\n      return (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.blur();\n    },\n\n    get nativeElement() {\n      var _a, _b;\n\n      return (_b = (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.nativeElement) !== null && _b !== void 0 ? _b : null;\n    }\n\n  }));\n\n  const renderCancelButton = () => {\n    let isShowCancel;\n\n    if (typeof props.showCancelButton === 'function') {\n      isShowCancel = props.showCancelButton(hasFocus, value);\n    } else {\n      isShowCancel = props.showCancelButton && hasFocus;\n    }\n\n    return isShowCancel && React.createElement(\"div\", {\n      className: `${classPrefix}-suffix`\n    }, React.createElement(Button, {\n      fill: 'none',\n      className: `${classPrefix}-cancel-button`,\n      onClick: () => {\n        var _a, _b, _c;\n\n        if (props.clearOnCancel) {\n          (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.clear();\n        }\n\n        (_b = inputRef.current) === null || _b === void 0 ? void 0 : _b.blur();\n        (_c = props.onCancel) === null || _c === void 0 ? void 0 : _c.call(props);\n      },\n      onMouseDown: e => {\n        e.preventDefault();\n      }\n    }, props.cancelText));\n  };\n\n  return withNativeProps(props, React.createElement(\"div\", {\n    className: classNames(classPrefix, {\n      [`${classPrefix}-active`]: hasFocus\n    })\n  }, React.createElement(\"div\", {\n    className: `${classPrefix}-input-box`\n  }, props.icon && React.createElement(\"div\", {\n    className: `${classPrefix}-input-box-icon`\n  }, props.icon), React.createElement(Input, {\n    ref: inputRef,\n    className: classNames(`${classPrefix}-input`, {\n      [`${classPrefix}-input-without-icon`]: !props.icon\n    }),\n    value: value,\n    onChange: setValue,\n    maxLength: props.maxLength,\n    placeholder: props.placeholder,\n    clearable: props.clearable,\n    onlyShowClearWhenFocus: props.onlyShowClearWhenFocus,\n    onFocus: e => {\n      var _a;\n\n      setHasFocus(true);\n      (_a = props.onFocus) === null || _a === void 0 ? void 0 : _a.call(props, e);\n    },\n    onBlur: e => {\n      var _a;\n\n      setHasFocus(false);\n      (_a = props.onBlur) === null || _a === void 0 ? void 0 : _a.call(props, e);\n    },\n    onClear: props.onClear,\n    type: 'search',\n    enterKeyHint: 'search',\n    onEnterPress: () => {\n      var _a, _b;\n\n      if (!composingRef.current) {\n        (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.blur();\n        (_b = props.onSearch) === null || _b === void 0 ? void 0 : _b.call(props, value);\n      }\n    },\n    \"aria-label\": locale.SearchBar.name,\n    onCompositionStart: e => {\n      var _a;\n\n      composingRef.current = true;\n      (_a = props.onCompositionStart) === null || _a === void 0 ? void 0 : _a.call(props, e);\n    },\n    onCompositionEnd: e => {\n      var _a;\n\n      composingRef.current = false;\n      (_a = props.onCompositionEnd) === null || _a === void 0 ? void 0 : _a.call(props, e);\n    }\n  })), renderCancelButton()));\n});","map":null,"metadata":{},"sourceType":"module"}