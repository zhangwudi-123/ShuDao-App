{"ast":null,"code":"/* eslint no-nested-ternary: off */\nimport $ from 'dom7';\nimport Utils from '../../utils/utils';\nimport Framework7Class from '../../utils/class';\n\nclass Gauge extends Framework7Class {\n  constructor(app) {\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    // Extends with open/close Modal methods;\n    super(params, [app]);\n    const gauge = this;\n    const defaults = Utils.extend({}, app.params.gauge); // Extend defaults with modules params\n\n    gauge.useModulesParams(defaults);\n    gauge.params = Utils.extend(defaults, params);\n    const {\n      el\n    } = gauge.params;\n    if (!el) return gauge;\n    const $el = $(el);\n    if ($el.length === 0) return gauge;\n    if ($el[0].f7Gauge) return $el[0].f7Gauge;\n    Utils.extend(gauge, {\n      app,\n      $el,\n      el: $el && $el[0]\n    });\n    $el[0].f7Gauge = gauge; // Install Modules\n\n    gauge.useModules();\n    gauge.init();\n    return gauge;\n  }\n\n  calcRadius() {\n    const gauge = this;\n    const {\n      size,\n      borderWidth\n    } = gauge.params;\n    return size / 2 - borderWidth / 2;\n  }\n\n  calcBorderLength() {\n    const gauge = this;\n    const radius = gauge.calcRadius();\n    return 2 * Math.PI * radius;\n  }\n\n  render() {\n    const gauge = this;\n    if (gauge.params.render) return gauge.params.render.call(gauge, gauge);\n    const {\n      type,\n      value,\n      size,\n      bgColor,\n      borderBgColor,\n      borderColor,\n      borderWidth,\n      valueText,\n      valueTextColor,\n      valueFontSize,\n      valueFontWeight,\n      labelText,\n      labelTextColor,\n      labelFontSize,\n      labelFontWeight\n    } = gauge.params;\n    const semiCircle = type === 'semicircle';\n    const radius = gauge.calcRadius();\n    const length = gauge.calcBorderLength();\n    const progress = Math.max(Math.min(value, 1), 0);\n    return `\n      <svg class=\"gauge-svg\" width=\"${size}px\" height=\"${semiCircle ? size / 2 : size}px\" viewBox=\"0 0 ${size} ${semiCircle ? size / 2 : size}\">\n        ${semiCircle ? `\n          <path\n            class=\"gauge-back-semi\"\n            d=\"M${size - borderWidth / 2},${size / 2} a1,1 0 0,0 -${size - borderWidth},0\"\n            stroke=\"${borderBgColor}\"\n            stroke-width=\"${borderWidth}\"\n            fill=\"${bgColor || 'none'}\"\n          />\n          <path\n            class=\"gauge-front-semi\"\n            d=\"M${size - borderWidth / 2},${size / 2} a1,1 0 0,0 -${size - borderWidth},0\"\n            stroke=\"${borderColor}\"\n            stroke-width=\"${borderWidth}\"\n            stroke-dasharray=\"${length / 2}\"\n            stroke-dashoffset=\"${length / 2 * (1 + progress)}\"\n            fill=\"${borderBgColor ? 'none' : bgColor || 'none'}\"\n          />\n        ` : `\n          ${borderBgColor ? `\n            <circle\n              class=\"gauge-back-circle\"\n              stroke=\"${borderBgColor}\"\n              stroke-width=\"${borderWidth}\"\n              fill=\"${bgColor || 'none'}\"\n              cx=\"${size / 2}\"\n              cy=\"${size / 2}\"\n              r=\"${radius}\"\n            ></circle>\n          ` : ''}\n          <circle\n            class=\"gauge-front-circle\"\n            transform=\"${`rotate(-90 ${size / 2} ${size / 2})`}\"\n            stroke=\"${borderColor}\"\n            stroke-width=\"${borderWidth}\"\n            stroke-dasharray=\"${length}\"\n            stroke-dashoffset=\"${length * (1 - progress)}\"\n            fill=\"${borderBgColor ? 'none' : bgColor || 'none'}\"\n            cx=\"${size / 2}\"\n            cy=\"${size / 2}\"\n            r=\"${radius}\"\n          ></circle>\n        `}\n        ${valueText ? `\n          <text\n            class=\"gauge-value-text\"\n            x=\"50%\"\n            y=\"${semiCircle ? '100%' : '50%'}\"\n            font-weight=\"${valueFontWeight}\"\n            font-size=\"${valueFontSize}\"\n            fill=\"${valueTextColor}\"\n            dy=\"${semiCircle ? labelText ? -labelFontSize - 15 : -5 : 0}\"\n            text-anchor=\"middle\"\n            dominant-baseline=\"${!semiCircle && 'middle'}\"\n          >${valueText}</text>\n        ` : ''}\n        ${labelText ? `\n          <text\n            class=\"gauge-label-text\"\n            x=\"50%\"\n            y=\"${semiCircle ? '100%' : '50%'}\"\n            font-weight=\"${labelFontWeight}\"\n            font-size=\"${labelFontSize}\"\n            fill=\"${labelTextColor}\"\n            dy=\"${semiCircle ? -5 : valueText ? valueFontSize / 2 + 10 : 0}\"\n            text-anchor=\"middle\"\n            dominant-baseline=\"${!semiCircle && 'middle'}\"\n          >${labelText}</text>\n        ` : ''}\n      </svg>\n    `.trim();\n  }\n\n  update() {\n    let newParams = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const gauge = this;\n    const {\n      params,\n      $gaugeSvgEl\n    } = gauge;\n    Object.keys(newParams).forEach(param => {\n      if (typeof newParams[param] !== 'undefined') {\n        params[param] = newParams[param];\n      }\n    });\n    if ($gaugeSvgEl.length === 0) return gauge;\n    const {\n      value,\n      size,\n      bgColor,\n      borderBgColor,\n      borderColor,\n      borderWidth,\n      valueText,\n      valueTextColor,\n      valueFontSize,\n      valueFontWeight,\n      labelText,\n      labelTextColor,\n      labelFontSize,\n      labelFontWeight\n    } = params;\n    const length = gauge.calcBorderLength();\n    const progress = Math.max(Math.min(value, 1), 0);\n    const radius = gauge.calcRadius();\n    const semiCircle = params.type === 'semicircle';\n    const svgAttrs = {\n      width: `${size}px`,\n      height: `${semiCircle ? size / 2 : size}px`,\n      viewBox: `0 0 ${size} ${semiCircle ? size / 2 : size}`\n    };\n    Object.keys(svgAttrs).forEach(attr => {\n      $gaugeSvgEl.attr(attr, svgAttrs[attr]);\n    });\n\n    if (semiCircle) {\n      const backAttrs = {\n        d: `M${size - borderWidth / 2},${size / 2} a1,1 0 0,0 -${size - borderWidth},0`,\n        stroke: borderBgColor,\n        'stroke-width': borderWidth,\n        fill: bgColor || 'none'\n      };\n      const frontAttrs = {\n        d: `M${size - borderWidth / 2},${size / 2} a1,1 0 0,0 -${size - borderWidth},0`,\n        stroke: borderColor,\n        'stroke-width': borderWidth,\n        'stroke-dasharray': length / 2,\n        'stroke-dashoffset': length / 2 * (progress - 1),\n        fill: borderBgColor ? 'none' : bgColor || 'none'\n      };\n      Object.keys(backAttrs).forEach(attr => {\n        $gaugeSvgEl.find('.gauge-back-semi').attr(attr, backAttrs[attr]);\n      });\n      Object.keys(frontAttrs).forEach(attr => {\n        $gaugeSvgEl.find('.gauge-front-semi').attr(attr, frontAttrs[attr]);\n      });\n    } else {\n      const backAttrs = {\n        stroke: borderBgColor,\n        'stroke-width': borderWidth,\n        fill: bgColor || 'none',\n        cx: size / 2,\n        cy: size / 2,\n        r: radius\n      };\n      const frontAttrs = {\n        transform: `rotate(-90 ${size / 2} ${size / 2})`,\n        stroke: borderColor,\n        'stroke-width': borderWidth,\n        'stroke-dasharray': length,\n        'stroke-dashoffset': length * (1 - progress),\n        fill: borderBgColor ? 'none' : bgColor || 'none',\n        cx: size / 2,\n        cy: size / 2,\n        r: radius\n      };\n      Object.keys(backAttrs).forEach(attr => {\n        $gaugeSvgEl.find('.gauge-back-circle').attr(attr, backAttrs[attr]);\n      });\n      Object.keys(frontAttrs).forEach(attr => {\n        $gaugeSvgEl.find('.gauge-front-circle').attr(attr, frontAttrs[attr]);\n      });\n    }\n\n    if (valueText) {\n      if (!$gaugeSvgEl.find('.gauge-value-text').length) {\n        $gaugeSvgEl.append('<text class=\"gauge-value-text\"></text>');\n      }\n\n      const textAttrs = {\n        x: '50%',\n        y: semiCircle ? '100%' : '50%',\n        'font-weight': valueFontWeight,\n        'font-size': valueFontSize,\n        fill: valueTextColor,\n        dy: semiCircle ? labelText ? -labelFontSize - 15 : -5 : 0,\n        'text-anchor': 'middle',\n        'dominant-baseline': !semiCircle && 'middle'\n      };\n      Object.keys(textAttrs).forEach(attr => {\n        $gaugeSvgEl.find('.gauge-value-text').attr(attr, textAttrs[attr]);\n      });\n      $gaugeSvgEl.find('.gauge-value-text').text(valueText);\n    } else {\n      $gaugeSvgEl.find('.gauge-value-text').remove();\n    }\n\n    if (labelText) {\n      if (!$gaugeSvgEl.find('.gauge-label-text').length) {\n        $gaugeSvgEl.append('<text class=\"gauge-label-text\"></text>');\n      }\n\n      const labelAttrs = {\n        x: '50%',\n        y: semiCircle ? '100%' : '50%',\n        'font-weight': labelFontWeight,\n        'font-size': labelFontSize,\n        fill: labelTextColor,\n        dy: semiCircle ? -5 : valueText ? valueFontSize / 2 + 10 : 0,\n        'text-anchor': 'middle',\n        'dominant-baseline': !semiCircle && 'middle'\n      };\n      Object.keys(labelAttrs).forEach(attr => {\n        $gaugeSvgEl.find('.gauge-label-text').attr(attr, labelAttrs[attr]);\n      });\n      $gaugeSvgEl.find('.gauge-label-text').text(labelText);\n    } else {\n      $gaugeSvgEl.find('.gauge-label-text').remove();\n    }\n\n    return gauge;\n  }\n\n  init() {\n    const gauge = this;\n    const $gaugeSvgEl = $(gauge.render()).eq(0);\n    $gaugeSvgEl.f7Gauge = gauge;\n    Utils.extend(gauge, {\n      $gaugeSvgEl,\n      gaugeSvgEl: $gaugeSvgEl && $gaugeSvgEl[0]\n    });\n    gauge.$el.append($gaugeSvgEl);\n    return gauge;\n  }\n\n  destroy() {\n    const gauge = this;\n    if (!gauge.$el || gauge.destroyed) return;\n    gauge.$el.trigger('gauge:beforedestroy');\n    gauge.emit('local::beforeDestroy gaugeBeforeDestroy', gauge);\n    gauge.$gaugeSvgEl.remove();\n    delete gauge.$el[0].f7Gauge;\n    Utils.deleteProps(gauge);\n    gauge.destroyed = true;\n  }\n\n}\n\nexport default Gauge;","map":null,"metadata":{},"sourceType":"module"}