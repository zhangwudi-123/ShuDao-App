{"ast":null,"code":"import $ from 'dom7';\nimport Utils from '../../utils/utils';\nimport Router from '../../modules/router/router';\nimport Framework7Class from '../../utils/class';\n\nclass View extends Framework7Class {\n  constructor(appInstance, el) {\n    let viewParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    super(viewParams, [appInstance]);\n    const app = appInstance;\n    const $el = $(el);\n    const view = this;\n    const defaults = {\n      routes: [],\n      routesAdd: []\n    }; // Default View params\n\n    view.params = Utils.extend(defaults, app.params.view, viewParams); // Routes\n\n    if (view.params.routes.length > 0) {\n      view.routes = view.params.routes;\n    } else {\n      view.routes = [].concat(app.routes, view.params.routesAdd);\n    } // Selector\n\n\n    let selector;\n    if (typeof el === 'string') selector = el;else {\n      // Supposed to be HTMLElement or Dom7\n      selector = ($el.attr('id') ? `#${$el.attr('id')}` : '') + ($el.attr('class') ? `.${$el.attr('class').replace(/ /g, '.').replace('.active', '')}` : '');\n    } // DynamicNavbar\n\n    let $navbarsEl;\n\n    if (app.theme === 'ios' && view.params.iosDynamicNavbar) {\n      $navbarsEl = $el.children('.navbars').eq(0);\n\n      if ($navbarsEl.length === 0) {\n        $navbarsEl = $('<div class=\"navbars\"></div>');\n      }\n    } // View Props\n\n\n    Utils.extend(false, view, {\n      app,\n      $el,\n      el: $el[0],\n      name: view.params.name,\n      main: view.params.main || $el.hasClass('view-main'),\n      $navbarsEl,\n      navbarsEl: $navbarsEl ? $navbarsEl[0] : undefined,\n      selector,\n      history: [],\n      scrollHistory: {}\n    }); // Save in DOM\n\n    $el[0].f7View = view; // Install Modules\n\n    view.useModules(); // Add to app\n\n    app.views.push(view);\n\n    if (view.main) {\n      app.views.main = view;\n    }\n\n    if (view.name) {\n      app.views[view.name] = view;\n    } // Index\n\n\n    view.index = app.views.indexOf(view); // View ID\n\n    let viewId;\n\n    if (view.name) {\n      viewId = `view_${view.name}`;\n    } else if (view.main) {\n      viewId = 'view_main';\n    } else {\n      viewId = `view_${view.index}`;\n    }\n\n    view.id = viewId; // Init View\n\n    if (app.initialized) {\n      view.init();\n    } else {\n      app.on('init', () => {\n        view.init();\n      });\n    }\n\n    return view;\n  }\n\n  destroy() {\n    let view = this;\n    const app = view.app;\n    view.$el.trigger('view:beforedestroy');\n    view.emit('local::beforeDestroy viewBeforeDestroy', view);\n    app.off('resize', view.checkMasterDetailBreakpoint);\n\n    if (view.main) {\n      app.views.main = null;\n      delete app.views.main;\n    } else if (view.name) {\n      app.views[view.name] = null;\n      delete app.views[view.name];\n    }\n\n    view.$el[0].f7View = null;\n    delete view.$el[0].f7View;\n    app.views.splice(app.views.indexOf(view), 1); // Destroy Router\n\n    if (view.params.router && view.router) {\n      view.router.destroy();\n    }\n\n    view.emit('local::destroy viewDestroy', view); // Delete props & methods\n\n    Object.keys(view).forEach(viewProp => {\n      view[viewProp] = null;\n      delete view[viewProp];\n    });\n    view = null;\n  }\n\n  checkMasterDetailBreakpoint(force) {\n    const view = this;\n    const app = view.app;\n    const wasMasterDetail = view.$el.hasClass('view-master-detail');\n    const isMasterDetail = app.width >= view.params.masterDetailBreakpoint && view.$el.children('.page-master').length;\n\n    if (typeof force === 'undefined' && isMasterDetail || force === true) {\n      view.$el.addClass('view-master-detail');\n\n      if (!wasMasterDetail) {\n        view.emit('local::masterDetailBreakpoint viewMasterDetailBreakpoint', view);\n        view.$el.trigger('view:masterDetailBreakpoint');\n      }\n    } else {\n      view.$el.removeClass('view-master-detail');\n\n      if (wasMasterDetail) {\n        view.emit('local::masterDetailBreakpoint viewMasterDetailBreakpoint', view);\n        view.$el.trigger('view:masterDetailBreakpoint');\n      }\n    }\n  }\n\n  initMasterDetail() {\n    const view = this;\n    const app = view.app;\n    view.checkMasterDetailBreakpoint = view.checkMasterDetailBreakpoint.bind(view);\n    view.checkMasterDetailBreakpoint();\n    app.on('resize', view.checkMasterDetailBreakpoint);\n  }\n\n  init() {\n    const view = this;\n\n    if (view.params.router) {\n      if (view.params.masterDetailBreakpoint > 0) {\n        view.initMasterDetail();\n      }\n\n      view.router.init();\n      view.$el.trigger('view:init');\n      view.emit('local::init viewInit', view);\n    }\n  }\n\n} // Use Router\n\n\nView.use(Router);\nexport default View;","map":null,"metadata":{},"sourceType":"module"}