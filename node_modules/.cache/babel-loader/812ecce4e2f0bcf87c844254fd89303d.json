{"ast":null,"code":"import $ from 'dom7';\nimport Utils from '../../utils/utils';\nimport Framework7Class from '../../utils/class';\nimport Support from '../../utils/support';\n\nclass Range extends Framework7Class {\n  constructor(app, params) {\n    super(params, [app]);\n    const range = this;\n    const defaults = {\n      el: null,\n      inputEl: null,\n      dual: false,\n      step: 1,\n      label: false,\n      min: 0,\n      max: 100,\n      value: 0,\n      draggableBar: true,\n      vertical: false,\n      verticalReversed: false,\n      formatLabel: null,\n      scale: false,\n      scaleSteps: 5,\n      scaleSubSteps: 0,\n      formatScaleLabel: null,\n      limitKnobPosition: app.theme === 'ios'\n    }; // Extend defaults with modules params\n\n    range.useModulesParams(defaults);\n    range.params = Utils.extend(defaults, params);\n    const el = range.params.el;\n    if (!el) return range;\n    const $el = $(el);\n    if ($el.length === 0) return range;\n    if ($el[0].f7Range) return $el[0].f7Range;\n    const dataset = $el.dataset();\n    'step min max value scaleSteps scaleSubSteps'.split(' ').forEach(paramName => {\n      if (typeof params[paramName] === 'undefined' && typeof dataset[paramName] !== 'undefined') {\n        range.params[paramName] = parseFloat(dataset[paramName]);\n      }\n    });\n    'dual label vertical verticalReversed scale'.split(' ').forEach(paramName => {\n      if (typeof params[paramName] === 'undefined' && typeof dataset[paramName] !== 'undefined') {\n        range.params[paramName] = dataset[paramName];\n      }\n    });\n\n    if (!range.params.value) {\n      if (typeof dataset.value !== 'undefined') range.params.value = dataset.value;\n\n      if (typeof dataset.valueLeft !== 'undefined' && typeof dataset.valueRight !== 'undefined') {\n        range.params.value = [parseFloat(dataset.valueLeft), parseFloat(dataset.valueRight)];\n      }\n    }\n\n    let $inputEl;\n\n    if (!range.params.dual) {\n      if (range.params.inputEl) {\n        $inputEl = $(range.params.inputEl);\n      } else if ($el.find('input[type=\"range\"]').length) {\n        $inputEl = $el.find('input[type=\"range\"]').eq(0);\n      }\n    }\n\n    const {\n      dual,\n      step,\n      label,\n      min,\n      max,\n      value,\n      vertical,\n      verticalReversed,\n      scale,\n      scaleSteps,\n      scaleSubSteps,\n      limitKnobPosition\n    } = range.params;\n    Utils.extend(range, {\n      app,\n      $el,\n      el: $el[0],\n      $inputEl,\n      inputEl: $inputEl ? $inputEl[0] : undefined,\n      dual,\n      step,\n      label,\n      min,\n      max,\n      value,\n      previousValue: value,\n      vertical,\n      verticalReversed,\n      scale,\n      scaleSteps,\n      scaleSubSteps,\n      limitKnobPosition\n    });\n\n    if ($inputEl) {\n      'step min max'.split(' ').forEach(paramName => {\n        if (!params[paramName] && $inputEl.attr(paramName)) {\n          range.params[paramName] = parseFloat($inputEl.attr(paramName));\n          range[paramName] = parseFloat($inputEl.attr(paramName));\n        }\n      });\n\n      if (typeof $inputEl.val() !== 'undefined') {\n        range.params.value = parseFloat($inputEl.val());\n        range.value = parseFloat($inputEl.val());\n      }\n    } // Dual\n\n\n    if (range.dual) {\n      $el.addClass('range-slider-dual');\n    }\n\n    if (range.label) {\n      $el.addClass('range-slider-label');\n    } // Vertical\n\n\n    if (range.vertical) {\n      $el.addClass('range-slider-vertical');\n\n      if (range.verticalReversed) {\n        $el.addClass('range-slider-vertical-reversed');\n      }\n    } else {\n      $el.addClass('range-slider-horizontal');\n    } // Check for layout\n\n\n    const $barEl = $('<div class=\"range-bar\"></div>');\n    const $barActiveEl = $('<div class=\"range-bar-active\"></div>');\n    $barEl.append($barActiveEl); // Create Knobs\n\n    const knobHTML = `\n      <div class=\"range-knob-wrap\">\n        <div class=\"range-knob\"></div>\n        ${range.label ? '<div class=\"range-knob-label\"></div>' : ''}\n      </div>\n    `;\n    const knobs = [$(knobHTML)];\n\n    if (range.dual) {\n      knobs.push($(knobHTML));\n    }\n\n    $el.append($barEl);\n    knobs.forEach($knobEl => {\n      $el.append($knobEl);\n    }); // Labels\n\n    const labels = [];\n\n    if (range.label) {\n      labels.push(knobs[0].find('.range-knob-label'));\n\n      if (range.dual) {\n        labels.push(knobs[1].find('.range-knob-label'));\n      }\n    } // Scale\n\n\n    let $scaleEl;\n\n    if (range.scale && range.scaleSteps > 1) {\n      $scaleEl = $(`\n        <div class=\"range-scale\">\n          ${range.renderScale()}\n        </div>\n      `);\n      $el.append($scaleEl);\n    }\n\n    Utils.extend(range, {\n      knobs,\n      labels,\n      $barEl,\n      $barActiveEl,\n      $scaleEl\n    });\n    $el[0].f7Range = range; // Touch Events\n\n    let isTouched;\n    const touchesStart = {};\n    let isScrolling;\n    let rangeOffset;\n    let rangeOffsetLeft;\n    let rangeOffsetTop;\n    let $touchedKnobEl;\n    let dualValueIndex;\n    let valueChangedByTouch;\n    let targetTouchIdentifier;\n\n    function onTouchChange() {\n      valueChangedByTouch = true;\n    }\n\n    function handleTouchStart(e) {\n      if (isTouched) return;\n\n      if (!range.params.draggableBar) {\n        if ($(e.target).closest('.range-knob').length === 0) {\n          return;\n        }\n      }\n\n      valueChangedByTouch = false;\n      touchesStart.x = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;\n      touchesStart.y = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;\n\n      if (e.type === 'touchstart') {\n        targetTouchIdentifier = e.targetTouches[0].identifier;\n      }\n\n      isTouched = true;\n      isScrolling = undefined;\n      rangeOffset = $el.offset();\n      rangeOffsetLeft = rangeOffset.left;\n      rangeOffsetTop = rangeOffset.top;\n      let progress;\n\n      if (range.vertical) {\n        progress = (touchesStart.y - rangeOffsetTop) / range.rangeHeight;\n        if (!range.verticalReversed) progress = 1 - progress;\n      } else if (range.app.rtl) {\n        progress = (rangeOffsetLeft + range.rangeWidth - touchesStart.x) / range.rangeWidth;\n      } else {\n        progress = (touchesStart.x - rangeOffsetLeft) / range.rangeWidth;\n      }\n\n      let newValue = progress * (range.max - range.min) + range.min;\n\n      if (range.dual) {\n        if (Math.abs(range.value[0] - newValue) < Math.abs(range.value[1] - newValue)) {\n          dualValueIndex = 0;\n          $touchedKnobEl = range.knobs[0];\n          newValue = [newValue, range.value[1]];\n        } else {\n          dualValueIndex = 1;\n          $touchedKnobEl = range.knobs[1];\n          newValue = [range.value[0], newValue];\n        }\n      } else {\n        $touchedKnobEl = range.knobs[0];\n        newValue = progress * (range.max - range.min) + range.min;\n      }\n\n      Utils.nextTick(() => {\n        if (isTouched) $touchedKnobEl.addClass('range-knob-active-state');\n      }, 70);\n      range.on('change', onTouchChange);\n      range.setValue(newValue, true);\n    }\n\n    function handleTouchMove(e) {\n      if (!isTouched) return;\n      let pageX;\n      let pageY;\n\n      if (e.type === 'touchmove') {\n        for (let i = 0; i < e.targetTouches.length; i += 1) {\n          if (e.targetTouches[i].identifier === targetTouchIdentifier) {\n            pageX = e.targetTouches[i].pageX;\n            pageY = e.targetTouches[i].pageY;\n          }\n        }\n      } else {\n        pageX = e.pageX;\n        pageY = e.pageY;\n      }\n\n      if (typeof pageX === 'undefined' && typeof pageY === 'undefined') return;\n\n      if (typeof isScrolling === 'undefined' && !range.vertical) {\n        isScrolling = !!(isScrolling || Math.abs(pageY - touchesStart.y) > Math.abs(pageX - touchesStart.x));\n      }\n\n      if (isScrolling) {\n        isTouched = false;\n        return;\n      }\n\n      e.preventDefault();\n      let progress;\n\n      if (range.vertical) {\n        progress = (pageY - rangeOffsetTop) / range.rangeHeight;\n        if (!range.verticalReversed) progress = 1 - progress;\n      } else if (range.app.rtl) {\n        progress = (rangeOffsetLeft + range.rangeWidth - pageX) / range.rangeWidth;\n      } else {\n        progress = (pageX - rangeOffsetLeft) / range.rangeWidth;\n      }\n\n      let newValue = progress * (range.max - range.min) + range.min;\n\n      if (range.dual) {\n        let leftValue;\n        let rightValue;\n\n        if (dualValueIndex === 0) {\n          leftValue = newValue;\n          rightValue = range.value[1];\n\n          if (leftValue > rightValue) {\n            rightValue = leftValue;\n          }\n        } else {\n          leftValue = range.value[0];\n          rightValue = newValue;\n\n          if (rightValue < leftValue) {\n            leftValue = rightValue;\n          }\n        }\n\n        newValue = [leftValue, rightValue];\n      }\n\n      range.setValue(newValue, true);\n    }\n\n    function handleTouchEnd(e) {\n      if (e.type === 'touchend') {\n        let touchEnded;\n\n        for (let i = 0; i < e.changedTouches.length; i += 1) {\n          if (e.changedTouches[i].identifier === targetTouchIdentifier) touchEnded = true;\n        }\n\n        if (!touchEnded) return;\n      }\n\n      if (!isTouched) {\n        if (isScrolling) $touchedKnobEl.removeClass('range-knob-active-state');\n        isTouched = false;\n        return;\n      }\n\n      range.off('change', onTouchChange);\n      isTouched = false;\n      $touchedKnobEl.removeClass('range-knob-active-state');\n\n      if (valueChangedByTouch && range.$inputEl && !range.dual) {\n        range.$inputEl.trigger('change');\n      }\n\n      valueChangedByTouch = false;\n\n      if (typeof range.previousValue !== 'undefined') {\n        if (range.dual && (range.previousValue[0] !== range.value[0] || range.previousValue[1] !== range.value[1]) || !range.dual && range.previousValue !== range.value) {\n          range.$el.trigger('range:changed', range.value);\n          range.emit('local::changed rangeChanged', range, range.value);\n        }\n      }\n    }\n\n    function handleResize() {\n      range.calcSize();\n      range.layout();\n    }\n\n    let parentModals;\n    let parentPanel;\n    let parentPage;\n\n    range.attachEvents = function attachEvents() {\n      const passive = Support.passiveListener ? {\n        passive: true\n      } : false;\n      range.$el.on(app.touchEvents.start, handleTouchStart, passive);\n      app.on('touchmove', handleTouchMove);\n      app.on('touchend:passive', handleTouchEnd);\n      app.on('tabShow', handleResize);\n      app.on('resize', handleResize);\n      parentModals = range.$el.parents('.sheet-modal, .actions-modal, .popup, .popover, .login-screen, .dialog, .toast');\n      parentModals.on('modal:open', handleResize);\n      parentPanel = range.$el.parents('.panel');\n      parentPanel.on('panel:open', handleResize);\n      parentPage = range.$el.parents('.page').eq(0);\n      parentPage.on('page:reinit', handleResize);\n    };\n\n    range.detachEvents = function detachEvents() {\n      const passive = Support.passiveListener ? {\n        passive: true\n      } : false;\n      range.$el.off(app.touchEvents.start, handleTouchStart, passive);\n      app.off('touchmove', handleTouchMove);\n      app.off('touchend:passive', handleTouchEnd);\n      app.off('tabShow', handleResize);\n      app.off('resize', handleResize);\n\n      if (parentModals) {\n        parentModals.off('modal:open', handleResize);\n      }\n\n      if (parentPanel) {\n        parentPanel.off('panel:open', handleResize);\n      }\n\n      if (parentPage) {\n        parentPage.off('page:reinit', handleResize);\n      }\n\n      parentModals = null;\n      parentPanel = null;\n      parentPage = null;\n    }; // Install Modules\n\n\n    range.useModules(); // Init\n\n    range.init();\n    return range;\n  }\n\n  calcSize() {\n    const range = this;\n\n    if (range.vertical) {\n      const height = range.$el.outerHeight();\n      if (height === 0) return;\n      range.rangeHeight = height;\n      range.knobHeight = range.knobs[0].outerHeight();\n    } else {\n      const width = range.$el.outerWidth();\n      if (width === 0) return;\n      range.rangeWidth = width;\n      range.knobWidth = range.knobs[0].outerWidth();\n    }\n  }\n\n  layout() {\n    const range = this;\n    const {\n      app,\n      knobWidth,\n      knobHeight,\n      rangeWidth,\n      rangeHeight,\n      min,\n      max,\n      knobs,\n      $barActiveEl,\n      value,\n      label,\n      labels,\n      vertical,\n      verticalReversed,\n      limitKnobPosition\n    } = range;\n    const knobSize = vertical ? knobHeight : knobWidth;\n    const rangeSize = vertical ? rangeHeight : rangeWidth; // eslint-disable-next-line\n\n    const positionProperty = vertical ? verticalReversed ? 'top' : 'bottom' : app.rtl ? 'right' : 'left';\n\n    if (range.dual) {\n      const progress = [(value[0] - min) / (max - min), (value[1] - min) / (max - min)];\n      $barActiveEl.css({\n        [positionProperty]: `${progress[0] * 100}%`,\n        [vertical ? 'height' : 'width']: `${(progress[1] - progress[0]) * 100}%`\n      });\n      knobs.forEach(($knobEl, knobIndex) => {\n        let startPos = rangeSize * progress[knobIndex];\n\n        if (limitKnobPosition) {\n          const realStartPos = rangeSize * progress[knobIndex] - knobSize / 2;\n          if (realStartPos < 0) startPos = knobSize / 2;\n          if (realStartPos + knobSize > rangeSize) startPos = rangeSize - knobSize / 2;\n        }\n\n        $knobEl.css(positionProperty, `${startPos}px`);\n        if (label) labels[knobIndex].text(range.formatLabel(value[knobIndex], labels[knobIndex][0]));\n      });\n    } else {\n      const progress = (value - min) / (max - min);\n      $barActiveEl.css(vertical ? 'height' : 'width', `${progress * 100}%`);\n      let startPos = rangeSize * progress;\n\n      if (limitKnobPosition) {\n        const realStartPos = rangeSize * progress - knobSize / 2;\n        if (realStartPos < 0) startPos = knobSize / 2;\n        if (realStartPos + knobSize > rangeSize) startPos = rangeSize - knobSize / 2;\n      }\n\n      knobs[0].css(positionProperty, `${startPos}px`);\n      if (label) labels[0].text(range.formatLabel(value, labels[0][0]));\n    }\n\n    if (range.dual && value.indexOf(min) >= 0 || !range.dual && value === min) {\n      range.$el.addClass('range-slider-min');\n    } else {\n      range.$el.removeClass('range-slider-min');\n    }\n\n    if (range.dual && value.indexOf(max) >= 0 || !range.dual && value === max) {\n      range.$el.addClass('range-slider-max');\n    } else {\n      range.$el.removeClass('range-slider-max');\n    }\n  }\n\n  setValue(newValue, byTouchMove) {\n    const range = this;\n    const {\n      step,\n      min,\n      max\n    } = range;\n    let valueChanged;\n    let oldValue;\n\n    if (range.dual) {\n      oldValue = [range.value[0], range.value[1]];\n      let newValues = newValue;\n      if (!Array.isArray(newValues)) newValues = [newValue, newValue];\n\n      if (newValue[0] > newValue[1]) {\n        newValues = [newValues[0], newValues[0]];\n      }\n\n      newValues = newValues.map(value => Math.max(Math.min(Math.round(value / step) * step, max), min));\n\n      if (newValues[0] === range.value[0] && newValues[1] === range.value[1]) {\n        return range;\n      }\n\n      newValues.forEach((value, valueIndex) => {\n        range.value[valueIndex] = value;\n      });\n      valueChanged = oldValue[0] !== newValues[0] || oldValue[1] !== newValues[1];\n      range.layout();\n    } else {\n      oldValue = range.value;\n      const value = Math.max(Math.min(Math.round(newValue / step) * step, max), min);\n      range.value = value;\n      range.layout();\n      valueChanged = oldValue !== value;\n    }\n\n    if (valueChanged) {\n      range.previousValue = oldValue;\n    } // Events\n\n\n    if (!valueChanged) return range;\n    range.$el.trigger('range:change', range.value);\n\n    if (range.$inputEl && !range.dual) {\n      range.$inputEl.val(range.value);\n\n      if (!byTouchMove) {\n        range.$inputEl.trigger('input change');\n      } else {\n        range.$inputEl.trigger('input');\n      }\n    }\n\n    if (!byTouchMove) {\n      range.$el.trigger('range:changed', range.value);\n      range.emit('local::changed rangeChanged', range, range.value);\n    }\n\n    range.emit('local::change rangeChange', range, range.value);\n    return range;\n  }\n\n  getValue() {\n    return this.value;\n  }\n\n  formatLabel(value, labelEl) {\n    const range = this;\n    if (range.params.formatLabel) return range.params.formatLabel.call(range, value, labelEl);\n    return value;\n  }\n\n  formatScaleLabel(value) {\n    const range = this;\n    if (range.params.formatScaleLabel) return range.params.formatScaleLabel.call(range, value);\n    return value;\n  }\n\n  renderScale() {\n    const range = this;\n    const {\n      app,\n      verticalReversed,\n      vertical\n    } = range; // eslint-disable-next-line\n\n    const positionProperty = vertical ? verticalReversed ? 'top' : 'bottom' : app.rtl ? 'right' : 'left';\n    let html = '';\n    Array.from({\n      length: range.scaleSteps + 1\n    }).forEach((scaleEl, index) => {\n      const scaleStepValue = (range.max - range.min) / range.scaleSteps;\n      const scaleValue = range.min + scaleStepValue * index;\n      const progress = (scaleValue - range.min) / (range.max - range.min);\n      html += `<div class=\"range-scale-step\" style=\"${positionProperty}: ${progress * 100}%\">${range.formatScaleLabel(scaleValue)}</div>`;\n\n      if (range.scaleSubSteps && range.scaleSubSteps > 1 && index < range.scaleSteps) {\n        Array.from({\n          length: range.scaleSubSteps - 1\n        }).forEach((subStepEl, subIndex) => {\n          const subStep = scaleStepValue / range.scaleSubSteps;\n          const scaleSubValue = scaleValue + subStep * (subIndex + 1);\n          const subProgress = (scaleSubValue - range.min) / (range.max - range.min);\n          html += `<div class=\"range-scale-step range-scale-substep\" style=\"${positionProperty}: ${subProgress * 100}%\"></div>`;\n        });\n      }\n    });\n    return html;\n  }\n\n  updateScale() {\n    const range = this;\n\n    if (!range.scale || range.scaleSteps < 2) {\n      if (range.$scaleEl) range.$scaleEl.remove();\n      delete range.$scaleEl;\n      return;\n    }\n\n    if (!range.$scaleEl) {\n      range.$scaleEl = $('<div class=\"range-scale\"></div>');\n      range.$el.append(range.$scaleEl);\n    }\n\n    range.$scaleEl.html(range.renderScale());\n  }\n\n  init() {\n    const range = this;\n    range.calcSize();\n    range.layout();\n    range.attachEvents();\n    return range;\n  }\n\n  destroy() {\n    let range = this;\n    range.$el.trigger('range:beforedestroy');\n    range.emit('local::beforeDestroy rangeBeforeDestroy', range);\n    delete range.$el[0].f7Range;\n    range.detachEvents();\n    Utils.deleteProps(range);\n    range = null;\n  }\n\n}\n\nexport default Range;","map":null,"metadata":{},"sourceType":"module"}