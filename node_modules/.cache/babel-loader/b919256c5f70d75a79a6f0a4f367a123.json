{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport React from 'react';\nimport Utils from '../utils/utils';\nimport Mixins from '../utils/mixins';\nimport __reactComponentWatch from '../runtime-helpers/react-component-watch.js';\nimport __reactComponentDispatchEvent from '../runtime-helpers/react-component-dispatch-event.js';\nimport __reactComponentSlots from '../runtime-helpers/react-component-slots.js';\nimport __reactComponentSetProps from '../runtime-helpers/react-component-set-props.js';\n\nvar F7Panel = /*#__PURE__*/function (_React$Component) {\n  _inherits(F7Panel, _React$Component);\n\n  function F7Panel(props, context) {\n    var _this;\n\n    _classCallCheck(this, F7Panel);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(F7Panel).call(this, props, context));\n    _this.__reactRefs = {};\n\n    (function () {\n      Utils.bindMethods(_assertThisInitialized(_this), ['onOpen', 'onOpened', 'onClose', 'onClosed', 'onBackdropClick', 'onSwipe', 'onSwipeOpen', 'onBreakpoint', 'onCollapsedBreakpoint', 'onResize']);\n    })();\n\n    return _this;\n  }\n\n  _createClass(F7Panel, [{\n    key: \"onOpen\",\n    value: function onOpen(event) {\n      this.dispatchEvent('panel:open panelOpen', event);\n    }\n  }, {\n    key: \"onOpened\",\n    value: function onOpened(event) {\n      this.dispatchEvent('panel:opened panelOpened', event);\n    }\n  }, {\n    key: \"onClose\",\n    value: function onClose(event) {\n      this.dispatchEvent('panel:close panelClose', event);\n    }\n  }, {\n    key: \"onClosed\",\n    value: function onClosed(event) {\n      this.dispatchEvent('panel:closed panelClosed', event);\n    }\n  }, {\n    key: \"onBackdropClick\",\n    value: function onBackdropClick(event) {\n      this.dispatchEvent('panel:backdrop-click panelBackdropClick', event);\n    }\n  }, {\n    key: \"onSwipe\",\n    value: function onSwipe(event) {\n      this.dispatchEvent('panel:swipe panelSwipe', event);\n    }\n  }, {\n    key: \"onSwipeOpen\",\n    value: function onSwipeOpen(event) {\n      this.dispatchEvent('panel:swipeopen panelSwipeOpen', event);\n    }\n  }, {\n    key: \"onBreakpoint\",\n    value: function onBreakpoint(event) {\n      this.dispatchEvent('panel:breakpoint panelBreakpoint', event);\n    }\n  }, {\n    key: \"onCollapsedBreakpoint\",\n    value: function onCollapsedBreakpoint(event) {\n      this.dispatchEvent('panel:collapsedbreakpoint panelCollapsedBreakpoint', event);\n    }\n  }, {\n    key: \"onResize\",\n    value: function onResize(event) {\n      this.dispatchEvent('panel:resize panelResize', event);\n    }\n  }, {\n    key: \"open\",\n    value: function open(animate) {\n      var self = this;\n      if (!self.f7Panel) return;\n      self.f7Panel.open(animate);\n    }\n  }, {\n    key: \"close\",\n    value: function close(animate) {\n      var self = this;\n      if (!self.f7Panel) return;\n      self.f7Panel.close(animate);\n    }\n  }, {\n    key: \"toggle\",\n    value: function toggle(animate) {\n      var self = this;\n      if (!self.f7Panel) return;\n      self.f7Panel.toggle(animate);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var props = this.props;\n      var id = props.id,\n          style = props.style,\n          resizable = props.resizable;\n      return React.createElement('div', {\n        ref: function ref(__reactNode) {\n          _this2.__reactRefs['el'] = __reactNode;\n        },\n        id: id,\n        style: style,\n        className: this.classes\n      }, this.slots['default'], resizable && React.createElement('div', {\n        className: 'panel-resize-handler'\n      }));\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var self = this;\n\n      if (self.f7Panel && self.f7Panel.destroy) {\n        self.f7Panel.destroy();\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var self = this;\n      var el = self.refs.el;\n      var _self$props = self.props,\n          opened = _self$props.opened,\n          resizable = _self$props.resizable,\n          backdrop = _self$props.backdrop,\n          backdropEl = _self$props.backdropEl,\n          visibleBreakpoint = _self$props.visibleBreakpoint,\n          collapsedBreakpoint = _self$props.collapsedBreakpoint,\n          swipe = _self$props.swipe,\n          swipeOnlyClose = _self$props.swipeOnlyClose,\n          swipeActiveArea = _self$props.swipeActiveArea,\n          swipeThreshold = _self$props.swipeThreshold;\n      self.$f7ready(function () {\n        var $ = self.$$;\n        if (!$) return;\n\n        if ($('.panel-backdrop').length === 0) {\n          $('<div class=\"panel-backdrop\"></div>').insertBefore(el);\n        }\n\n        var params = Utils.noUndefinedProps({\n          el: el,\n          resizable: resizable,\n          backdrop: backdrop,\n          backdropEl: backdropEl,\n          visibleBreakpoint: visibleBreakpoint,\n          collapsedBreakpoint: collapsedBreakpoint,\n          swipe: swipe,\n          swipeOnlyClose: swipeOnlyClose,\n          swipeActiveArea: swipeActiveArea,\n          swipeThreshold: swipeThreshold,\n          on: {\n            open: self.onOpen,\n            opened: self.onOpened,\n            close: self.onClose,\n            closed: self.onClosed,\n            backdropClick: self.onBackdropClick,\n            swipe: self.onSwipe,\n            swipeOpen: self.onSwipeOpen,\n            collapsedBreakpoint: self.onCollapsedBreakpoint,\n            breakpoint: self.onBreakpoint,\n            resize: self.onResize\n          }\n        });\n        self.f7Panel = self.$f7.panel.create(params);\n\n        if (opened) {\n          self.f7Panel.open(false);\n        }\n      });\n    }\n  }, {\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(events) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return __reactComponentDispatchEvent.apply(void 0, [this, events].concat(args));\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this3 = this;\n\n      __reactComponentWatch(this, 'props.resizable', prevProps, prevState, function (resizable) {\n        var self = _this3;\n        if (!self.f7Panel) return;\n        if (resizable) self.f7Panel.enableResizable();else self.f7Panel.disableResizable();\n      });\n\n      __reactComponentWatch(this, 'props.opened', prevProps, prevState, function (opened) {\n        var self = _this3;\n        if (!self.f7Panel) return;\n\n        if (opened) {\n          self.f7Panel.open();\n        } else {\n          self.f7Panel.close();\n        }\n      });\n    }\n  }, {\n    key: \"classes\",\n    get: function get() {\n      var _Utils$classNames;\n\n      var self = this;\n      var props = self.props;\n      var left = props.left,\n          reveal = props.reveal,\n          className = props.className,\n          resizable = props.resizable;\n      var side = props.side,\n          effect = props.effect;\n      side = side || (left ? 'left' : 'right');\n      effect = effect || (reveal ? 'reveal' : 'cover');\n      return Utils.classNames(className, 'panel', (_Utils$classNames = {\n        'panel-resizable': resizable\n      }, _defineProperty(_Utils$classNames, \"panel-\".concat(side), side), _defineProperty(_Utils$classNames, \"panel-\".concat(effect), effect), _Utils$classNames), Mixins.colorClasses(props));\n    }\n  }, {\n    key: \"slots\",\n    get: function get() {\n      return __reactComponentSlots(this.props);\n    }\n  }, {\n    key: \"refs\",\n    get: function get() {\n      return this.__reactRefs;\n    },\n    set: function set(refs) {}\n  }]);\n\n  return F7Panel;\n}(React.Component);\n\n__reactComponentSetProps(F7Panel, Object.assign({\n  id: [String, Number],\n  className: String,\n  style: Object,\n  side: String,\n  effect: String,\n  cover: Boolean,\n  reveal: Boolean,\n  left: Boolean,\n  right: Boolean,\n  opened: Boolean,\n  resizable: Boolean,\n  backdrop: {\n    type: Boolean,\n    default: true\n  },\n  backdropEl: {\n    type: String,\n    default: undefined\n  },\n  visibleBreakpoint: {\n    type: Number,\n    default: undefined\n  },\n  collapsedBreakpoint: {\n    type: Number,\n    default: undefined\n  },\n  swipe: Boolean,\n  swipeOnlyClose: Boolean,\n  swipeActiveArea: {\n    type: Number,\n    default: 0\n  },\n  swipeThreshold: {\n    type: Number,\n    default: 0\n  }\n}, Mixins.colorProps));\n\nF7Panel.displayName = 'f7-panel';\nexport default F7Panel;","map":null,"metadata":{},"sourceType":"module"}