{"ast":null,"code":"/* eslint indent: [\"off\"] */\nimport $ from 'dom7';\nimport Utils from '../../utils/utils';\nimport Framework7Class from '../../utils/class';\n\nclass PhotoBrowser extends Framework7Class {\n  constructor(app) {\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(params, [app]);\n    const pb = this;\n    pb.app = app;\n    const defaults = Utils.extend({\n      on: {}\n    }, app.params.photoBrowser); // Extend defaults with modules params\n\n    pb.useModulesParams(defaults);\n    pb.params = Utils.extend(defaults, params);\n    Utils.extend(pb, {\n      exposed: false,\n      opened: false,\n      activeIndex: pb.params.swiper.initialSlide,\n      url: pb.params.url,\n      view: pb.params.view || app.views.main,\n      swipeToClose: {\n        allow: true,\n        isTouched: false,\n        diff: undefined,\n        start: undefined,\n        current: undefined,\n        started: false,\n        activeSlide: undefined,\n        timeStart: undefined\n      }\n    }); // Install Modules\n\n    pb.useModules(); // Init\n\n    pb.init();\n  }\n\n  onSlideChange(swiper) {\n    const pb = this;\n    pb.activeIndex = swiper.activeIndex;\n    let current = swiper.activeIndex + 1;\n    let total = pb.params.virtualSlides ? pb.params.photos.length : swiper.slides.length;\n\n    if (swiper.params.loop) {\n      total -= 2;\n      current -= swiper.loopedSlides;\n      if (current < 1) current = total + current;\n      if (current > total) current -= total;\n    }\n\n    const $activeSlideEl = pb.params.virtualSlides ? swiper.$wrapperEl.find(`.swiper-slide[data-swiper-slide-index=\"${swiper.activeIndex}\"]`) : swiper.slides.eq(swiper.activeIndex);\n    const $previousSlideEl = pb.params.virtualSlides ? swiper.$wrapperEl.find(`.swiper-slide[data-swiper-slide-index=\"${swiper.previousIndex}\"]`) : swiper.slides.eq(swiper.previousIndex);\n    let $currentEl = pb.$el.find('.photo-browser-current');\n    let $totalEl = pb.$el.find('.photo-browser-total');\n\n    if (pb.params.type === 'page' && pb.params.navbar && $currentEl.length === 0 && pb.app.theme === 'ios') {\n      const navbarEl = pb.app.navbar.getElByPage(pb.$el);\n\n      if (navbarEl) {\n        $currentEl = $(navbarEl).find('.photo-browser-current');\n        $totalEl = $(navbarEl).find('.photo-browser-total');\n      }\n    }\n\n    if ($currentEl.length && $totalEl.length) {\n      $currentEl.text(current);\n      $totalEl.text(total);\n    } // Update captions\n\n\n    if (pb.captions.length > 0) {\n      const captionIndex = swiper.params.loop ? $activeSlideEl.attr('data-swiper-slide-index') : pb.activeIndex;\n      pb.$captionsContainerEl.find('.photo-browser-caption-active').removeClass('photo-browser-caption-active');\n      pb.$captionsContainerEl.find(`[data-caption-index=\"${captionIndex}\"]`).addClass('photo-browser-caption-active');\n    } // Stop Video\n\n\n    const previousSlideVideo = $previousSlideEl.find('video');\n\n    if (previousSlideVideo.length > 0) {\n      if ('pause' in previousSlideVideo[0]) previousSlideVideo[0].pause();\n    }\n  }\n\n  onTouchStart() {\n    const pb = this;\n    const swipeToClose = pb.swipeToClose;\n    if (!swipeToClose.allow) return;\n    swipeToClose.isTouched = true;\n  }\n\n  onTouchMove(e) {\n    const pb = this;\n    const swipeToClose = pb.swipeToClose;\n    if (!swipeToClose.isTouched) return;\n\n    if (!swipeToClose.started) {\n      swipeToClose.started = true;\n      swipeToClose.start = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;\n\n      if (pb.params.virtualSlides) {\n        swipeToClose.activeSlide = pb.swiper.$wrapperEl.children('.swiper-slide-active');\n      } else {\n        swipeToClose.activeSlide = pb.swiper.slides.eq(pb.swiper.activeIndex);\n      }\n\n      swipeToClose.timeStart = Utils.now();\n    }\n\n    e.preventDefault();\n    swipeToClose.current = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;\n    swipeToClose.diff = swipeToClose.start - swipeToClose.current;\n    pb.$el.transition(0).transform(`translate3d(0,${-swipeToClose.diff}px,0)`);\n  }\n\n  onTouchEnd() {\n    const pb = this;\n    const swipeToClose = pb.swipeToClose;\n    swipeToClose.isTouched = false;\n\n    if (!swipeToClose.started) {\n      swipeToClose.started = false;\n      return;\n    }\n\n    swipeToClose.started = false;\n    swipeToClose.allow = false;\n    const diff = Math.abs(swipeToClose.diff);\n    const timeDiff = new Date().getTime() - swipeToClose.timeStart;\n\n    if (timeDiff < 300 && diff > 20 || timeDiff >= 300 && diff > 100) {\n      Utils.nextTick(() => {\n        if (pb.$el) {\n          if (swipeToClose.diff < 0) pb.$el.addClass('swipe-close-to-bottom');else pb.$el.addClass('swipe-close-to-top');\n        }\n\n        pb.emit('local::swipeToClose', pb);\n        pb.$el.transform('').transition('');\n        pb.close();\n        swipeToClose.allow = true;\n      });\n      return;\n    }\n\n    if (diff !== 0) {\n      pb.$el.addClass('photo-browser-transitioning').transitionEnd(() => {\n        swipeToClose.allow = true;\n        pb.$el.removeClass('photo-browser-transitioning');\n      });\n    } else {\n      swipeToClose.allow = true;\n    }\n\n    Utils.nextTick(() => {\n      pb.$el.transform('').transition('');\n    });\n  } // Render Functions\n\n\n  renderNavbar() {\n    const pb = this;\n    if (pb.params.renderNavbar) return pb.params.renderNavbar.call(pb);\n    let iconsColor = pb.params.iconsColor;\n    if (!pb.params.iconsColor && pb.params.theme === 'dark') iconsColor = 'white';\n    const pageBackLinkText = (pb.app.theme === 'ios' || pb.app.theme === 'aurora') && pb.params.pageBackLinkText ? pb.params.pageBackLinkText : '';\n    const renderNavbarCount = typeof pb.params.navbarShowCount === 'undefined' ? pb.params.photos.length > 1 : pb.params.navbarShowCount;\n    const isPopup = pb.params.type !== 'page';\n    const navbarHtml = `\n      <div class=\"navbar navbar-photo-browser ${pb.params.theme === 'dark' ? 'navbar-photo-browser-dark' : ''}\">\n        <div class=\"navbar-bg\"></div>\n        <div class=\"navbar-inner navbar-inner-centered-title sliding\">\n          ${!isPopup ? `\n          <div class=\"left\">\n            <a class=\"link ${!pageBackLinkText ? 'icon-only' : ''} back\">\n              <i class=\"icon icon-back ${iconsColor ? `color-${iconsColor}` : ''}\"></i>\n              ${pageBackLinkText ? `<span>${pageBackLinkText}</span>` : ''}\n            </a>\n          </div>\n          ` : ''}\n          ${renderNavbarCount ? `\n          <div class=\"title\">\n            <span class=\"photo-browser-current\"></span>\n            <span class=\"photo-browser-of\">${pb.params.navbarOfText}</span>\n            <span class=\"photo-browser-total\"></span>\n          </div>\n          ` : ''}\n          ${isPopup ? `\n          <div class=\"right\">\n            <a class=\"link popup-close\" data-popup=\".photo-browser-popup\">\n              <span>${pb.params.popupCloseLinkText}</span>\n            </a>\n          </div>\n          ` : ''}\n        </div>\n      </div>\n    `.trim();\n    return navbarHtml;\n  }\n\n  renderToolbar() {\n    const pb = this;\n    if (pb.params.renderToolbar) return pb.params.renderToolbar.call(pb);\n    let iconsColor = pb.params.iconsColor;\n    if (!pb.params.iconsColor && pb.params.theme === 'dark') iconsColor = 'white';\n    const toolbarHtml = `\n      <div class=\"toolbar toolbar-bottom tabbar\">\n        <div class=\"toolbar-inner\">\n          <a class=\"link photo-browser-prev\">\n            <i class=\"icon icon-back ${iconsColor ? `color-${iconsColor}` : ''}\"></i>\n          </a>\n          <a class=\"link photo-browser-next\">\n            <i class=\"icon icon-forward ${iconsColor ? `color-${iconsColor}` : ''}\"></i>\n          </a>\n        </div>\n      </div>\n    `.trim();\n    return toolbarHtml;\n  }\n\n  renderCaption(caption, index) {\n    const pb = this;\n    if (pb.params.renderCaption) return pb.params.renderCaption.call(pb, caption, index);\n    const captionHtml = `\n      <div class=\"photo-browser-caption\" data-caption-index=\"${index}\">\n        ${caption}\n      </div>\n    `.trim();\n    return captionHtml;\n  }\n\n  renderObject(photo, index) {\n    const pb = this;\n    if (pb.params.renderObject) return pb.params.renderObject.call(pb, photo, index);\n    const objHtml = `\n      <div class=\"photo-browser-slide photo-browser-object-slide swiper-slide\" data-swiper-slide-index=\"${index}\">${photo.html ? photo.html : photo}</div>\n    `;\n    return objHtml;\n  }\n\n  renderLazyPhoto(photo, index) {\n    const pb = this;\n    if (pb.params.renderLazyPhoto) return pb.params.renderLazyPhoto.call(pb, photo, index);\n    const photoHtml = `\n      <div class=\"photo-browser-slide photo-browser-slide-lazy swiper-slide\" data-swiper-slide-index=\"${index}\">\n          <div class=\"preloader swiper-lazy-preloader ${pb.params.theme === 'dark' ? 'color-white' : ''}\">${Utils[`${pb.app.theme}PreloaderContent`] || ''}</div>\n          <span class=\"swiper-zoom-container\">\n              <img data-src=\"${photo.url ? photo.url : photo}\" class=\"swiper-lazy\">\n          </span>\n      </div>\n    `.trim();\n    return photoHtml;\n  }\n\n  renderPhoto(photo, index) {\n    const pb = this;\n    if (pb.params.renderPhoto) return pb.params.renderPhoto.call(pb, photo, index);\n    const photoHtml = `\n      <div class=\"photo-browser-slide swiper-slide\" data-swiper-slide-index=\"${index}\">\n        <span class=\"swiper-zoom-container\">\n          <img src=\"${photo.url ? photo.url : photo}\">\n        </span>\n      </div>\n    `.trim();\n    return photoHtml;\n  }\n\n  render() {\n    const pb = this;\n    if (pb.params.render) return pb.params.render.call(pb, pb.params);\n    const html = `\n      <div class=\"photo-browser photo-browser-${pb.params.theme}\">\n        <div class=\"view\">\n          <div class=\"page photo-browser-page photo-browser-page-${pb.params.theme} no-toolbar ${!pb.params.navbar ? 'no-navbar' : ''}\" data-name=\"photo-browser-page\">\n            ${pb.params.navbar ? pb.renderNavbar() : ''}\n            ${pb.params.toolbar ? pb.renderToolbar() : ''}\n            <div class=\"photo-browser-captions photo-browser-captions-${pb.params.captionsTheme || pb.params.theme}\">\n              ${pb.params.photos.map((photo, index) => {\n      if (photo.caption) return pb.renderCaption(photo.caption, index);\n      return '';\n    }).join(' ')}\n            </div>\n            <div class=\"photo-browser-swiper-container swiper-container\">\n              <div class=\"photo-browser-swiper-wrapper swiper-wrapper\">\n                ${pb.params.virtualSlides ? '' : pb.params.photos.map((photo, index) => {\n      if (photo.html || (typeof photo === 'string' || photo instanceof String) && photo.indexOf('<') >= 0 && photo.indexOf('>') >= 0) {\n        return pb.renderObject(photo, index);\n      }\n\n      if (pb.params.swiper.lazy === true || pb.params.swiper.lazy && pb.params.swiper.lazy.enabled) {\n        return pb.renderLazyPhoto(photo, index);\n      }\n\n      return pb.renderPhoto(photo, index);\n    }).join(' ')}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    `.trim();\n    return html;\n  }\n\n  renderStandalone() {\n    const pb = this;\n    if (pb.params.renderStandalone) return pb.params.renderStandalone.call(pb);\n    const standaloneHtml = `<div class=\"popup photo-browser-popup photo-browser-standalone popup-tablet-fullscreen\">${pb.render()}</div>`;\n    return standaloneHtml;\n  }\n\n  renderPage() {\n    const pb = this;\n    if (pb.params.renderPage) return pb.params.renderPage.call(pb);\n    const pageHtml = pb.render();\n    return pageHtml;\n  }\n\n  renderPopup() {\n    const pb = this;\n    if (pb.params.renderPopup) return pb.params.renderPopup.call(pb);\n    const popupHtml = `<div class=\"popup photo-browser-popup\">${pb.render()}</div>`;\n    return popupHtml;\n  } // Callbacks\n\n\n  onOpen(type, el) {\n    const pb = this;\n    const app = pb.app;\n    const $el = $(el);\n    $el[0].f7PhotoBrowser = pb;\n    pb.$el = $el;\n    pb.el = $el[0];\n    pb.openedIn = type;\n    pb.opened = true;\n    pb.$swiperContainerEl = pb.$el.find('.photo-browser-swiper-container');\n    pb.$swiperWrapperEl = pb.$el.find('.photo-browser-swiper-wrapper');\n    pb.slides = pb.$el.find('.photo-browser-slide');\n    pb.$captionsContainerEl = pb.$el.find('.photo-browser-captions');\n    pb.captions = pb.$el.find('.photo-browser-caption'); // Init Swiper\n\n    const swiperParams = Utils.extend({}, pb.params.swiper, {\n      initialSlide: pb.activeIndex,\n      on: {\n        tap(e) {\n          pb.emit('local::tap', e);\n        },\n\n        click(e) {\n          if (pb.params.exposition) {\n            pb.expositionToggle();\n          }\n\n          pb.emit('local::click', e);\n        },\n\n        doubleTap(e) {\n          pb.emit('local::doubleTap', e);\n        },\n\n        slideChange() {\n          const swiper = this;\n          pb.onSlideChange(swiper);\n\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          pb.emit('local::slideChange', ...args);\n        },\n\n        transitionStart() {\n          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n            args[_key2] = arguments[_key2];\n          }\n\n          pb.emit('local::transitionStart', ...args);\n        },\n\n        transitionEnd() {\n          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n            args[_key3] = arguments[_key3];\n          }\n\n          pb.emit('local::transitionEnd', ...args);\n        },\n\n        slideChangeTransitionStart() {\n          for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n            args[_key4] = arguments[_key4];\n          }\n\n          pb.emit('local::slideChangeTransitionStart', ...args);\n        },\n\n        slideChangeTransitionEnd() {\n          for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n            args[_key5] = arguments[_key5];\n          }\n\n          pb.emit('local::slideChangeTransitionEnd', ...args);\n        },\n\n        lazyImageLoad() {\n          for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n            args[_key6] = arguments[_key6];\n          }\n\n          pb.emit('local::lazyImageLoad', ...args);\n        },\n\n        lazyImageReady() {\n          for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n            args[_key7] = arguments[_key7];\n          }\n\n          const slideEl = args[0];\n          $(slideEl).removeClass('photo-browser-slide-lazy');\n          pb.emit('local::lazyImageReady', ...args);\n        }\n\n      }\n    });\n\n    if (pb.params.swipeToClose && pb.params.type !== 'page') {\n      Utils.extend(swiperParams.on, {\n        touchStart(e) {\n          pb.onTouchStart(e);\n          pb.emit('local::touchStart', e);\n        },\n\n        touchMoveOpposite(e) {\n          pb.onTouchMove(e);\n          pb.emit('local::touchMoveOpposite', e);\n        },\n\n        touchEnd(e) {\n          pb.onTouchEnd(e);\n          pb.emit('local::touchEnd', e);\n        }\n\n      });\n    }\n\n    if (pb.params.virtualSlides) {\n      Utils.extend(swiperParams, {\n        virtual: {\n          slides: pb.params.photos,\n\n          renderSlide(photo, index) {\n            if (photo.html || (typeof photo === 'string' || photo instanceof String) && photo.indexOf('<') >= 0 && photo.indexOf('>') >= 0) {\n              return pb.renderObject(photo, index);\n            }\n\n            if (pb.params.swiper.lazy === true || pb.params.swiper.lazy && pb.params.swiper.lazy.enabled) {\n              return pb.renderLazyPhoto(photo, index);\n            }\n\n            return pb.renderPhoto(photo, index);\n          }\n\n        }\n      });\n    }\n\n    pb.swiper = app.swiper.create(pb.$swiperContainerEl, swiperParams);\n\n    if (pb.activeIndex === 0) {\n      pb.onSlideChange(pb.swiper);\n    }\n\n    if (pb.$el) {\n      pb.$el.trigger('photobrowser:open');\n    }\n\n    pb.emit('local::open photoBrowserOpen', pb);\n  }\n\n  onOpened() {\n    const pb = this;\n\n    if (pb.$el && pb.params.type === 'standalone') {\n      pb.$el.css('animation', 'none');\n    }\n\n    if (pb.$el) {\n      pb.$el.trigger('photobrowser:opened');\n    }\n\n    pb.emit('local::opened photoBrowserOpened', pb);\n  }\n\n  onClose() {\n    const pb = this;\n    if (pb.destroyed) return; // Destroy Swiper\n\n    if (pb.swiper && pb.swiper.destroy) {\n      pb.swiper.destroy(true, false);\n      pb.swiper = null;\n      delete pb.swiper;\n    }\n\n    if (pb.$el) {\n      pb.$el.trigger('photobrowser:close');\n    }\n\n    pb.emit('local::close photoBrowserClose', pb);\n  }\n\n  onClosed() {\n    const pb = this;\n    if (pb.destroyed) return;\n    pb.opened = false;\n    pb.$el = null;\n    pb.el = null;\n    delete pb.$el;\n    delete pb.el;\n\n    if (pb.$el) {\n      pb.$el.trigger('photobrowser:closed');\n    }\n\n    pb.emit('local::closed photoBrowserClosed', pb);\n  } // Open\n\n\n  openPage() {\n    const pb = this;\n    if (pb.opened) return pb;\n    const pageHtml = pb.renderPage();\n    pb.view.router.navigate({\n      url: pb.url,\n      route: {\n        content: pageHtml,\n        path: pb.url,\n        on: {\n          pageBeforeIn(e, page) {\n            pb.view.$el.addClass(`with-photo-browser-page with-photo-browser-page-${pb.params.theme}`);\n            pb.onOpen('page', page.el);\n          },\n\n          pageAfterIn(e, page) {\n            pb.onOpened('page', page.el);\n          },\n\n          pageBeforeOut(e, page) {\n            pb.view.$el.removeClass(`with-photo-browser-page with-photo-browser-page-exposed with-photo-browser-page-${pb.params.theme}`);\n            pb.onClose('page', page.el);\n          },\n\n          pageAfterOut(e, page) {\n            pb.onClosed('page', page.el);\n          }\n\n        }\n      }\n    });\n    return pb;\n  }\n\n  openStandalone() {\n    const pb = this;\n    if (pb.opened) return pb;\n    const standaloneHtml = pb.renderStandalone();\n    const popupParams = {\n      backdrop: false,\n      content: standaloneHtml,\n      on: {\n        popupOpen(popup) {\n          pb.onOpen('popup', popup.el);\n        },\n\n        popupOpened(popup) {\n          pb.onOpened('popup', popup.el);\n        },\n\n        popupClose(popup) {\n          pb.onClose('popup', popup.el);\n        },\n\n        popupClosed(popup) {\n          pb.onClosed('popup', popup.el);\n        }\n\n      }\n    };\n\n    if (pb.params.routableModals) {\n      pb.view.router.navigate({\n        url: pb.url,\n        route: {\n          path: pb.url,\n          popup: popupParams\n        }\n      });\n    } else {\n      pb.modal = pb.app.popup.create(popupParams).open();\n    }\n\n    return pb;\n  }\n\n  openPopup() {\n    const pb = this;\n    if (pb.opened) return pb;\n    const popupHtml = pb.renderPopup();\n    const popupParams = {\n      content: popupHtml,\n      push: pb.params.popupPush,\n      on: {\n        popupOpen(popup) {\n          pb.onOpen('popup', popup.el);\n        },\n\n        popupOpened(popup) {\n          pb.onOpened('popup', popup.el);\n        },\n\n        popupClose(popup) {\n          pb.onClose('popup', popup.el);\n        },\n\n        popupClosed(popup) {\n          pb.onClosed('popup', popup.el);\n        }\n\n      }\n    };\n\n    if (pb.params.routableModals) {\n      pb.view.router.navigate({\n        url: pb.url,\n        route: {\n          path: pb.url,\n          popup: popupParams\n        }\n      });\n    } else {\n      pb.modal = pb.app.popup.create(popupParams).open();\n    }\n\n    return pb;\n  } // Exposition\n\n\n  expositionEnable() {\n    const pb = this;\n\n    if (pb.params.type === 'page') {\n      pb.view.$el.addClass('with-photo-browser-page-exposed');\n    }\n\n    if (pb.$el) pb.$el.addClass('photo-browser-exposed');\n    if (pb.params.expositionHideCaptions) pb.$captionsContainerEl.addClass('photo-browser-captions-exposed');\n    pb.exposed = true;\n    return pb;\n  }\n\n  expositionDisable() {\n    const pb = this;\n\n    if (pb.params.type === 'page') {\n      pb.view.$el.removeClass('with-photo-browser-page-exposed');\n    }\n\n    if (pb.$el) pb.$el.removeClass('photo-browser-exposed');\n    if (pb.params.expositionHideCaptions) pb.$captionsContainerEl.removeClass('photo-browser-captions-exposed');\n    pb.exposed = false;\n    return pb;\n  }\n\n  expositionToggle() {\n    const pb = this;\n\n    if (pb.params.type === 'page') {\n      pb.view.$el.toggleClass('with-photo-browser-page-exposed');\n    }\n\n    if (pb.$el) pb.$el.toggleClass('photo-browser-exposed');\n    if (pb.params.expositionHideCaptions) pb.$captionsContainerEl.toggleClass('photo-browser-captions-exposed');\n    pb.exposed = !pb.exposed;\n    return pb;\n  }\n\n  open(index) {\n    const pb = this;\n    const type = pb.params.type;\n\n    if (pb.opened) {\n      if (pb.swiper && typeof index !== 'undefined') {\n        pb.swiper.slideTo(parseInt(index, 10));\n      }\n\n      return pb;\n    }\n\n    if (typeof index !== 'undefined') {\n      pb.activeIndex = index;\n    }\n\n    if (type === 'standalone') {\n      pb.openStandalone();\n    }\n\n    if (type === 'page') {\n      pb.openPage();\n    }\n\n    if (type === 'popup') {\n      pb.openPopup();\n    }\n\n    return pb;\n  }\n\n  close() {\n    const pb = this;\n    if (!pb.opened) return pb;\n\n    if (pb.params.routableModals || pb.openedIn === 'page') {\n      if (pb.view) pb.view.router.back();\n    } else {\n      pb.modal.once('modalClosed', () => {\n        Utils.nextTick(() => {\n          if (pb.destroyed) return;\n          pb.modal.destroy();\n          delete pb.modal;\n        });\n      });\n      pb.modal.close();\n    }\n\n    return pb;\n  } // eslint-disable-next-line\n\n\n  init() {}\n\n  destroy() {\n    let pb = this;\n    pb.emit('local::beforeDestroy photoBrowserBeforeDestroy', pb);\n\n    if (pb.$el) {\n      pb.$el.trigger('photobrowser:beforedestroy');\n      pb.$el[0].f7PhotoBrowser = null;\n      delete pb.$el[0].f7PhotoBrowser;\n    }\n\n    Utils.deleteProps(pb);\n    pb.destroyed = true;\n    pb = null;\n  }\n\n}\n\nexport default PhotoBrowser;","map":null,"metadata":{},"sourceType":"module"}