{"ast":null,"code":"import classNames from 'classnames';\nimport React from 'react';\nimport { withNativeProps } from '../../utils/native-props';\nimport { useShouldRender } from '../../utils/should-render';\nimport { DownFill } from 'antd-mobile-icons';\nconst classPrefix = `adm-dropdown-item`;\n\nconst Item = props => {\n  var _a;\n\n  const cls = classNames(classPrefix, {\n    [`${classPrefix}-active`]: props.active,\n    [`${classPrefix}-highlight`]: (_a = props.highlight) !== null && _a !== void 0 ? _a : props.active\n  });\n  return withNativeProps(props, React.createElement(\"div\", {\n    className: cls,\n    onClick: props.onClick\n  }, React.createElement(\"div\", {\n    className: `${classPrefix}-title`\n  }, React.createElement(\"span\", {\n    className: `${classPrefix}-title-text`\n  }, props.title), React.createElement(\"span\", {\n    className: classNames(`${classPrefix}-title-arrow`, {\n      [`${classPrefix}-title-arrow-active`]: props.active\n    })\n  }, props.arrow === undefined ? React.createElement(DownFill, null) : props.arrow))));\n};\n\nexport default Item;\nexport const ItemChildrenWrap = props => {\n  const {\n    active = false\n  } = props;\n  const shouldRender = useShouldRender(active, props.forceRender, props.destroyOnClose);\n  const cls = classNames(`${classPrefix}-content`, {\n    [`${classPrefix}-content-hidden`]: !active\n  });\n  return shouldRender ? React.createElement(\"div\", {\n    className: cls,\n    onClick: props.onClick\n  }, props.children) : null;\n};","map":null,"metadata":{},"sourceType":"module"}