{"ast":null,"code":"import React, { useRef, useState } from 'react';\nimport { renderToContainer } from '../../utils/render-to-container';\nimport Mask from '../mask';\nimport { withStopPropagation } from '../../utils/with-stop-propagation';\nimport { mergeProps } from '../../utils/with-default-props';\nimport { useIsomorphicLayoutEffect, useUnmountedRef } from 'ahooks';\nimport { animated, useSpring } from '@react-spring/web';\nimport { useInnerVisible } from '../../utils/use-inner-visible';\nimport classNames from 'classnames';\nimport { withNativeProps } from '../../utils/native-props';\nimport { ShouldRender } from '../../utils/should-render';\nimport { useLockScroll } from '../../utils/use-lock-scroll';\nimport { CloseOutline } from 'antd-mobile-icons';\nimport { defaultPopupBaseProps } from '../popup/popup-base-props';\nconst defaultProps = Object.assign(Object.assign({}, defaultPopupBaseProps), {\n  getContainer: null\n});\nexport const CenterPopup = p => {\n  const props = mergeProps(defaultProps, p);\n  const unmountedRef = useUnmountedRef();\n  const style = useSpring({\n    scale: props.visible ? 1 : 0.8,\n    opacity: props.visible ? 1 : 0,\n    config: {\n      mass: 1.2,\n      tension: 200,\n      friction: 25,\n      clamp: true\n    },\n    onRest: () => {\n      var _a, _b;\n\n      if (unmountedRef.current) return;\n      setActive(props.visible);\n\n      if (props.visible) {\n        (_a = props.afterShow) === null || _a === void 0 ? void 0 : _a.call(props);\n      } else {\n        (_b = props.afterClose) === null || _b === void 0 ? void 0 : _b.call(props);\n      }\n    }\n  });\n  const [active, setActive] = useState(props.visible);\n  useIsomorphicLayoutEffect(() => {\n    if (props.visible) {\n      setActive(true);\n    }\n  }, [props.visible]);\n  const ref = useRef(null);\n  useLockScroll(ref, props.disableBodyScroll && active);\n  const maskVisible = useInnerVisible(active && props.visible);\n  const body = React.createElement(\"div\", {\n    className: classNames('adm-center-popup-body', props.bodyClassName),\n    style: props.bodyStyle\n  }, props.children);\n  const node = withStopPropagation(props.stopPropagation, withNativeProps(props, React.createElement(\"div\", {\n    className: 'adm-center-popup',\n    style: {\n      display: active ? undefined : 'none',\n      pointerEvents: active ? undefined : 'none'\n    }\n  }, props.mask && React.createElement(Mask, {\n    visible: maskVisible,\n    forceRender: props.forceRender,\n    destroyOnClose: props.destroyOnClose,\n    onMaskClick: e => {\n      var _a, _b;\n\n      (_a = props.onMaskClick) === null || _a === void 0 ? void 0 : _a.call(props, e);\n\n      if (props.closeOnMaskClick) {\n        (_b = props.onClose) === null || _b === void 0 ? void 0 : _b.call(props);\n      }\n    },\n    style: props.maskStyle,\n    className: classNames('adm-center-popup-mask', props.maskClassName),\n    disableBodyScroll: false,\n    stopPropagation: props.stopPropagation\n  }), React.createElement(\"div\", {\n    className: 'adm-center-popup-wrap',\n    role: props.role,\n    \"aria-label\": props['aria-label']\n  }, React.createElement(animated.div, {\n    style: style,\n    ref: ref\n  }, props.showCloseButton && React.createElement(\"a\", {\n    className: classNames('adm-center-popup-close', 'adm-plain-anchor'),\n    onClick: () => {\n      var _a;\n\n      (_a = props.onClose) === null || _a === void 0 ? void 0 : _a.call(props);\n    }\n  }, React.createElement(CloseOutline, null)), body)))));\n  return React.createElement(ShouldRender, {\n    active: active,\n    forceRender: props.forceRender,\n    destroyOnClose: props.destroyOnClose\n  }, renderToContainer(props.getContainer, node));\n};","map":null,"metadata":{},"sourceType":"module"}