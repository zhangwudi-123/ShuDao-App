{"ast":null,"code":"import React, { forwardRef, useCallback, useImperativeHandle, useMemo, useRef } from 'react';\nimport classNames from 'classnames';\nimport { Popover } from './popover';\nconst classPrefix = `adm-popover-menu`;\nexport const PopoverMenu = forwardRef((props, ref) => {\n  const innerRef = useRef(null); // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n  useImperativeHandle(ref, () => innerRef.current, []);\n  const onClick = useCallback(e => {\n    var _a;\n\n    const {\n      onAction\n    } = props;\n\n    if (onAction) {\n      onAction(e);\n    }\n\n    (_a = innerRef.current) === null || _a === void 0 ? void 0 : _a.hide();\n  }, [props.onAction]);\n  const overlay = useMemo(() => {\n    return React.createElement(\"div\", {\n      className: `${classPrefix}-list`\n    }, React.createElement(\"div\", {\n      className: `${classPrefix}-list-inner`\n    }, props.actions.map((action, index) => {\n      var _a;\n\n      return React.createElement(\"a\", {\n        key: (_a = action.key) !== null && _a !== void 0 ? _a : index,\n        className: classNames(`${classPrefix}-item`, 'adm-plain-anchor', action.disabled && `${classPrefix}-item-disabled`),\n        onClick: () => {\n          var _a;\n\n          if (action.disabled) return;\n          onClick(action);\n          (_a = action.onClick) === null || _a === void 0 ? void 0 : _a.call(action);\n        }\n      }, action.icon && React.createElement(\"div\", {\n        className: `${classPrefix}-item-icon`\n      }, action.icon), React.createElement(\"div\", {\n        className: `${classPrefix}-item-text`\n      }, action.text));\n    })));\n  }, [props.actions, onClick]);\n  return React.createElement(Popover, Object.assign({\n    ref: innerRef\n  }, props, {\n    className: classNames(classPrefix, props.className),\n    content: overlay\n  }), props.children);\n});","map":null,"metadata":{},"sourceType":"module"}