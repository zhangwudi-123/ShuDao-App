{"ast":null,"code":"import React, { useState, useEffect, forwardRef, useImperativeHandle, memo } from 'react';\nimport classNames from 'classnames';\nimport Popup from '../popup';\nimport { mergeProps } from '../../utils/with-default-props';\nimport { withNativeProps } from '../../utils/native-props';\nimport { usePropsValue } from '../../utils/use-props-value';\nimport PickerView from '../picker-view';\nimport { generateColumnsExtend, useColumnsExtend } from '../picker-view/columns-extend';\nimport { useConfig } from '../config-provider';\nimport { useMemoizedFn } from 'ahooks';\nimport SafeArea from '../safe-area';\nimport { defaultRenderLabel } from './picker-utils';\nconst classPrefix = `adm-picker`;\nconst defaultProps = {\n  defaultValue: [],\n  closeOnMaskClick: true,\n  renderLabel: defaultRenderLabel,\n  destroyOnClose: false,\n  forceRender: false\n};\nexport const Picker = memo(forwardRef((p, ref) => {\n  var _a;\n\n  const {\n    locale\n  } = useConfig();\n  const props = mergeProps(defaultProps, {\n    confirmText: locale.common.confirm,\n    cancelText: locale.common.cancel\n  }, p);\n  const [visible, setVisible] = usePropsValue({\n    value: props.visible,\n    defaultValue: false,\n    onChange: v => {\n      var _a;\n\n      if (v === false) {\n        (_a = props.onClose) === null || _a === void 0 ? void 0 : _a.call(props);\n      }\n    }\n  });\n  const actions = {\n    toggle: () => {\n      setVisible(v => !v);\n    },\n    open: () => {\n      setVisible(true);\n    },\n    close: () => {\n      setVisible(false);\n    }\n  };\n  useImperativeHandle(ref, () => actions);\n  const [value, setValue] = usePropsValue(Object.assign(Object.assign({}, props), {\n    onChange: val => {\n      var _a;\n\n      const extend = generateColumnsExtend(props.columns, val);\n      (_a = props.onConfirm) === null || _a === void 0 ? void 0 : _a.call(props, val, extend);\n    }\n  }));\n  const extend = useColumnsExtend(props.columns, value);\n  const [innerValue, setInnerValue] = useState(value);\n  useEffect(() => {\n    if (innerValue !== value) {\n      setInnerValue(value);\n    }\n  }, [visible]);\n  useEffect(() => {\n    if (!visible) {\n      setInnerValue(value);\n    }\n  }, [value]);\n  const onChange = useMemoizedFn((val, ext) => {\n    var _a;\n\n    setInnerValue(val);\n\n    if (visible) {\n      (_a = props.onSelect) === null || _a === void 0 ? void 0 : _a.call(props, val, ext);\n    }\n  });\n  const pickerElement = withNativeProps(props, React.createElement(\"div\", {\n    className: classPrefix\n  }, React.createElement(\"div\", {\n    className: `${classPrefix}-header`\n  }, React.createElement(\"a\", {\n    role: 'button',\n    className: `${classPrefix}-header-button`,\n    onClick: () => {\n      var _a;\n\n      (_a = props.onCancel) === null || _a === void 0 ? void 0 : _a.call(props);\n      setVisible(false);\n    }\n  }, props.cancelText), React.createElement(\"div\", {\n    className: `${classPrefix}-header-title`\n  }, props.title), React.createElement(\"a\", {\n    role: 'button',\n    className: classNames(`${classPrefix}-header-button`, props.loading && `${classPrefix}-header-button-disabled`),\n    onClick: () => {\n      if (props.loading) return;\n      setValue(innerValue, true);\n      setVisible(false);\n    },\n    \"aria-disabled\": props.loading\n  }, props.confirmText)), React.createElement(\"div\", {\n    className: `${classPrefix}-body`\n  }, React.createElement(PickerView, {\n    loading: props.loading,\n    loadingContent: props.loadingContent,\n    columns: props.columns,\n    renderLabel: props.renderLabel,\n    value: innerValue,\n    mouseWheel: props.mouseWheel,\n    onChange: onChange\n  }))));\n  const popupElement = React.createElement(Popup, {\n    style: props.popupStyle,\n    className: classNames(`${classPrefix}-popup`, props.popupClassName),\n    visible: visible,\n    position: 'bottom',\n    onMaskClick: () => {\n      var _a;\n\n      if (!props.closeOnMaskClick) return;\n      (_a = props.onCancel) === null || _a === void 0 ? void 0 : _a.call(props);\n      setVisible(false);\n    },\n    getContainer: props.getContainer,\n    destroyOnClose: props.destroyOnClose,\n    afterShow: props.afterShow,\n    afterClose: props.afterClose,\n    onClick: props.onClick,\n    forceRender: props.forceRender,\n    stopPropagation: props.stopPropagation\n  }, pickerElement, React.createElement(SafeArea, {\n    position: 'bottom'\n  }));\n  return React.createElement(React.Fragment, null, popupElement, (_a = props.children) === null || _a === void 0 ? void 0 : _a.call(props, extend.items, actions));\n}));\nPicker.displayName = 'Picker';","map":null,"metadata":{},"sourceType":"module"}