{"ast":null,"code":"import $ from 'dom7';\nimport Utils from '../../utils/utils';\nimport Framework7Class from '../../utils/class';\n\nclass DataTable extends Framework7Class {\n  constructor(app) {\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(params, [app]);\n    const table = this;\n    const defaults = {}; // Extend defaults with modules params\n\n    table.useModulesParams(defaults);\n    table.params = Utils.extend(defaults, params); // El\n\n    const $el = $(table.params.el);\n    if ($el.length === 0) return undefined;\n    table.$el = $el;\n    table.el = $el[0];\n\n    if (table.$el[0].f7DataTable) {\n      const instance = table.$el[0].f7DataTable;\n      table.destroy();\n      return instance;\n    }\n\n    table.$el[0].f7DataTable = table;\n    Utils.extend(table, {\n      collapsible: $el.hasClass('data-table-collapsible'),\n      // Headers\n      $headerEl: $el.find('.data-table-header'),\n      $headerSelectedEl: $el.find('.data-table-header-selected')\n    }); // Events\n\n    function handleChange(e) {\n      if (e.detail && e.detail.sentByF7DataTable) {\n        // Scripted event, don't do anything\n        return;\n      }\n\n      const $inputEl = $(this);\n      const checked = $inputEl[0].checked;\n      const columnIndex = $inputEl.parents('td,th').index();\n\n      if ($inputEl.parents('thead').length > 0) {\n        if (columnIndex === 0) {\n          $el.find('tbody tr')[checked ? 'addClass' : 'removeClass']('data-table-row-selected');\n        }\n\n        $el.find(`tbody tr td:nth-child(${columnIndex + 1}) input`).prop('checked', checked).trigger('change', {\n          sentByF7DataTable: true\n        });\n        $inputEl.prop('indeterminate', false);\n      } else {\n        if (columnIndex === 0) {\n          $inputEl.parents('tr')[checked ? 'addClass' : 'removeClass']('data-table-row-selected');\n        }\n\n        const checkedRows = $el.find(`tbody .checkbox-cell:nth-child(${columnIndex + 1}) input[type=\"checkbox\"]:checked`).length;\n        const totalRows = $el.find('tbody tr').length;\n        const $headCheckboxEl = $el.find(`thead .checkbox-cell:nth-child(${columnIndex + 1}) input[type=\"checkbox\"]`);\n\n        if (!checked) {\n          $headCheckboxEl.prop('checked', false);\n        } else if (checkedRows === totalRows) {\n          $headCheckboxEl.prop('checked', true).trigger('change', {\n            sentByF7DataTable: true\n          });\n        }\n\n        $headCheckboxEl.prop('indeterminate', checkedRows > 0 && checkedRows < totalRows);\n      }\n\n      table.checkSelectedHeader();\n    }\n\n    function handleSortableClick() {\n      const $cellEl = $(this);\n      const isActive = $cellEl.hasClass('sortable-cell-active');\n      const currentSort = $cellEl.hasClass('sortable-desc') ? 'desc' : 'asc';\n      let newSort;\n\n      if (isActive) {\n        newSort = currentSort === 'desc' ? 'asc' : 'desc';\n        $cellEl.removeClass('sortable-desc sortable-asc').addClass(`sortable-${newSort}`);\n      } else {\n        $el.find('thead .sortable-cell-active').removeClass('sortable-cell-active');\n        $cellEl.addClass('sortable-cell-active');\n        newSort = currentSort;\n      }\n\n      $cellEl.trigger('datatable:sort', newSort);\n      table.emit('local::sort dataTableSort', table, newSort);\n    }\n\n    table.attachEvents = function attachEvents() {\n      table.$el.on('change', '.checkbox-cell input[type=\"checkbox\"]', handleChange);\n      table.$el.find('thead .sortable-cell').on('click', handleSortableClick);\n    };\n\n    table.detachEvents = function detachEvents() {\n      table.$el.off('change', '.checkbox-cell input[type=\"checkbox\"]', handleChange);\n      table.$el.find('thead .sortable-cell').off('click', handleSortableClick);\n    }; // Install Modules\n\n\n    table.useModules(); // Init\n\n    table.init();\n    return table;\n  }\n\n  setCollapsibleLabels() {\n    const table = this;\n    if (!table.collapsible) return;\n    table.$el.find('tbody td:not(.checkbox-cell)').each((index, el) => {\n      const $el = $(el);\n      const elIndex = $el.index();\n      const collpsibleTitle = $el.attr('data-collapsible-title');\n\n      if (!collpsibleTitle && collpsibleTitle !== '') {\n        $el.attr('data-collapsible-title', table.$el.find('thead th').eq(elIndex).text());\n      }\n    });\n  }\n\n  checkSelectedHeader() {\n    const table = this;\n\n    if (table.$headerEl.length > 0 && table.$headerSelectedEl.length > 0) {\n      const checkedItems = table.$el.find('tbody .checkbox-cell input:checked').length;\n      table.$el[checkedItems > 0 ? 'addClass' : 'removeClass']('data-table-has-checked');\n      table.$headerSelectedEl.find('.data-table-selected-count').text(checkedItems);\n    }\n  }\n\n  init() {\n    const table = this;\n    table.attachEvents();\n    table.setCollapsibleLabels();\n    table.checkSelectedHeader();\n  }\n\n  destroy() {\n    let table = this;\n    table.$el.trigger('datatable:beforedestroy');\n    table.emit('local::beforeDestroy dataTableBeforeDestroy', table);\n    table.attachEvents();\n\n    if (table.$el[0]) {\n      table.$el[0].f7DataTable = null;\n      delete table.$el[0].f7DataTable;\n    }\n\n    Utils.deleteProps(table);\n    table = null;\n  }\n\n}\n\nexport default DataTable;","map":null,"metadata":{},"sourceType":"module"}