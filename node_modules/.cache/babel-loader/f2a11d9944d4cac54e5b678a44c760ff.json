{"ast":null,"code":"import $ from 'dom7';\nexport default function () {\n  let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    defaultSelector,\n    constructor,\n    domProp,\n    app,\n    addMethods\n  } = parameters;\n  const methods = {\n    create() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      if (app) return new constructor(app, ...args);\n      return new constructor(...args);\n    },\n\n    get() {\n      let el = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultSelector;\n      if (el instanceof constructor) return el;\n      const $el = $(el);\n      if ($el.length === 0) return undefined;\n      return $el[0][domProp];\n    },\n\n    destroy(el) {\n      const instance = methods.get(el);\n      if (instance && instance.destroy) return instance.destroy();\n      return undefined;\n    }\n\n  };\n\n  if (addMethods && Array.isArray(addMethods)) {\n    addMethods.forEach(methodName => {\n      methods[methodName] = function () {\n        let el = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultSelector;\n        const instance = methods.get(el);\n\n        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n          args[_key2 - 1] = arguments[_key2];\n        }\n\n        if (instance && instance[methodName]) return instance[methodName](...args);\n        return undefined;\n      };\n    });\n  }\n\n  return methods;\n}","map":null,"metadata":{},"sourceType":"module"}