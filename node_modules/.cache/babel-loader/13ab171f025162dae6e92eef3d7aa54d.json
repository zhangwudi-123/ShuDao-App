{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport React from 'react';\nimport Utils from '../utils/utils';\nimport Mixins from '../utils/mixins';\nimport F7Icon from './icon';\nimport __reactComponentDispatchEvent from '../runtime-helpers/react-component-dispatch-event.js';\nimport __reactComponentSlots from '../runtime-helpers/react-component-slots.js';\nimport __reactComponentSetProps from '../runtime-helpers/react-component-set-props.js';\n\nvar F7TreeviewItem = /*#__PURE__*/function (_React$Component) {\n  _inherits(F7TreeviewItem, _React$Component);\n\n  function F7TreeviewItem(props, context) {\n    var _this;\n\n    _classCallCheck(this, F7TreeviewItem);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(F7TreeviewItem).call(this, props, context));\n    _this.__reactRefs = {};\n\n    (function () {\n      Utils.bindMethods(_assertThisInitialized(_this), ['onClick', 'onOpen', 'onClose', 'onLoadChildren']);\n    })();\n\n    return _this;\n  }\n\n  _createClass(F7TreeviewItem, [{\n    key: \"onClick\",\n    value: function onClick(event) {\n      this.dispatchEvent('click', event);\n    }\n  }, {\n    key: \"onOpen\",\n    value: function onOpen(el) {\n      if (this.eventTargetEl !== el) return;\n      this.dispatchEvent('treeview:open treeviewOpen', el);\n    }\n  }, {\n    key: \"onClose\",\n    value: function onClose(el) {\n      if (this.eventTargetEl !== el) return;\n      this.dispatchEvent('treeview:close treeviewClose', el);\n    }\n  }, {\n    key: \"onLoadChildren\",\n    value: function onLoadChildren(el, done) {\n      if (this.eventTargetEl !== el) return;\n      this.dispatchEvent('treeview:loadchildren treeviewLoadChildren', el, done);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var self = this;\n      var props = self.props;\n      var id = props.id,\n          style = props.style,\n          toggle = props.toggle,\n          label = props.label,\n          icon = props.icon,\n          iconMaterial = props.iconMaterial,\n          iconF7 = props.iconF7,\n          iconMd = props.iconMd,\n          iconIos = props.iconIos,\n          iconAurora = props.iconAurora,\n          iconSize = props.iconSize,\n          iconColor = props.iconColor,\n          link = props.link;\n      var slots = self.slots;\n      var hasChildren = slots.default && slots.default.length || slots.children && slots.children.length || slots['children-start'] && slots['children-start'].length;\n      var needToggle = typeof toggle === 'undefined' ? hasChildren : toggle;\n      var iconEl;\n\n      if (icon || iconMaterial || iconF7 || iconMd || iconIos || iconAurora) {\n        iconEl = React.createElement(F7Icon, {\n          material: iconMaterial,\n          f7: iconF7,\n          icon: icon,\n          md: iconMd,\n          ios: iconIos,\n          aurora: iconAurora,\n          color: iconColor,\n          size: iconSize\n        });\n      }\n\n      var TreeviewRootTag = link || link === '' ? 'a' : 'div';\n      return React.createElement('div', {\n        ref: function ref(__reactNode) {\n          _this2.__reactRefs['el'] = __reactNode;\n        },\n        id: id,\n        style: style,\n        className: self.classes\n      }, React.createElement(TreeviewRootTag, Object.assign({\n        ref: function ref(__reactNode) {\n          _this2.__reactRefs['rootEl'] = __reactNode;\n        },\n        className: self.itemRootClasses\n      }, self.itemRootAttrs), this.slots['root-start'], needToggle && React.createElement('div', {\n        className: 'treeview-toggle'\n      }), React.createElement('div', {\n        className: 'treeview-item-content'\n      }, this.slots['content-start'], iconEl, this.slots['media'], React.createElement('div', {\n        className: 'treeview-item-label'\n      }, this.slots['label-start'], label, this.slots['label']), this.slots['content'], this.slots['content-end']), this.slots['root'], this.slots['root-end']), hasChildren && React.createElement('div', {\n        className: 'treeview-item-children'\n      }, this.slots['children-start'], this.slots['default'], this.slots['children']));\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var self = this;\n      var _self$refs = self.refs,\n          el = _self$refs.el,\n          rootEl = _self$refs.rootEl;\n      rootEl.removeEventListener('click', self.onClick);\n      if (!el || self.$f7) return;\n      self.$f7.off('treeviewOpen', self.onOpen);\n      self.$f7.off('treeviewClose', self.onClose);\n      self.$f7.off('treeviewLoadChildren', self.onLoadChildren);\n      self.eventTargetEl = null;\n      delete self.eventTargetEl;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var self = this;\n      var _self$refs2 = self.refs,\n          el = _self$refs2.el,\n          rootEl = _self$refs2.rootEl;\n      rootEl.addEventListener('click', self.onClick);\n      if (!el) return;\n      self.eventTargetEl = el;\n      self.$f7ready(function (f7) {\n        f7.on('treeviewOpen', self.onOpen);\n        f7.on('treeviewClose', self.onClose);\n        f7.on('treeviewLoadChildren', self.onLoadChildren);\n      });\n    }\n  }, {\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(events) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return __reactComponentDispatchEvent.apply(void 0, [this, events].concat(args));\n    }\n  }, {\n    key: \"itemRootAttrs\",\n    get: function get() {\n      var self = this;\n      var props = self.props;\n      var link = props.link;\n      var href = link;\n      if (link === true) href = '#';\n      if (link === false) href = undefined;\n      return Utils.extend({\n        href: href\n      }, Mixins.linkRouterAttrs(props), Mixins.linkActionsAttrs(props));\n    }\n  }, {\n    key: \"itemRootClasses\",\n    get: function get() {\n      var self = this;\n      var props = self.props;\n      var selectable = props.selectable,\n          selected = props.selected,\n          itemToggle = props.itemToggle;\n      return Utils.classNames('treeview-item-root', {\n        'treeview-item-selectable': selectable,\n        'treeview-item-selected': selected,\n        'treeview-item-toggle': itemToggle\n      }, Mixins.linkRouterClasses(props), Mixins.linkActionsClasses(props));\n    }\n  }, {\n    key: \"classes\",\n    get: function get() {\n      var self = this;\n      var props = self.props;\n      var className = props.className,\n          opened = props.opened,\n          loadChildren = props.loadChildren;\n      return Utils.classNames(className, 'treeview-item', {\n        'treeview-item-opened': opened,\n        'treeview-load-children': loadChildren\n      }, Mixins.colorClasses(props));\n    }\n  }, {\n    key: \"slots\",\n    get: function get() {\n      return __reactComponentSlots(this.props);\n    }\n  }, {\n    key: \"refs\",\n    get: function get() {\n      return this.__reactRefs;\n    },\n    set: function set(refs) {}\n  }]);\n\n  return F7TreeviewItem;\n}(React.Component);\n\n__reactComponentSetProps(F7TreeviewItem, Object.assign({\n  id: [String, Number],\n  className: String,\n  style: Object,\n  toggle: {\n    type: Boolean,\n    default: undefined\n  },\n  itemToggle: Boolean,\n  selectable: Boolean,\n  selected: Boolean,\n  opened: Boolean,\n  label: String,\n  loadChildren: Boolean,\n  link: {\n    type: [Boolean, String],\n    default: undefined\n  }\n}, Mixins.colorProps, {}, Mixins.linkActionsProps, {}, Mixins.linkRouterProps, {}, Mixins.linkIconProps));\n\nF7TreeviewItem.displayName = 'f7-treeview-item';\nexport default F7TreeviewItem;","map":null,"metadata":{},"sourceType":"module"}