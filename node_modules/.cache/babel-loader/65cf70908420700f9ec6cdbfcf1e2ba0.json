{"ast":null,"code":"import $ from 'dom7';\nimport Utils from '../../utils/utils';\nimport Panel from './panel-class';\nexport default {\n  name: 'panel',\n  params: {\n    panel: {\n      opened: undefined,\n      // default based on panel-in class\n      side: undefined,\n      // default based on panel class\n      effect: undefined,\n      // default based on panel class\n      resizable: undefined,\n      // default based on panel-resizable class\n      backdrop: true,\n      backdropEl: undefined,\n      visibleBreakpoint: undefined,\n      collapsedBreakpoint: undefined,\n      swipe: false,\n      // or true\n      swipeOnlyClose: false,\n      swipeActiveArea: 0,\n      swipeThreshold: 0,\n      closeByBackdropClick: true\n    }\n  },\n  static: {\n    Panel\n  },\n  instance: {\n    panel: {\n      allowOpen: true\n    }\n  },\n\n  create() {\n    const app = this;\n    Utils.extend(app.panel, {\n      create(params) {\n        return new Panel(app, params);\n      },\n\n      get() {\n        let el = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '.panel';\n        if (el instanceof Panel) return el;\n        if (el === 'left' || el === 'right') el = `.panel-${el}`; // eslint-disable-line\n\n        const $el = $(el);\n        if ($el.length === 0 || $el.length > 1) return undefined;\n        return $el[0].f7Panel;\n      },\n\n      destroy() {\n        let el = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '.panel';\n        const panel = app.panel.get(el);\n        if (panel && panel.destroy) return panel.destroy();\n        return undefined;\n      },\n\n      open() {\n        let el = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '.panel';\n        let animate = arguments.length > 1 ? arguments[1] : undefined;\n        if (el === 'left' || el === 'right') el = `.panel-${el}`; // eslint-disable-line\n\n        let panel = app.panel.get(el);\n        if (panel && panel.open) return panel.open(animate);\n\n        if (!panel) {\n          panel = app.panel.create({\n            el\n          });\n          return panel.open(animate);\n        }\n\n        return undefined;\n      },\n\n      close() {\n        let el = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '.panel-in';\n        let animate = arguments.length > 1 ? arguments[1] : undefined;\n        if (el === 'left' || el === 'right') el = `.panel-${el}`; // eslint-disable-line\n\n        let panel = app.panel.get(el);\n        if (panel && panel.open) return panel.close(animate);\n\n        if (!panel) {\n          panel = app.panel.create({\n            el\n          });\n          return panel.close(animate);\n        }\n\n        return undefined;\n      },\n\n      toggle() {\n        let el = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '.panel';\n        let animate = arguments.length > 1 ? arguments[1] : undefined;\n        if (el === 'left' || el === 'right') el = `.panel-${el}`; // eslint-disable-line\n\n        let panel = app.panel.get(el);\n        if (panel && panel.toggle) return panel.toggle(animate);\n\n        if (!panel) {\n          panel = app.panel.create({\n            el\n          });\n          return panel.toggle(animate);\n        }\n\n        return undefined;\n      }\n\n    });\n  },\n\n  on: {\n    init() {\n      const app = this;\n      $('.panel-init').each((index, panelEl) => {\n        const params = Object.assign({\n          el: panelEl\n        }, $(panelEl).dataset() || {});\n        app.panel.create(params);\n      });\n    },\n\n    pageInit(page) {\n      const app = this;\n      page.$el.find('.panel-init').each((index, panelEl) => {\n        const params = Object.assign({\n          el: panelEl\n        }, $(panelEl).dataset() || {});\n        app.panel.create(params);\n      });\n    },\n\n    pageBeforeRemove(page) {\n      const app = this;\n      page.$el.find('.panel-init').each((index, panelEl) => {\n        const panel = app.panel.get(panelEl);\n        if (panel && panel.destroy) panel.destroy();\n      });\n    }\n\n  },\n  clicks: {\n    '.panel-open': function open(clickedEl) {\n      let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      const app = this;\n      app.panel.open(data.panel, data.animate);\n    },\n    '.panel-close': function close(clickedEl) {\n      let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      const app = this;\n      app.panel.close(data.panel, data.animate);\n    },\n    '.panel-toggle': function close(clickedEl) {\n      let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      const app = this;\n      app.panel.toggle(data.panel, data.animate);\n    },\n    '.panel-backdrop': function close() {\n      const app = this;\n      const $panelEl = $('.panel-in:not(.panel-out)');\n      if (!$panelEl.length) return;\n      const instance = $panelEl[0] && $panelEl[0].f7Panel;\n      $panelEl.trigger('panel:backdrop-click');\n\n      if (instance) {\n        instance.emit('backdropClick', instance);\n      }\n\n      app.emit('panelBackdropClick', instance || $panelEl[0]);\n      if (app.params.panel.closeByBackdropClick) app.panel.close();\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}