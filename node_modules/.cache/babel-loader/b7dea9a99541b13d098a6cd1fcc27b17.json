{"ast":null,"code":"/* eslint no-underscore-dangle: \"off\" */\nimport f7 from './f7';\nimport Utils from './utils';\nlet routerComponentIdCounter = 0;\nexport default {\n  proto: {\n    pageComponentLoader(routerEl, component, componentUrl, options, resolve, reject) {\n      const router = this;\n      const el = routerEl;\n      let viewRouter;\n      f7.routers.views.forEach(data => {\n        if (data.el && data.el === routerEl) {\n          viewRouter = data;\n        }\n      });\n\n      if (!viewRouter) {\n        reject();\n        return;\n      }\n\n      const id = `${Utils.now()}_${routerComponentIdCounter += 1}`;\n      const pageData = {\n        component,\n        id,\n        props: Utils.extend({\n          f7route: options.route,\n          $f7route: options.route,\n          f7router: router,\n          $f7router: router\n        }, options.route.params, options.props || {})\n      };\n\n      if (viewRouter.component) {\n        viewRouter.component.$f7router = router;\n        viewRouter.component.$f7route = options.route;\n      }\n\n      let resolved;\n\n      function onDidUpdate(componentRouterData) {\n        if (componentRouterData !== viewRouter || resolved) return;\n        f7.events.off('viewRouterDidUpdate', onDidUpdate);\n        const pageEl = el.children[el.children.length - 1];\n        pageData.el = pageEl;\n        resolve(pageEl);\n        resolved = true;\n      }\n\n      f7.events.on('viewRouterDidUpdate', onDidUpdate);\n      viewRouter.pages.push(pageData);\n      viewRouter.setPages(viewRouter.pages);\n    },\n\n    removePage($pageEl) {\n      if (!$pageEl) return;\n      const router = this;\n      let f7Page;\n      if ('length' in $pageEl) f7Page = $pageEl[0].f7Page;else f7Page = $pageEl.f7Page;\n\n      if (f7Page && f7Page.route && f7Page.route.route && f7Page.route.route.keepAlive) {\n        router.app.$($pageEl).remove();\n        return;\n      }\n\n      let viewRouter;\n      f7.routers.views.forEach(data => {\n        if (data.el && data.el === router.el) {\n          viewRouter = data;\n        }\n      });\n      let pageEl;\n\n      if ('length' in $pageEl) {\n        // Dom7\n        if ($pageEl.length === 0) return;\n        pageEl = $pageEl[0];\n      } else {\n        pageEl = $pageEl;\n      }\n\n      if (!pageEl) return;\n      let pageComponentFound;\n      viewRouter.pages.forEach((page, index) => {\n        if (page.el === pageEl) {\n          pageComponentFound = true;\n          viewRouter.pages.splice(index, 1);\n          viewRouter.setPages(viewRouter.pages);\n        }\n      });\n\n      if (!pageComponentFound) {\n        pageEl.parentNode.removeChild(pageEl);\n      }\n    },\n\n    tabComponentLoader(tabEl, component, componentUrl, options, resolve, reject) {\n      const router = this;\n      if (!tabEl) reject();\n      let tabRouter;\n      f7.routers.tabs.forEach(tabData => {\n        if (tabData.el && tabData.el === tabEl) {\n          tabRouter = tabData;\n        }\n      });\n\n      if (!tabRouter) {\n        reject();\n        return;\n      }\n\n      const id = `${Utils.now()}_${routerComponentIdCounter += 1}`;\n      const tabContent = {\n        id,\n        component,\n        props: Utils.extend({\n          f7route: options.route,\n          $f7route: options.route,\n          f7router: router,\n          $f7router: router\n        }, options.route.params, options.props || {})\n      };\n\n      if (tabRouter.component) {\n        tabRouter.component.$f7router = router;\n        tabRouter.component.$f7route = options.route;\n      }\n\n      let resolved;\n\n      function onDidUpdate(componentRouterData) {\n        if (componentRouterData !== tabRouter || resolved) return;\n        f7.events.off('tabRouterDidUpdate', onDidUpdate);\n        const tabContentEl = tabEl.children[0];\n        resolve(tabContentEl);\n        resolved = true;\n      }\n\n      f7.events.on('tabRouterDidUpdate', onDidUpdate);\n      tabRouter.setTabContent(tabContent);\n    },\n\n    removeTabContent(tabEl) {\n      if (!tabEl) return;\n      let tabRouter;\n      f7.routers.tabs.forEach(tabData => {\n        if (tabData.el && tabData.el === tabEl) {\n          tabRouter = tabData;\n        }\n      });\n      const hasComponent = tabRouter && tabRouter.component;\n\n      if (!tabRouter || !hasComponent) {\n        tabEl.innerHTML = ''; // eslint-disable-line\n\n        return;\n      }\n\n      tabRouter.setTabContent(null);\n    },\n\n    modalComponentLoader(rootEl, component, componentUrl, options, resolve, reject) {\n      const router = this;\n      const modalsRouter = f7.routers.modals;\n\n      if (!modalsRouter) {\n        reject();\n        return;\n      }\n\n      const id = `${Utils.now()}_${routerComponentIdCounter += 1}`;\n      const modalData = {\n        component,\n        id,\n        props: Utils.extend({\n          f7route: options.route,\n          $f7route: options.route,\n          f7router: router,\n          $f7router: router\n        }, options.route.params, options.props || {})\n      };\n\n      if (modalsRouter.component) {\n        modalsRouter.component.$f7router = router;\n        modalsRouter.component.$f7route = options.route;\n      }\n\n      let resolved;\n\n      function onDidUpdate() {\n        if (resolved) return;\n        f7.events.off('modalsRouterDidUpdate', onDidUpdate);\n        const modalEl = modalsRouter.el.children[modalsRouter.el.children.length - 1];\n        modalData.el = modalEl;\n        resolve(modalEl);\n        resolved = true;\n      }\n\n      f7.events.on('modalsRouterDidUpdate', onDidUpdate);\n      modalsRouter.modals.push(modalData);\n      modalsRouter.setModals(modalsRouter.modals);\n    },\n\n    removeModal(modalEl) {\n      const modalsRouter = f7.routers.modals;\n      if (!modalsRouter) return;\n      let modalDataToRemove;\n      modalsRouter.modals.forEach(modalData => {\n        if (modalData.el === modalEl) modalDataToRemove = modalData;\n      });\n      modalsRouter.modals.splice(modalsRouter.modals.indexOf(modalDataToRemove), 1);\n      modalsRouter.setModals(modalsRouter.modals);\n    }\n\n  }\n};","map":null,"metadata":{},"sourceType":"module"}