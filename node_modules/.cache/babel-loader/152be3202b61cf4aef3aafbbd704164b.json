{"ast":null,"code":"import React, { useState, useEffect, useRef, forwardRef, useImperativeHandle } from 'react';\nimport { mergeProps } from '../../utils/with-default-props';\nimport { withNativeProps } from '../../utils/native-props';\nimport classNames from 'classnames';\nimport { bound } from '../../utils/bound';\nimport { usePropsValue } from '../../utils/use-props-value';\nimport { useConfig } from '../config-provider';\nconst classPrefix = 'adm-passcode-input';\nconst defaultProps = {\n  defaultValue: '',\n  length: 6,\n  plain: false,\n  error: false,\n  seperated: false,\n  caret: true\n};\nexport const PasscodeInput = forwardRef((p, ref) => {\n  const props = mergeProps(defaultProps, p); // 防止 length 值不合法\n\n  const cellLength = props.length > 0 && props.length < Infinity ? Math.floor(props.length) : defaultProps.length;\n  const {\n    locale\n  } = useConfig();\n  const [focused, setFocused] = useState(false);\n  const [value, setValue] = usePropsValue(props);\n  const rootRef = useRef(null);\n  const nativeInputRef = useRef(null);\n  useEffect(() => {\n    var _a;\n\n    if (value.length >= cellLength) {\n      (_a = props.onFill) === null || _a === void 0 ? void 0 : _a.call(props, value);\n    }\n  }, [value, cellLength]);\n\n  const onFocus = () => {\n    var _a, _b;\n\n    if (!props.keyboard) {\n      (_a = nativeInputRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n\n    setFocused(true);\n    (_b = props.onFocus) === null || _b === void 0 ? void 0 : _b.call(props);\n  };\n\n  useEffect(() => {\n    if (!focused) return;\n    const timeout = window.setTimeout(() => {\n      var _a;\n\n      (_a = rootRef.current) === null || _a === void 0 ? void 0 : _a.scrollIntoView({\n        block: 'center',\n        inline: 'center',\n        behavior: 'smooth'\n      });\n    }, 100);\n    return () => {\n      window.clearTimeout(timeout);\n    };\n  }, [focused]);\n\n  const onBlur = () => {\n    var _a;\n\n    setFocused(false);\n    (_a = props.onBlur) === null || _a === void 0 ? void 0 : _a.call(props);\n  };\n\n  useImperativeHandle(ref, () => ({\n    focus: () => {\n      var _a;\n\n      return (_a = rootRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n    },\n    blur: () => {\n      var _a, _b;\n\n      (_a = rootRef.current) === null || _a === void 0 ? void 0 : _a.blur();\n      (_b = nativeInputRef.current) === null || _b === void 0 ? void 0 : _b.blur();\n    }\n  }));\n\n  const renderCells = () => {\n    const cells = [];\n    const chars = value.split('');\n    const caretIndex = chars.length; // 光标位置index等于当前文字长度\n\n    const focusedIndex = bound(chars.length, 0, cellLength - 1);\n\n    for (let i = 0; i < cellLength; i++) {\n      cells.push(React.createElement(\"div\", {\n        className: classNames(`${classPrefix}-cell`, {\n          [`${classPrefix}-cell-caret`]: props.caret && caretIndex === i && focused,\n          [`${classPrefix}-cell-focused`]: focusedIndex === i && focused,\n          [`${classPrefix}-cell-dot`]: !props.plain && chars[i]\n        }),\n        key: i\n      }, chars[i] && props.plain ? chars[i] : ''));\n    }\n\n    return cells;\n  };\n\n  const cls = classNames(classPrefix, {\n    [`${classPrefix}-focused`]: focused,\n    [`${classPrefix}-error`]: props.error,\n    [`${classPrefix}-seperated`]: props.seperated\n  });\n  return React.createElement(React.Fragment, null, withNativeProps(props, React.createElement(\"div\", {\n    ref: rootRef,\n    tabIndex: 0,\n    className: cls,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    role: 'button',\n    \"aria-label\": locale.PasscodeInput.name\n  }, React.createElement(\"div\", {\n    className: `${classPrefix}-cell-container`\n  }, renderCells()), React.createElement(\"input\", {\n    ref: nativeInputRef,\n    className: `${classPrefix}-native-input`,\n    value: value,\n    type: 'text',\n    pattern: '[0-9]*',\n    inputMode: 'numeric',\n    onChange: e => {\n      setValue(e.target.value.slice(0, props.length));\n    },\n    \"aria-hidden\": true\n  }))), props.keyboard && React.cloneElement(props.keyboard, {\n    visible: focused,\n    onInput: v => {\n      if (value.length < cellLength) {\n        setValue((value + v).slice(0, props.length));\n      }\n    },\n    onDelete: () => {\n      setValue(value.slice(0, -1));\n    },\n    onClose: () => {\n      var _a;\n\n      (_a = rootRef.current) === null || _a === void 0 ? void 0 : _a.blur();\n    }\n  }));\n});","map":null,"metadata":{},"sourceType":"module"}