{"ast":null,"code":"function processQueue(router, routerQueue, routeQueue, to, from, resolve, reject) {\n  const queue = [];\n\n  if (Array.isArray(routeQueue)) {\n    queue.push(...routeQueue);\n  } else if (routeQueue && typeof routeQueue === 'function') {\n    queue.push(routeQueue);\n  }\n\n  if (routerQueue) {\n    if (Array.isArray(routerQueue)) {\n      queue.push(...routerQueue);\n    } else {\n      queue.push(routerQueue);\n    }\n  }\n\n  function next() {\n    if (queue.length === 0) {\n      resolve();\n      return;\n    }\n\n    const queueItem = queue.shift();\n    queueItem.call(router, to, from, () => {\n      next();\n    }, () => {\n      reject();\n    });\n  }\n\n  next();\n}\n\nexport default function (to, from, resolve, reject) {\n  const router = this;\n\n  function enterNextRoute() {\n    if (to && to.route && (router.params.routesBeforeEnter || to.route.beforeEnter)) {\n      router.allowPageChange = false;\n      processQueue(router, router.params.routesBeforeEnter, to.route.beforeEnter, to, from, () => {\n        router.allowPageChange = true;\n        resolve();\n      }, () => {\n        reject();\n      });\n    } else {\n      resolve();\n    }\n  }\n\n  function leaveCurrentRoute() {\n    if (from && from.route && (router.params.routesBeforeLeave || from.route.beforeLeave)) {\n      router.allowPageChange = false;\n      processQueue(router, router.params.routesBeforeLeave, from.route.beforeLeave, to, from, () => {\n        router.allowPageChange = true;\n        enterNextRoute();\n      }, () => {\n        reject();\n      });\n    } else {\n      enterNextRoute();\n    }\n  }\n\n  leaveCurrentRoute();\n}","map":null,"metadata":{},"sourceType":"module"}