{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { mergeProps } from '../../utils/with-default-props';\nimport { animated, useSpring } from '@react-spring/web';\nimport { useDrag } from '@use-gesture/react';\nimport { getScrollParent } from '../../utils/get-scroll-parent';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { supportsPassive } from '../../utils/supports-passive';\nimport { convertPx } from '../../utils/convert-px';\nimport { rubberbandIfOutOfBounds } from '../../utils/rubberband';\nimport { useConfig } from '../config-provider';\nimport { sleep } from '../../utils/sleep';\nconst classPrefix = `adm-pull-to-refresh`;\nexport const defaultProps = {\n  pullingText: '下拉刷新',\n  canReleaseText: '释放立即刷新',\n  refreshingText: '加载中...',\n  completeText: '刷新成功',\n  completeDelay: 500,\n  disabled: false,\n  onRefresh: () => {}\n};\nexport const PullToRefresh = p => {\n  var _a, _b;\n\n  const {\n    locale\n  } = useConfig();\n  const props = mergeProps(defaultProps, {\n    refreshingText: `${locale.common.loading}...`,\n    pullingText: locale.PullToRefresh.pulling,\n    canReleaseText: locale.PullToRefresh.canRelease,\n    completeText: locale.PullToRefresh.complete\n  }, p);\n  const headHeight = (_a = props.headHeight) !== null && _a !== void 0 ? _a : convertPx(40);\n  const threshold = (_b = props.threshold) !== null && _b !== void 0 ? _b : convertPx(60);\n  const [status, setStatus] = useState('pulling');\n  const [springStyles, api] = useSpring(() => ({\n    from: {\n      height: 0\n    },\n    config: {\n      tension: 300,\n      friction: 30,\n      clamp: true\n    }\n  }));\n  const elementRef = useRef(null);\n  const pullingRef = useRef(false); //防止下拉时抖动\n\n  useEffect(() => {\n    var _a;\n\n    (_a = elementRef.current) === null || _a === void 0 ? void 0 : _a.addEventListener('touchmove', () => {});\n  }, []);\n\n  const reset = () => {\n    return new Promise(resolve => {\n      api.start({\n        to: {\n          height: 0\n        },\n\n        onResolve() {\n          setStatus('pulling');\n          resolve();\n        }\n\n      });\n    });\n  };\n\n  function doRefresh() {\n    return __awaiter(this, void 0, void 0, function* () {\n      api.start({\n        height: headHeight\n      });\n      setStatus('refreshing');\n\n      try {\n        yield props.onRefresh();\n        setStatus('complete');\n      } catch (e) {\n        reset();\n        throw e;\n      }\n\n      if (props.completeDelay > 0) {\n        yield sleep(props.completeDelay);\n      }\n\n      reset();\n    });\n  }\n\n  useDrag(state => {\n    if (status === 'refreshing' || status === 'complete') return;\n    const {\n      event\n    } = state;\n\n    if (state.last) {\n      pullingRef.current = false;\n\n      if (status === 'canRelease') {\n        doRefresh();\n      } else {\n        api.start({\n          height: 0\n        });\n      }\n\n      return;\n    }\n\n    const [, y] = state.movement;\n\n    if (state.first && y > 0) {\n      const target = state.event.target;\n      if (!target || !(target instanceof Element)) return;\n      let scrollParent = getScrollParent(target);\n\n      while (true) {\n        if (!scrollParent) return;\n        const scrollTop = getScrollTop(scrollParent);\n\n        if (scrollTop > 0) {\n          return;\n        }\n\n        if (scrollParent instanceof Window) {\n          break;\n        }\n\n        scrollParent = getScrollParent(scrollParent.parentNode);\n      }\n\n      pullingRef.current = true;\n\n      function getScrollTop(element) {\n        return 'scrollTop' in element ? element.scrollTop : element.scrollY;\n      }\n    }\n\n    if (!pullingRef.current) return;\n\n    if (event.cancelable) {\n      event.preventDefault();\n    }\n\n    event.stopPropagation();\n    const height = Math.max(rubberbandIfOutOfBounds(y, 0, 0, headHeight * 5, 0.5), 0);\n    api.start({\n      height\n    });\n    setStatus(height > threshold ? 'canRelease' : 'pulling');\n  }, {\n    pointer: {\n      touch: true\n    },\n    axis: 'y',\n    target: elementRef,\n    enabled: !props.disabled,\n    eventOptions: supportsPassive ? {\n      passive: false\n    } : false\n  });\n\n  const renderStatusText = () => {\n    var _a;\n\n    if (props.renderText) {\n      return (_a = props.renderText) === null || _a === void 0 ? void 0 : _a.call(props, status);\n    }\n\n    if (status === 'pulling') return props.pullingText;\n    if (status === 'canRelease') return props.canReleaseText;\n    if (status === 'refreshing') return props.refreshingText;\n    if (status === 'complete') return props.completeText;\n  };\n\n  return React.createElement(animated.div, {\n    ref: elementRef,\n    className: classPrefix\n  }, React.createElement(animated.div, {\n    style: springStyles,\n    className: `${classPrefix}-head`\n  }, React.createElement(\"div\", {\n    className: `${classPrefix}-head-content`,\n    style: {\n      height: headHeight\n    }\n  }, renderStatusText())), React.createElement(\"div\", {\n    className: `${classPrefix}-content`\n  }, props.children));\n};","map":null,"metadata":{},"sourceType":"module"}