{"ast":null,"code":"import classNames from 'classnames';\nimport React, { useState, useRef } from 'react';\nimport { useIsomorphicLayoutEffect, useUnmountedRef } from 'ahooks';\nimport { withNativeProps } from '../../utils/native-props';\nimport { mergeProps } from '../../utils/with-default-props';\nimport Mask from '../mask';\nimport { useLockScroll } from '../../utils/use-lock-scroll';\nimport { renderToContainer } from '../../utils/render-to-container';\nimport { useSpring, animated } from '@react-spring/web';\nimport { withStopPropagation } from '../../utils/with-stop-propagation';\nimport { ShouldRender } from '../../utils/should-render';\nimport { CloseOutline } from 'antd-mobile-icons';\nimport { defaultPopupBaseProps } from './popup-base-props';\nimport { useInnerVisible } from '../../utils/use-inner-visible';\nimport { useConfig } from '../config-provider';\nimport { useDrag } from '@use-gesture/react';\nconst classPrefix = `adm-popup`;\nconst defaultProps = Object.assign(Object.assign({}, defaultPopupBaseProps), {\n  position: 'bottom'\n});\nexport const Popup = p => {\n  const props = mergeProps(defaultProps, p);\n  const {\n    locale\n  } = useConfig();\n  const bodyCls = classNames(`${classPrefix}-body`, props.bodyClassName, `${classPrefix}-body-position-${props.position}`);\n  const [active, setActive] = useState(props.visible);\n  useIsomorphicLayoutEffect(() => {\n    if (props.visible) {\n      setActive(true);\n    }\n  }, [props.visible]);\n  const ref = useRef(null);\n  useLockScroll(ref, props.disableBodyScroll && active ? 'strict' : false);\n  const unmountedRef = useUnmountedRef();\n  const {\n    percent\n  } = useSpring({\n    percent: props.visible ? 0 : 100,\n    config: {\n      precision: 0.1,\n      mass: 0.4,\n      tension: 300,\n      friction: 30\n    },\n    onRest: () => {\n      var _a, _b;\n\n      if (unmountedRef.current) return;\n      setActive(props.visible);\n\n      if (props.visible) {\n        (_a = props.afterShow) === null || _a === void 0 ? void 0 : _a.call(props);\n      } else {\n        (_b = props.afterClose) === null || _b === void 0 ? void 0 : _b.call(props);\n      }\n    }\n  });\n  const bind = useDrag(_ref => {\n    let {\n      swipe: [, swipeY]\n    } = _ref;\n\n    var _a;\n\n    if (swipeY === 1 && props.position === 'bottom' || swipeY === -1 && props.position === 'top') {\n      (_a = props.onClose) === null || _a === void 0 ? void 0 : _a.call(props);\n    }\n  }, {\n    axis: 'y',\n    enabled: ['top', 'bottom'].includes(props.position)\n  });\n  const maskVisible = useInnerVisible(active && props.visible);\n  const node = withStopPropagation(props.stopPropagation, withNativeProps(props, React.createElement(\"div\", Object.assign({\n    className: classPrefix,\n    onClick: props.onClick,\n    style: {\n      display: active ? undefined : 'none',\n      touchAction: ['top', 'bottom'].includes(props.position) ? 'none' : 'auto'\n    }\n  }, bind()), props.mask && React.createElement(Mask, {\n    visible: maskVisible,\n    forceRender: props.forceRender,\n    destroyOnClose: props.destroyOnClose,\n    onMaskClick: e => {\n      var _a, _b;\n\n      (_a = props.onMaskClick) === null || _a === void 0 ? void 0 : _a.call(props, e);\n\n      if (props.closeOnMaskClick) {\n        (_b = props.onClose) === null || _b === void 0 ? void 0 : _b.call(props);\n      }\n    },\n    className: props.maskClassName,\n    style: props.maskStyle,\n    disableBodyScroll: false,\n    stopPropagation: props.stopPropagation\n  }), React.createElement(animated.div, {\n    className: bodyCls,\n    style: Object.assign(Object.assign({}, props.bodyStyle), {\n      transform: percent.to(v => {\n        if (props.position === 'bottom') {\n          return `translate(0, ${v}%)`;\n        }\n\n        if (props.position === 'top') {\n          return `translate(0, -${v}%)`;\n        }\n\n        if (props.position === 'left') {\n          return `translate(-${v}%, 0)`;\n        }\n\n        if (props.position === 'right') {\n          return `translate(${v}%, 0)`;\n        }\n\n        return 'none';\n      })\n    }),\n    ref: ref\n  }, props.showCloseButton && React.createElement(\"a\", {\n    className: classNames(`${classPrefix}-close-icon`, 'adm-plain-anchor'),\n    onClick: () => {\n      var _a;\n\n      (_a = props.onClose) === null || _a === void 0 ? void 0 : _a.call(props);\n    },\n    role: 'button',\n    \"aria-label\": locale.common.close\n  }, React.createElement(CloseOutline, null)), props.children))));\n  return React.createElement(ShouldRender, {\n    active: active,\n    forceRender: props.forceRender,\n    destroyOnClose: props.destroyOnClose\n  }, renderToContainer(props.getContainer, node));\n};","map":null,"metadata":{},"sourceType":"module"}