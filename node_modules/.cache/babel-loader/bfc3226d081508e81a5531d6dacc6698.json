{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { mergeProps } from '../../utils/with-default-props';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useLockFn, useThrottleFn } from 'ahooks';\nimport { withNativeProps } from '../../utils/native-props';\nimport { getScrollParent } from '../../utils/get-scroll-parent';\nimport { useConfig } from '../config-provider';\nimport DotLoading from '../dot-loading';\n\nfunction isWindow(element) {\n  return element === window;\n}\n\nconst classPrefix = `adm-infinite-scroll`;\nconst defaultProps = {\n  threshold: 250,\n  children: (hasMore, failed, retry) => React.createElement(InfiniteScrollContent, {\n    hasMore: hasMore,\n    failed: failed,\n    retry: retry\n  })\n};\nexport const InfiniteScroll = p => {\n  const props = mergeProps(defaultProps, p);\n  const [failed, setFailed] = useState(false);\n  const doLoadMore = useLockFn(isRetry => __awaiter(void 0, void 0, void 0, function* () {\n    try {\n      yield props.loadMore(isRetry);\n    } catch (e) {\n      setFailed(true);\n      throw e;\n    }\n  }));\n  const elementRef = useRef(null); // Prevent duplicated trigger of `check` function\n\n  const [flag, setFlag] = useState({});\n  const nextFlagRef = useRef(flag);\n  const [scrollParent, setScrollParent] = useState();\n  const {\n    run: check\n  } = useThrottleFn(() => __awaiter(void 0, void 0, void 0, function* () {\n    if (nextFlagRef.current !== flag) return;\n    if (!props.hasMore) return;\n    const element = elementRef.current;\n    if (!element) return;\n    if (!element.offsetParent) return;\n    const parent = getScrollParent(element);\n    setScrollParent(parent);\n    if (!parent) return;\n    const rect = element.getBoundingClientRect();\n    const elementTop = rect.top;\n    const current = isWindow(parent) ? window.innerHeight : parent.getBoundingClientRect().bottom;\n\n    if (current >= elementTop - props.threshold) {\n      const nextFlag = {};\n      nextFlagRef.current = nextFlag;\n      yield doLoadMore(false);\n      setFlag(nextFlag);\n    }\n  }), {\n    wait: 100,\n    leading: true,\n    trailing: true\n  }); // Make sure to trigger `loadMore` when content changes\n\n  useEffect(() => {\n    check();\n  });\n  useEffect(() => {\n    const element = elementRef.current;\n    if (!element) return;\n    if (!scrollParent) return;\n\n    function onScroll() {\n      check();\n    }\n\n    scrollParent.addEventListener('scroll', onScroll);\n    return () => {\n      scrollParent.removeEventListener('scroll', onScroll);\n    };\n  }, [scrollParent]);\n\n  function retry() {\n    return __awaiter(this, void 0, void 0, function* () {\n      setFailed(false);\n      yield doLoadMore(true);\n      setFlag(nextFlagRef.current);\n    });\n  }\n\n  return withNativeProps(props, React.createElement(\"div\", {\n    className: classPrefix,\n    ref: elementRef\n  }, typeof props.children === 'function' ? props.children(props.hasMore, failed, retry) : props.children));\n};\n\nconst InfiniteScrollContent = props => {\n  const {\n    locale\n  } = useConfig();\n\n  if (!props.hasMore) {\n    return React.createElement(\"span\", null, locale.InfiniteScroll.noMore);\n  }\n\n  if (props.failed) {\n    return React.createElement(\"span\", null, React.createElement(\"span\", {\n      className: `${classPrefix}-failed-text`\n    }, locale.InfiniteScroll.failedToLoad), React.createElement(\"a\", {\n      onClick: () => {\n        props.retry();\n      }\n    }, locale.InfiniteScroll.retry));\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(\"span\", null, locale.common.loading), React.createElement(DotLoading, null));\n};","map":null,"metadata":{},"sourceType":"module"}