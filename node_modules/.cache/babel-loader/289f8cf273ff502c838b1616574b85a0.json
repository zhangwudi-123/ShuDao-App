{"ast":null,"code":"import $ from 'dom7';\nexport default {\n  render(self) {\n    const {\n      barLabel,\n      barValue,\n      barValueEditable,\n      redLabelText,\n      greenLabelText,\n      blueLabelText\n    } = self.params;\n    return `\n      <div class=\"color-picker-module color-picker-module-rgb-bars\">\n        <div class=\"color-picker-bar-wrap\">\n          ${barLabel ? `\n            <div class=\"color-picker-bar-label\">${redLabelText}</div>\n          ` : ''}\n          <div class=\"range-slider color-picker-bar color-picker-bar-red\"></div>\n          ${barValue ? `\n            <div class=\"color-picker-bar-value\">\n              ${barValueEditable ? `\n                <input type=\"number\" step=\"1\" min=\"0\" max=\"255\" class=\"color-picker-value-bar-red\" data-color-index=\"0\">\n              ` : `\n                <span class=\"color-picker-value-bar-red\"></span>\n              `}\n            </div>\n          ` : ''}\n        </div>\n        <div class=\"color-picker-bar-wrap\">\n          ${barLabel ? `\n            <div class=\"color-picker-bar-label\">${greenLabelText}</div>\n          ` : ''}\n          <div class=\"range-slider color-picker-bar color-picker-bar-green\"></div>\n          ${barValue ? `\n            <div class=\"color-picker-bar-value\">\n              ${barValueEditable ? `\n                <input type=\"number\" step=\"1\" min=\"0\" max=\"255\" class=\"color-picker-value-bar-green\" data-color-index=\"1\">\n              ` : `\n                <span class=\"color-picker-value-bar-green\"></span>\n              `}\n            </div>\n          ` : ''}\n        </div>\n        <div class=\"color-picker-bar-wrap\">\n          ${barLabel ? `\n            <div class=\"color-picker-bar-label\">${blueLabelText}</div>\n          ` : ''}\n          <div class=\"range-slider color-picker-bar color-picker-bar-blue\"></div>\n          ${barValue ? `\n            <div class=\"color-picker-bar-value\">\n              ${barValueEditable ? `\n                <input type=\"number\" step=\"1\" min=\"0\" max=\"255\" class=\"color-picker-value-bar-blue\" data-color-index=\"2\">\n              ` : `\n                <span class=\"color-picker-value-bar-blue\"></span>\n              `}\n            </div>\n          ` : ''}\n        </div>\n      </div>\n    `;\n  },\n\n  init(self) {\n    self.redBar = self.app.range.create({\n      el: self.$el.find('.color-picker-bar-red'),\n      min: 0,\n      max: 255,\n      step: 1,\n      value: 0,\n      vertical: true,\n      on: {\n        change(range, value) {\n          self.setValue({\n            rgb: [value, self.value.rgb[1], self.value.rgb[2]]\n          });\n        }\n\n      }\n    });\n    self.greenBar = self.app.range.create({\n      el: self.$el.find('.color-picker-bar-green'),\n      min: 0,\n      max: 255,\n      step: 1,\n      value: 0,\n      vertical: true,\n      on: {\n        change(range, value) {\n          self.setValue({\n            rgb: [self.value.rgb[0], value, self.value.rgb[2]]\n          });\n        }\n\n      }\n    });\n    self.blueBar = self.app.range.create({\n      el: self.$el.find('.color-picker-bar-blue'),\n      min: 0,\n      max: 255,\n      step: 1,\n      value: 0,\n      vertical: true,\n      on: {\n        change(range, value) {\n          self.setValue({\n            rgb: [self.value.rgb[0], self.value.rgb[1], value]\n          });\n        }\n\n      }\n    });\n\n    function handleInputChange(e) {\n      const rgb = [...self.value.rgb];\n      const index = parseInt($(e.target).attr('data-color-index'), 10);\n      let value = parseInt(e.target.value, 10);\n\n      if (Number.isNaN(value)) {\n        e.target.value = rgb[index];\n        return;\n      }\n\n      value = Math.max(0, Math.min(255, value));\n      rgb[index] = value;\n      self.setValue({\n        rgb\n      });\n    }\n\n    self.$el.on('change', '.color-picker-module-rgb-bars input', handleInputChange);\n\n    self.destroyRgbBarsEvents = function destroyRgbBarsEvents() {\n      self.$el.off('change', '.color-picker-module-rgb-bars input', handleInputChange);\n    };\n  },\n\n  update(self) {\n    const {\n      value,\n      redBar,\n      greenBar,\n      blueBar\n    } = self;\n    const {\n      barValue,\n      barValueEditable\n    } = self.params;\n    const {\n      rgb\n    } = value;\n    redBar.value = rgb[0];\n    greenBar.value = rgb[1];\n    blueBar.value = rgb[2];\n    redBar.layout();\n    greenBar.layout();\n    blueBar.layout();\n    redBar.$el.find('.range-bar').css('background-image', `linear-gradient(to top, rgb(0, ${rgb[1]}, ${rgb[2]}), rgb(255, ${rgb[1]}, ${rgb[2]}))`);\n    greenBar.$el.find('.range-bar').css('background-image', `linear-gradient(to top, rgb(${rgb[0]}, 0, ${rgb[2]}), rgb(${rgb[0]}, 255, ${rgb[2]}))`);\n    blueBar.$el.find('.range-bar').css('background-image', `linear-gradient(to top, rgb(${rgb[0]}, ${rgb[1]}, 0), rgb(${rgb[0]}, ${rgb[1]}, 255))`);\n\n    if (barValue && barValueEditable) {\n      self.$el.find('input.color-picker-value-bar-red').val(rgb[0]);\n      self.$el.find('input.color-picker-value-bar-green').val(rgb[1]);\n      self.$el.find('input.color-picker-value-bar-blue').val(rgb[2]);\n    } else if (barValue) {\n      self.$el.find('span.color-picker-value-bar-red').text(rgb[0]);\n      self.$el.find('span.color-picker-value-bar-green').text(rgb[1]);\n      self.$el.find('span.color-picker-value-bar-blue').text(rgb[2]);\n    }\n  },\n\n  destroy(self) {\n    if (self.redBar && self.redBar.destroy) {\n      self.redBar.destroy();\n    }\n\n    if (self.greenBar && self.greenBar.destroy) {\n      self.greenBar.destroy();\n    }\n\n    if (self.blueBar && self.blueBar.destroy) {\n      self.blueBar.destroy();\n    }\n\n    delete self.redBar;\n    delete self.greenBar;\n    delete self.blueBar;\n    if (self.destroyRgbBarsEvents) self.destroyRgbBarsEvents();\n    delete self.destroyRgbBarsEvents;\n  }\n\n};","map":null,"metadata":{},"sourceType":"module"}