{"ast":null,"code":"import { __assign, __read } from \"tslib\";\nimport { useEffect, useState } from 'react';\nimport { isObject } from '../utils';\nvar NetworkEventType;\n\n(function (NetworkEventType) {\n  NetworkEventType[\"ONLINE\"] = \"online\";\n  NetworkEventType[\"OFFLINE\"] = \"offline\";\n  NetworkEventType[\"CHANGE\"] = \"change\";\n})(NetworkEventType || (NetworkEventType = {}));\n\nfunction getConnection() {\n  var nav = navigator;\n  if (!isObject(nav)) return null;\n  return nav.connection || nav.mozConnection || nav.webkitConnection;\n}\n\nfunction getConnectionProperty() {\n  var c = getConnection();\n  if (!c) return {};\n  return {\n    rtt: c.rtt,\n    type: c.type,\n    saveData: c.saveData,\n    downlink: c.downlink,\n    downlinkMax: c.downlinkMax,\n    effectiveType: c.effectiveType\n  };\n}\n\nfunction useNetwork() {\n  var _a = __read(useState(function () {\n    return __assign({\n      since: undefined,\n      online: navigator === null || navigator === void 0 ? void 0 : navigator.onLine\n    }, getConnectionProperty());\n  }), 2),\n      state = _a[0],\n      setState = _a[1];\n\n  useEffect(function () {\n    var onOnline = function () {\n      setState(function (prevState) {\n        return __assign(__assign({}, prevState), {\n          online: true,\n          since: new Date()\n        });\n      });\n    };\n\n    var onOffline = function () {\n      setState(function (prevState) {\n        return __assign(__assign({}, prevState), {\n          online: false,\n          since: new Date()\n        });\n      });\n    };\n\n    var onConnectionChange = function () {\n      setState(function (prevState) {\n        return __assign(__assign({}, prevState), getConnectionProperty());\n      });\n    };\n\n    window.addEventListener(NetworkEventType.ONLINE, onOnline);\n    window.addEventListener(NetworkEventType.OFFLINE, onOffline);\n    var connection = getConnection();\n    connection === null || connection === void 0 ? void 0 : connection.addEventListener(NetworkEventType.CHANGE, onConnectionChange);\n    return function () {\n      window.removeEventListener(NetworkEventType.ONLINE, onOnline);\n      window.removeEventListener(NetworkEventType.OFFLINE, onOffline);\n      connection === null || connection === void 0 ? void 0 : connection.removeEventListener(NetworkEventType.CHANGE, onConnectionChange);\n    };\n  }, []);\n  return state;\n}\n\nexport default useNetwork;","map":null,"metadata":{},"sourceType":"module"}