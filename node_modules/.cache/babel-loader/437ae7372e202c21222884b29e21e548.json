{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport React from 'react';\nimport Utils from '../utils/utils';\nimport Mixins from '../utils/mixins';\nimport __reactComponentDispatchEvent from '../runtime-helpers/react-component-dispatch-event.js';\nimport __reactComponentSlots from '../runtime-helpers/react-component-slots.js';\nimport __reactComponentSetProps from '../runtime-helpers/react-component-set-props.js';\n\nvar F7Searchbar = /*#__PURE__*/function (_React$Component) {\n  _inherits(F7Searchbar, _React$Component);\n\n  function F7Searchbar(props, context) {\n    var _this;\n\n    _classCallCheck(this, F7Searchbar);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(F7Searchbar).call(this, props, context));\n    _this.__reactRefs = {};\n\n    (function () {\n      Utils.bindMethods(_assertThisInitialized(_this), ['onSubmit', 'onClearButtonClick', 'onDisableButtonClick', 'onInput', 'onChange', 'onFocus', 'onBlur']);\n    })();\n\n    return _this;\n  }\n\n  _createClass(F7Searchbar, [{\n    key: \"search\",\n    value: function search(query) {\n      if (!this.f7Searchbar) return undefined;\n      return this.f7Searchbar.search(query);\n    }\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      if (!this.f7Searchbar) return undefined;\n      return this.f7Searchbar.enable();\n    }\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      if (!this.f7Searchbar) return undefined;\n      return this.f7Searchbar.disable();\n    }\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      if (!this.f7Searchbar) return undefined;\n      return this.toggle.disable();\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      if (!this.f7Searchbar) return undefined;\n      return this.f7Searchbar.clear();\n    }\n  }, {\n    key: \"onChange\",\n    value: function onChange(event) {\n      this.dispatchEvent('change', event);\n    }\n  }, {\n    key: \"onInput\",\n    value: function onInput(event) {\n      this.dispatchEvent('input', event);\n    }\n  }, {\n    key: \"onFocus\",\n    value: function onFocus(event) {\n      this.dispatchEvent('focus', event);\n    }\n  }, {\n    key: \"onBlur\",\n    value: function onBlur(event) {\n      this.dispatchEvent('blur', event);\n    }\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(event) {\n      this.dispatchEvent('submit', event);\n    }\n  }, {\n    key: \"onClearButtonClick\",\n    value: function onClearButtonClick(event) {\n      this.dispatchEvent('click:clear clickClear', event);\n    }\n  }, {\n    key: \"onDisableButtonClick\",\n    value: function onDisableButtonClick(event) {\n      this.dispatchEvent('click:disable clickDisable', event);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var self = this;\n      var clearEl;\n      var disableEl;\n      var props = self.props;\n      var placeholder = props.placeholder,\n          clearButton = props.clearButton,\n          disableButton = props.disableButton,\n          disableButtonText = props.disableButtonText,\n          form = props.form,\n          noShadow = props.noShadow,\n          noHairline = props.noHairline,\n          expandable = props.expandable,\n          className = props.className,\n          style = props.style,\n          id = props.id,\n          value = props.value,\n          inline = props.inline;\n\n      if (clearButton) {\n        clearEl = React.createElement('span', {\n          ref: function ref(__reactNode) {\n            _this2.__reactRefs['clearEl'] = __reactNode;\n          },\n          className: 'input-clear-button'\n        });\n      }\n\n      if (disableButton) {\n        disableEl = React.createElement('span', {\n          ref: function ref(__reactNode) {\n            _this2.__reactRefs['disableEl'] = __reactNode;\n          },\n          className: 'searchbar-disable-button'\n        }, disableButtonText);\n      }\n\n      var SearchbarTag = form ? 'form' : 'div';\n      var classes = Utils.classNames(className, 'searchbar', {\n        'searchbar-inline': inline,\n        'no-shadow': noShadow,\n        'no-hairline': noHairline,\n        'searchbar-expandable': expandable\n      }, Mixins.colorClasses(props));\n      var inputEl;\n      {\n        inputEl = React.createElement('input', {\n          ref: function ref(__reactNode) {\n            _this2.__reactRefs['inputEl'] = __reactNode;\n          },\n          value: value,\n          placeholder: placeholder,\n          type: 'search',\n          onInput: self.onInput,\n          onChange: self.onChange.bind(self),\n          onFocus: self.onFocus,\n          onBlur: self.onBlur\n        });\n      }\n      return React.createElement(SearchbarTag, {\n        ref: function ref(__reactNode) {\n          _this2.__reactRefs['el'] = __reactNode;\n        },\n        id: id,\n        style: style,\n        className: classes\n      }, this.slots['before-inner'], React.createElement('div', {\n        className: 'searchbar-inner'\n      }, this.slots['inner-start'], React.createElement('div', {\n        className: 'searchbar-input-wrap'\n      }, this.slots['input-wrap-start'], inputEl, React.createElement('i', {\n        className: 'searchbar-icon'\n      }), clearEl, this.slots['input-wrap-end']), disableEl, this.slots['inner-end'], this.slots['default']), this.slots['after-inner']);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var self = this;\n      var _self$refs = self.refs,\n          el = _self$refs.el,\n          clearEl = _self$refs.clearEl,\n          disableEl = _self$refs.disableEl;\n\n      if (self.props.form && el) {\n        el.removeEventListener('submit', self.onSubmit, false);\n      }\n\n      if (clearEl) {\n        clearEl.removeEventListener('click', self.onClearButtonClick);\n      }\n\n      if (disableEl) {\n        disableEl.removeEventListener('click', self.onDisableButtonClick);\n      }\n\n      if (self.f7Searchbar && self.f7Searchbar.destroy) self.f7Searchbar.destroy();\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var self = this;\n      var _self$props = self.props,\n          init = _self$props.init,\n          inputEvents = _self$props.inputEvents,\n          searchContainer = _self$props.searchContainer,\n          searchIn = _self$props.searchIn,\n          searchItem = _self$props.searchItem,\n          searchGroup = _self$props.searchGroup,\n          searchGroupTitle = _self$props.searchGroupTitle,\n          hideOnEnableEl = _self$props.hideOnEnableEl,\n          hideOnSearchEl = _self$props.hideOnSearchEl,\n          foundEl = _self$props.foundEl,\n          notFoundEl = _self$props.notFoundEl,\n          backdrop = _self$props.backdrop,\n          backdropEl = _self$props.backdropEl,\n          disableButton = _self$props.disableButton,\n          ignore = _self$props.ignore,\n          customSearch = _self$props.customSearch,\n          removeDiacritics = _self$props.removeDiacritics,\n          hideDividers = _self$props.hideDividers,\n          hideGroups = _self$props.hideGroups,\n          form = _self$props.form,\n          expandable = _self$props.expandable,\n          inline = _self$props.inline;\n      var _self$refs2 = self.refs,\n          el = _self$refs2.el,\n          clearEl = _self$refs2.clearEl,\n          disableEl = _self$refs2.disableEl;\n\n      if (form && el) {\n        el.addEventListener('submit', self.onSubmit, false);\n      }\n\n      if (clearEl) {\n        clearEl.addEventListener('click', self.onClearButtonClick);\n      }\n\n      if (disableEl) {\n        disableEl.addEventListener('click', self.onDisableButtonClick);\n      }\n\n      if (!init) return;\n      self.$f7ready(function () {\n        var params = Utils.noUndefinedProps({\n          el: self.refs.el,\n          inputEvents: inputEvents,\n          searchContainer: searchContainer,\n          searchIn: searchIn,\n          searchItem: searchItem,\n          searchGroup: searchGroup,\n          searchGroupTitle: searchGroupTitle,\n          hideOnEnableEl: hideOnEnableEl,\n          hideOnSearchEl: hideOnSearchEl,\n          foundEl: foundEl,\n          notFoundEl: notFoundEl,\n          backdrop: backdrop,\n          backdropEl: backdropEl,\n          disableButton: disableButton,\n          ignore: ignore,\n          customSearch: customSearch,\n          removeDiacritics: removeDiacritics,\n          hideDividers: hideDividers,\n          hideGroups: hideGroups,\n          expandable: expandable,\n          inline: inline,\n          on: {\n            search: function search(searchbar, query, previousQuery) {\n              self.dispatchEvent('searchbar:search searchbarSearch', searchbar, query, previousQuery);\n            },\n            clear: function clear(searchbar, previousQuery) {\n              self.dispatchEvent('searchbar:clear searchbarClear', searchbar, previousQuery);\n            },\n            enable: function enable(searchbar) {\n              self.dispatchEvent('searchbar:enable searchbarEnable', searchbar);\n            },\n            disable: function disable(searchbar) {\n              self.dispatchEvent('searchbar:disable searchbarDisable', searchbar);\n            }\n          }\n        });\n        Object.keys(params).forEach(function (key) {\n          if (params[key] === '') {\n            delete params[key];\n          }\n        });\n        self.f7Searchbar = self.$f7.searchbar.create(params);\n      });\n    }\n  }, {\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(events) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return __reactComponentDispatchEvent.apply(void 0, [this, events].concat(args));\n    }\n  }, {\n    key: \"slots\",\n    get: function get() {\n      return __reactComponentSlots(this.props);\n    }\n  }, {\n    key: \"refs\",\n    get: function get() {\n      return this.__reactRefs;\n    },\n    set: function set(refs) {}\n  }]);\n\n  return F7Searchbar;\n}(React.Component);\n\n__reactComponentSetProps(F7Searchbar, Object.assign({\n  id: [String, Number],\n  className: String,\n  style: Object,\n  noShadow: Boolean,\n  noHairline: Boolean,\n  form: {\n    type: Boolean,\n    default: true\n  },\n  placeholder: {\n    type: String,\n    default: 'Search'\n  },\n  disableButton: {\n    type: Boolean,\n    default: true\n  },\n  disableButtonText: {\n    type: String,\n    default: 'Cancel'\n  },\n  clearButton: {\n    type: Boolean,\n    default: true\n  },\n  value: [String, Number, Array],\n  inputEvents: {\n    type: String,\n    default: 'change input compositionend'\n  },\n  expandable: Boolean,\n  inline: Boolean,\n  searchContainer: [String, Object],\n  searchIn: {\n    type: String,\n    default: '.item-title'\n  },\n  searchItem: {\n    type: String,\n    default: 'li'\n  },\n  searchGroup: {\n    type: String,\n    default: '.list-group'\n  },\n  searchGroupTitle: {\n    type: String,\n    default: '.item-divider, .list-group-title'\n  },\n  foundEl: {\n    type: [String, Object],\n    default: '.searchbar-found'\n  },\n  notFoundEl: {\n    type: [String, Object],\n    default: '.searchbar-not-found'\n  },\n  backdrop: {\n    type: Boolean,\n    default: undefined\n  },\n  backdropEl: [String, Object],\n  hideOnEnableEl: {\n    type: [String, Object],\n    default: '.searchbar-hide-on-enable'\n  },\n  hideOnSearchEl: {\n    type: [String, Object],\n    default: '.searchbar-hide-on-search'\n  },\n  ignore: {\n    type: String,\n    default: '.searchbar-ignore'\n  },\n  customSearch: {\n    type: Boolean,\n    default: false\n  },\n  removeDiacritics: {\n    type: Boolean,\n    default: false\n  },\n  hideDividers: {\n    type: Boolean,\n    default: true\n  },\n  hideGroups: {\n    type: Boolean,\n    default: true\n  },\n  init: {\n    type: Boolean,\n    default: true\n  }\n}, Mixins.colorProps));\n\nF7Searchbar.displayName = 'f7-searchbar';\nexport default F7Searchbar;","map":null,"metadata":{},"sourceType":"module"}