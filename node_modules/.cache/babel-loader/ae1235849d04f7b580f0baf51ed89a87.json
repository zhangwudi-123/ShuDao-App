{"ast":null,"code":"import $ from 'dom7';\nimport Utils from '../../utils/utils';\nconst fetchedModules = [];\n\nfunction loadModule(moduleToLoad) {\n  const Framework7 = this;\n  return new Promise((resolve, reject) => {\n    const app = Framework7.instance;\n    let modulePath;\n    let moduleObj;\n    let moduleFunc;\n\n    if (!moduleToLoad) {\n      reject(new Error('Framework7: Lazy module must be specified'));\n      return;\n    }\n\n    function install(module) {\n      Framework7.use(module);\n\n      if (app) {\n        app.useModuleParams(module, app.params);\n        app.useModule(module);\n      }\n    }\n\n    if (typeof moduleToLoad === 'string') {\n      const matchNamePattern = moduleToLoad.match(/([a-z0-9-]*)/i);\n\n      if (moduleToLoad.indexOf('.') < 0 && matchNamePattern && matchNamePattern[0].length === moduleToLoad.length) {\n        if (!app || app && !app.params.lazyModulesPath) {\n          reject(new Error('Framework7: \"lazyModulesPath\" app parameter must be specified to fetch module by name'));\n          return;\n        }\n\n        modulePath = `${app.params.lazyModulesPath}/${moduleToLoad}.js`;\n      } else {\n        modulePath = moduleToLoad;\n      }\n    } else if (typeof moduleToLoad === 'function') {\n      moduleFunc = moduleToLoad;\n    } else {\n      // considering F7-Plugin object\n      moduleObj = moduleToLoad;\n    }\n\n    if (moduleFunc) {\n      const module = moduleFunc(Framework7, false);\n\n      if (!module) {\n        reject(new Error('Framework7: Can\\'t find Framework7 component in specified component function'));\n        return;\n      } // Check if it was added\n\n\n      if (Framework7.prototype.modules && Framework7.prototype.modules[module.name]) {\n        resolve();\n        return;\n      } // Install It\n\n\n      install(module);\n      resolve();\n    }\n\n    if (moduleObj) {\n      const module = moduleObj;\n\n      if (!module) {\n        reject(new Error('Framework7: Can\\'t find Framework7 component in specified component'));\n        return;\n      } // Check if it was added\n\n\n      if (Framework7.prototype.modules && Framework7.prototype.modules[module.name]) {\n        resolve();\n        return;\n      } // Install It\n\n\n      install(module);\n      resolve();\n    }\n\n    if (modulePath) {\n      if (fetchedModules.indexOf(modulePath) >= 0) {\n        resolve();\n        return;\n      }\n\n      fetchedModules.push(modulePath);\n      const scriptLoad = new Promise((resolveScript, rejectScript) => {\n        Framework7.request.get(modulePath, scriptContent => {\n          const id = Utils.id();\n          const callbackLoadName = `f7_component_loader_callback_${id}`;\n          const scriptEl = document.createElement('script');\n          scriptEl.innerHTML = `window.${callbackLoadName} = function (Framework7, Framework7AutoInstallComponent) {return ${scriptContent.trim()}}`;\n          $('head').append(scriptEl);\n          const componentLoader = window[callbackLoadName];\n          delete window[callbackLoadName];\n          $(scriptEl).remove();\n          const module = componentLoader(Framework7, false);\n\n          if (!module) {\n            rejectScript(new Error(`Framework7: Can't find Framework7 component in ${modulePath} file`));\n            return;\n          } // Check if it was added\n\n\n          if (Framework7.prototype.modules && Framework7.prototype.modules[module.name]) {\n            resolveScript();\n            return;\n          } // Install It\n\n\n          install(module);\n          resolveScript();\n        }, (xhr, status) => {\n          rejectScript(xhr, status);\n        });\n      });\n      const styleLoad = new Promise(resolveStyle => {\n        Framework7.request.get(modulePath.replace('.js', app.rtl ? '.rtl.css' : '.css'), styleContent => {\n          const styleEl = document.createElement('style');\n          styleEl.innerHTML = styleContent;\n          $('head').append(styleEl);\n          resolveStyle();\n        }, () => {\n          resolveStyle();\n        });\n      });\n      Promise.all([scriptLoad, styleLoad]).then(() => {\n        resolve();\n      }).catch(err => {\n        reject(err);\n      });\n    }\n  });\n}\n\nexport default loadModule;","map":null,"metadata":{},"sourceType":"module"}