{"ast":null,"code":"import { document } from 'ssr-window';\nimport $ from 'dom7';\nimport Utils from '../../utils/utils';\nimport Framework7Class from '../../utils/class';\nimport Device from '../../utils/device';\n\nclass VirtualList extends Framework7Class {\n  constructor(app) {\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(params, [app]);\n    const vl = this;\n    let defaultHeight;\n\n    if (app.theme === 'md') {\n      defaultHeight = 48;\n    } else if (app.theme === 'ios') {\n      defaultHeight = 44;\n    } else if (app.theme === 'aurora') {\n      defaultHeight = 38;\n    }\n\n    const defaults = {\n      cols: 1,\n      height: defaultHeight,\n      cache: true,\n      dynamicHeightBufferSize: 1,\n      showFilteredItemsOnly: false,\n      renderExternal: undefined,\n      setListHeight: true,\n      searchByItem: undefined,\n      searchAll: undefined,\n      itemTemplate: undefined,\n      ul: null,\n      createUl: true,\n      scrollableParentEl: undefined,\n\n      renderItem(item) {\n        return `\n          <li>\n            <div class=\"item-content\">\n              <div class=\"item-inner\">\n                <div class=\"item-title\">${item}</div>\n              </div>\n            </div>\n          </li>\n        `.trim();\n      },\n\n      on: {}\n    }; // Extend defaults with modules params\n\n    vl.useModulesParams(defaults);\n    vl.params = Utils.extend(defaults, params);\n\n    if (vl.params.height === undefined || !vl.params.height) {\n      vl.params.height = defaultHeight;\n    }\n\n    vl.$el = $(params.el);\n    vl.el = vl.$el[0];\n    if (vl.$el.length === 0) return undefined;\n    vl.$el[0].f7VirtualList = vl;\n    vl.items = vl.params.items;\n\n    if (vl.params.showFilteredItemsOnly) {\n      vl.filteredItems = [];\n    }\n\n    if (vl.params.itemTemplate) {\n      if (typeof vl.params.itemTemplate === 'string') vl.renderItem = app.t7.compile(vl.params.itemTemplate);else if (typeof vl.params.itemTemplate === 'function') vl.renderItem = vl.params.itemTemplate;\n    } else if (vl.params.renderItem) {\n      vl.renderItem = vl.params.renderItem;\n    }\n\n    vl.$pageContentEl = vl.$el.parents('.page-content');\n    vl.pageContentEl = vl.$pageContentEl[0];\n    vl.$scrollableParentEl = vl.params.scrollableParentEl ? $(vl.params.scrollableParentEl).eq(0) : vl.$pageContentEl;\n\n    if (!vl.$scrollableParentEl.length && vl.$pageContentEl.length) {\n      vl.$scrollableParentEl = vl.$pageContentEl;\n    }\n\n    vl.scrollableParentEl = vl.$scrollableParentEl[0]; // Bad scroll\n\n    if (typeof vl.params.updatableScroll !== 'undefined') {\n      vl.updatableScroll = vl.params.updatableScroll;\n    } else {\n      vl.updatableScroll = true;\n\n      if (Device.ios && Device.osVersion.split('.')[0] < 8) {\n        vl.updatableScroll = false;\n      }\n    } // Append <ul>\n\n\n    const ul = vl.params.ul;\n    vl.$ul = ul ? $(vl.params.ul) : vl.$el.children('ul');\n\n    if (vl.$ul.length === 0 && vl.params.createUl) {\n      vl.$el.append('<ul></ul>');\n      vl.$ul = vl.$el.children('ul');\n    }\n\n    vl.ul = vl.$ul[0];\n    let $itemsWrapEl;\n    if (!vl.ul && !vl.params.createUl) $itemsWrapEl = vl.$el;else $itemsWrapEl = vl.$ul;\n    Utils.extend(vl, {\n      $itemsWrapEl,\n      itemsWrapEl: $itemsWrapEl[0],\n      // DOM cached items\n      domCache: {},\n      displayDomCache: {},\n      // Temporary DOM Element\n      tempDomElement: document.createElement('ul'),\n      // Last repain position\n      lastRepaintY: null,\n      // Fragment\n      fragment: document.createDocumentFragment(),\n      // Props\n      pageHeight: undefined,\n      rowsPerScreen: undefined,\n      rowsBefore: undefined,\n      rowsAfter: undefined,\n      rowsToRender: undefined,\n      maxBufferHeight: 0,\n      listHeight: undefined,\n      dynamicHeight: typeof vl.params.height === 'function'\n    }); // Install Modules\n\n    vl.useModules(); // Attach events\n\n    const handleScrollBound = vl.handleScroll.bind(vl);\n    const handleResizeBound = vl.handleResize.bind(vl);\n    let $pageEl;\n    let $tabEl;\n    let $panelEl;\n    let $popupEl;\n\n    vl.attachEvents = function attachEvents() {\n      $pageEl = vl.$el.parents('.page').eq(0);\n      $tabEl = vl.$el.parents('.tab').eq(0);\n      $panelEl = vl.$el.parents('.panel').eq(0);\n      $popupEl = vl.$el.parents('.popup').eq(0);\n      vl.$scrollableParentEl.on('scroll', handleScrollBound);\n      if ($pageEl) $pageEl.on('page:reinit', handleResizeBound);\n      if ($tabEl) $tabEl.on('tab:show', handleResizeBound);\n      if ($panelEl) $panelEl.on('panel:open', handleResizeBound);\n      if ($popupEl) $popupEl.on('popup:open', handleResizeBound);\n      app.on('resize', handleResizeBound);\n    };\n\n    vl.detachEvents = function attachEvents() {\n      vl.$scrollableParentEl.off('scroll', handleScrollBound);\n      if ($pageEl) $pageEl.off('page:reinit', handleResizeBound);\n      if ($tabEl) $tabEl.off('tab:show', handleResizeBound);\n      if ($panelEl) $panelEl.off('panel:open', handleResizeBound);\n      if ($popupEl) $popupEl.off('popup:open', handleResizeBound);\n      app.off('resize', handleResizeBound);\n    }; // Init\n\n\n    vl.init();\n    return vl;\n  }\n\n  setListSize() {\n    const vl = this;\n    const items = vl.filteredItems || vl.items;\n    vl.pageHeight = vl.$scrollableParentEl[0].offsetHeight;\n\n    if (vl.dynamicHeight) {\n      vl.listHeight = 0;\n      vl.heights = [];\n\n      for (let i = 0; i < items.length; i += 1) {\n        const itemHeight = vl.params.height(items[i]);\n        vl.listHeight += itemHeight;\n        vl.heights.push(itemHeight);\n      }\n    } else {\n      vl.listHeight = Math.ceil(items.length / vl.params.cols) * vl.params.height;\n      vl.rowsPerScreen = Math.ceil(vl.pageHeight / vl.params.height);\n      vl.rowsBefore = vl.params.rowsBefore || vl.rowsPerScreen * 2;\n      vl.rowsAfter = vl.params.rowsAfter || vl.rowsPerScreen;\n      vl.rowsToRender = vl.rowsPerScreen + vl.rowsBefore + vl.rowsAfter;\n      vl.maxBufferHeight = vl.rowsBefore / 2 * vl.params.height;\n    }\n\n    if (vl.updatableScroll || vl.params.setListHeight) {\n      vl.$itemsWrapEl.css({\n        height: `${vl.listHeight}px`\n      });\n    }\n  }\n\n  render(force, forceScrollTop) {\n    const vl = this;\n    if (force) vl.lastRepaintY = null;\n    let scrollTop = -(vl.$el[0].getBoundingClientRect().top - vl.$scrollableParentEl[0].getBoundingClientRect().top);\n    if (typeof forceScrollTop !== 'undefined') scrollTop = forceScrollTop;\n\n    if (vl.lastRepaintY === null || Math.abs(scrollTop - vl.lastRepaintY) > vl.maxBufferHeight || !vl.updatableScroll && vl.$scrollableParentEl[0].scrollTop + vl.pageHeight >= vl.$scrollableParentEl[0].scrollHeight) {\n      vl.lastRepaintY = scrollTop;\n    } else {\n      return;\n    }\n\n    const items = vl.filteredItems || vl.items;\n    let fromIndex;\n    let toIndex;\n    let heightBeforeFirstItem = 0;\n    let heightBeforeLastItem = 0;\n\n    if (vl.dynamicHeight) {\n      let itemTop = 0;\n      let itemHeight;\n      vl.maxBufferHeight = vl.pageHeight;\n\n      for (let j = 0; j < vl.heights.length; j += 1) {\n        itemHeight = vl.heights[j];\n\n        if (typeof fromIndex === 'undefined') {\n          if (itemTop + itemHeight >= scrollTop - vl.pageHeight * 2 * vl.params.dynamicHeightBufferSize) fromIndex = j;else heightBeforeFirstItem += itemHeight;\n        }\n\n        if (typeof toIndex === 'undefined') {\n          if (itemTop + itemHeight >= scrollTop + vl.pageHeight * 2 * vl.params.dynamicHeightBufferSize || j === vl.heights.length - 1) toIndex = j + 1;\n          heightBeforeLastItem += itemHeight;\n        }\n\n        itemTop += itemHeight;\n      }\n\n      toIndex = Math.min(toIndex, items.length);\n    } else {\n      fromIndex = (parseInt(scrollTop / vl.params.height, 10) - vl.rowsBefore) * vl.params.cols;\n\n      if (fromIndex < 0) {\n        fromIndex = 0;\n      }\n\n      toIndex = Math.min(fromIndex + vl.rowsToRender * vl.params.cols, items.length);\n    }\n\n    let topPosition;\n    const renderExternalItems = [];\n    vl.reachEnd = false;\n    let i;\n\n    for (i = fromIndex; i < toIndex; i += 1) {\n      let itemEl; // Define real item index\n\n      const index = vl.items.indexOf(items[i]);\n      if (i === fromIndex) vl.currentFromIndex = index;\n      if (i === toIndex - 1) vl.currentToIndex = index;\n\n      if (vl.filteredItems) {\n        if (vl.items[index] === vl.filteredItems[vl.filteredItems.length - 1]) vl.reachEnd = true;\n      } else if (index === vl.items.length - 1) vl.reachEnd = true; // Find items\n\n\n      if (vl.params.renderExternal) {\n        renderExternalItems.push(items[i]);\n      } else if (vl.domCache[index]) {\n        itemEl = vl.domCache[index];\n        itemEl.f7VirtualListIndex = index;\n      } else {\n        if (vl.renderItem) {\n          vl.tempDomElement.innerHTML = vl.renderItem(items[i], index).trim();\n        } else {\n          vl.tempDomElement.innerHTML = items[i].toString().trim();\n        }\n\n        itemEl = vl.tempDomElement.childNodes[0];\n        if (vl.params.cache) vl.domCache[index] = itemEl;\n        itemEl.f7VirtualListIndex = index;\n      } // Set item top position\n\n\n      if (i === fromIndex) {\n        if (vl.dynamicHeight) {\n          topPosition = heightBeforeFirstItem;\n        } else {\n          topPosition = i * vl.params.height / vl.params.cols;\n        }\n      }\n\n      if (!vl.params.renderExternal) {\n        itemEl.style.top = `${topPosition}px`; // Before item insert\n\n        vl.emit('local::itemBeforeInsert vlItemBeforeInsert', vl, itemEl, items[i]); // Append item to fragment\n\n        vl.fragment.appendChild(itemEl);\n      }\n    } // Update list height with not updatable scroll\n\n\n    if (!vl.updatableScroll) {\n      if (vl.dynamicHeight) {\n        vl.itemsWrapEl.style.height = `${heightBeforeLastItem}px`;\n      } else {\n        vl.itemsWrapEl.style.height = `${i * vl.params.height / vl.params.cols}px`;\n      }\n    } // Update list html\n\n\n    if (vl.params.renderExternal) {\n      if (items && items.length === 0) {\n        vl.reachEnd = true;\n      }\n    } else {\n      vl.emit('local::beforeClear vlBeforeClear', vl, vl.fragment);\n      vl.itemsWrapEl.innerHTML = '';\n      vl.emit('local::itemsBeforeInsert vlItemsBeforeInsert', vl, vl.fragment);\n\n      if (items && items.length === 0) {\n        vl.reachEnd = true;\n        if (vl.params.emptyTemplate) vl.itemsWrapEl.innerHTML = vl.params.emptyTemplate;\n      } else {\n        vl.itemsWrapEl.appendChild(vl.fragment);\n      }\n\n      vl.emit('local::itemsAfterInsert vlItemsAfterInsert', vl, vl.fragment);\n    }\n\n    if (typeof forceScrollTop !== 'undefined' && force) {\n      vl.$scrollableParentEl.scrollTop(forceScrollTop, 0);\n    }\n\n    if (vl.params.renderExternal) {\n      vl.params.renderExternal(vl, {\n        fromIndex,\n        toIndex,\n        listHeight: vl.listHeight,\n        topPosition,\n        items: renderExternalItems\n      });\n    }\n  } // Filter\n\n\n  filterItems(indexes) {\n    let resetScrollTop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const vl = this;\n    vl.filteredItems = [];\n\n    for (let i = 0; i < indexes.length; i += 1) {\n      vl.filteredItems.push(vl.items[indexes[i]]);\n    }\n\n    if (resetScrollTop) {\n      vl.$scrollableParentEl[0].scrollTop = 0;\n    }\n\n    vl.update();\n  }\n\n  resetFilter() {\n    const vl = this;\n\n    if (vl.params.showFilteredItemsOnly) {\n      vl.filteredItems = [];\n    } else {\n      vl.filteredItems = null;\n      delete vl.filteredItems;\n    }\n\n    vl.update();\n  }\n\n  scrollToItem(index) {\n    const vl = this;\n    if (index > vl.items.length) return false;\n    let itemTop = 0;\n\n    if (vl.dynamicHeight) {\n      for (let i = 0; i < index; i += 1) {\n        itemTop += vl.heights[i];\n      }\n    } else {\n      itemTop = index * vl.params.height;\n    }\n\n    const listTop = vl.$el[0].offsetTop;\n    vl.render(true, listTop + itemTop - parseInt(vl.$scrollableParentEl.css('padding-top'), 10));\n    return true;\n  }\n\n  handleScroll() {\n    const vl = this;\n    vl.render();\n  } // Handle resize event\n\n\n  isVisible() {\n    const vl = this;\n    return !!(vl.el.offsetWidth || vl.el.offsetHeight || vl.el.getClientRects().length);\n  }\n\n  handleResize() {\n    const vl = this;\n\n    if (vl.isVisible()) {\n      vl.setListSize();\n      vl.render(true);\n    }\n  } // Append\n\n\n  appendItems(items) {\n    const vl = this;\n\n    for (let i = 0; i < items.length; i += 1) {\n      vl.items.push(items[i]);\n    }\n\n    vl.update();\n  }\n\n  appendItem(item) {\n    const vl = this;\n    vl.appendItems([item]);\n  } // Replace\n\n\n  replaceAllItems(items) {\n    const vl = this;\n    vl.items = items;\n    delete vl.filteredItems;\n    vl.domCache = {};\n    vl.update();\n  }\n\n  replaceItem(index, item) {\n    const vl = this;\n    vl.items[index] = item;\n    if (vl.params.cache) delete vl.domCache[index];\n    vl.update();\n  } // Prepend\n\n\n  prependItems(items) {\n    const vl = this;\n\n    for (let i = items.length - 1; i >= 0; i -= 1) {\n      vl.items.unshift(items[i]);\n    }\n\n    if (vl.params.cache) {\n      const newCache = {};\n      Object.keys(vl.domCache).forEach(cached => {\n        newCache[parseInt(cached, 10) + items.length] = vl.domCache[cached];\n      });\n      vl.domCache = newCache;\n    }\n\n    vl.update();\n  }\n\n  prependItem(item) {\n    const vl = this;\n    vl.prependItems([item]);\n  } // Move\n\n\n  moveItem(from, to) {\n    const vl = this;\n    const fromIndex = from;\n    let toIndex = to;\n    if (fromIndex === toIndex) return; // remove item from array\n\n    const item = vl.items.splice(fromIndex, 1)[0];\n\n    if (toIndex >= vl.items.length) {\n      // Add item to the end\n      vl.items.push(item);\n      toIndex = vl.items.length - 1;\n    } else {\n      // Add item to new index\n      vl.items.splice(toIndex, 0, item);\n    } // Update cache\n\n\n    if (vl.params.cache) {\n      const newCache = {};\n      Object.keys(vl.domCache).forEach(cached => {\n        const cachedIndex = parseInt(cached, 10);\n        const leftIndex = fromIndex < toIndex ? fromIndex : toIndex;\n        const rightIndex = fromIndex < toIndex ? toIndex : fromIndex;\n        const indexShift = fromIndex < toIndex ? -1 : 1;\n        if (cachedIndex < leftIndex || cachedIndex > rightIndex) newCache[cachedIndex] = vl.domCache[cachedIndex];\n        if (cachedIndex === leftIndex) newCache[rightIndex] = vl.domCache[cachedIndex];\n        if (cachedIndex > leftIndex && cachedIndex <= rightIndex) newCache[cachedIndex + indexShift] = vl.domCache[cachedIndex];\n      });\n      vl.domCache = newCache;\n    }\n\n    vl.update();\n  } // Insert before\n\n\n  insertItemBefore(index, item) {\n    const vl = this;\n\n    if (index === 0) {\n      vl.prependItem(item);\n      return;\n    }\n\n    if (index >= vl.items.length) {\n      vl.appendItem(item);\n      return;\n    }\n\n    vl.items.splice(index, 0, item); // Update cache\n\n    if (vl.params.cache) {\n      const newCache = {};\n      Object.keys(vl.domCache).forEach(cached => {\n        const cachedIndex = parseInt(cached, 10);\n\n        if (cachedIndex >= index) {\n          newCache[cachedIndex + 1] = vl.domCache[cachedIndex];\n        }\n      });\n      vl.domCache = newCache;\n    }\n\n    vl.update();\n  } // Delete\n\n\n  deleteItems(indexes) {\n    const vl = this;\n    let prevIndex;\n    let indexShift = 0;\n\n    for (let i = 0; i < indexes.length; i += 1) {\n      let index = indexes[i];\n\n      if (typeof prevIndex !== 'undefined') {\n        if (index > prevIndex) {\n          indexShift = -i;\n        }\n      }\n\n      index += indexShift;\n      prevIndex = indexes[i]; // Delete item\n\n      const deletedItem = vl.items.splice(index, 1)[0]; // Delete from filtered\n\n      if (vl.filteredItems && vl.filteredItems.indexOf(deletedItem) >= 0) {\n        vl.filteredItems.splice(vl.filteredItems.indexOf(deletedItem), 1);\n      } // Update cache\n\n\n      if (vl.params.cache) {\n        const newCache = {};\n        Object.keys(vl.domCache).forEach(cached => {\n          const cachedIndex = parseInt(cached, 10);\n\n          if (cachedIndex === index) {\n            delete vl.domCache[index];\n          } else if (parseInt(cached, 10) > index) {\n            newCache[cachedIndex - 1] = vl.domCache[cached];\n          } else {\n            newCache[cachedIndex] = vl.domCache[cached];\n          }\n        });\n        vl.domCache = newCache;\n      }\n    }\n\n    vl.update();\n  }\n\n  deleteAllItems() {\n    const vl = this;\n    vl.items = [];\n    delete vl.filteredItems;\n    if (vl.params.cache) vl.domCache = {};\n    vl.update();\n  }\n\n  deleteItem(index) {\n    const vl = this;\n    vl.deleteItems([index]);\n  } // Clear cache\n\n\n  clearCache() {\n    const vl = this;\n    vl.domCache = {};\n  } // Update Virtual List\n\n\n  update(deleteCache) {\n    const vl = this;\n\n    if (deleteCache && vl.params.cache) {\n      vl.domCache = {};\n    }\n\n    vl.setListSize();\n    vl.render(true);\n  }\n\n  init() {\n    const vl = this;\n    vl.attachEvents();\n    vl.setListSize();\n    vl.render();\n  }\n\n  destroy() {\n    let vl = this;\n    vl.detachEvents();\n    vl.$el[0].f7VirtualList = null;\n    delete vl.$el[0].f7VirtualList;\n    Utils.deleteProps(vl);\n    vl = null;\n  }\n\n}\n\nexport default VirtualList;","map":null,"metadata":{},"sourceType":"module"}