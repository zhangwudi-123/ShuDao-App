{"ast":null,"code":"// import React, { useEffect, useMemo, useRef, useState } from 'react';\n// import { Toolbar, Link, Card, Tab, Block, SkeletonBlock, Page, Navbar, NavLeft, NavTitle, NavRight, List, Subnavbar, Searchbar, ListItem, PageContent, Button, Sheet, Popup, Input } from '@hvisions/f-ui';\n// import styles from './style.scss';\n// import backIcon from '~/pages/WarehousinManage/img/backIcon.png';\n// import { i18n, page } from '@hvisions/toolkit';\n// import { onToast, createDialog } from '~/util/home';\n// import useDebounce from '~/Hook/useDebounce';\n// import RawMaterialWarehousingApi from '~/api/RawMaterialWarehousing';\n// import EmptyPalletDeliveryApi from '~/api/EmptyPalletDelivery';\n// import TransferBoxServices from '~/api/TransferBox';\n// const Manual = ({ f7router, moduleList, ...props }) => {\n//   const [tabKey, setTabKey] = useState(0);\n//   const [state, setState] = useState({\n//     0: '新建', 1: '称重中', 2: '已完成'\n//   });\n//   const countRef = useRef(10);\n//   const [loading, setLoading] = useState(false);\n//   const [list, setList] = useState([]);\n//   const [total, setTotal] = useState(0);\n//   const [selectValue, setSelectValue] = useState('');\n//   const debounceSelectValue = useDebounce(selectValue, 500);\n//   const [showPreloader, setShowPreloader] = useState(false);\n//   const [allowInfinite, setAllowInfinite] = useState(true);\n//   const [ptrPreloader, setPtrPreloader] = useState(false);\n//   const newStyle = {\n//     background: '#ffdad4',\n//     color: '#d83333'\n//   };\n//   const onGoingStyle = {\n//     background: '#E1EDFF',\n//     color: '#3D86F3'\n//   };\n//   useEffect(() => {\n//     loadData();\n// }, []);\n//   const loadData = async keyWord => {\n//     setLoading(true);\n//     const searchData = {\n//       pageSize: countRef.current,\n//       type: 0 ,\n//     };\n//     console.log('searchData',searchData);\n//     await TransferBoxServices.getPage(searchData)\n//     .then(res => {\n//       console.log('res',res);\n//         setList(res.content);\n//         setTotal(res.totalElements);\n//     })\n//       .catch(err => {\n//         onToast(err.message, styles.toastError);\n//       });\n//     setLoading(false);\n//   };\n//   const loadMore = async () => {\n//     console.log('loadMore');\n//     if (!allowInfinite) return;\n//     setShowPreloader(true);\n//     if (countRef.current >= total) {\n//       setShowPreloader(false);\n//       return;\n//     }\n//     setAllowInfinite(false);\n//     countRef.current = countRef.current + 10;\n//     await loadData();\n//     await setAllowInfinite(true);\n//   };\n//   const onHandleRefresh = async done => {\n//     console.log('onHandleRefresh');\n//     await setPtrPreloader(true);\n//     await loadData();\n//     await setPtrPreloader(false);\n//     await done();\n//   };\n//   const handleAutomatic = ()=>{\n//     createDialog(\n//       '托盘自动下架',\n//       '确认开始托盘自动下架流程？',\n//       function() {\n//         try {\n//           Automatic()\n//           // onToast('托盘自动下架成功', styles.toastSuccess);\n//         } catch (error) {\n//           console.log('error',error);\n//           onToast('托盘自动下架失败', styles.toastError);\n//         }\n//       }\n//     );\n//   }\n//   const Automatic = async () => {\n//     const data ={\n//       destination:'原材料组托点',\n//       middle:'J001',\n//       taskType:6, //原料托盘出库\n//       transferType:0 //原料托盘\n//     }\n//     await EmptyPalletDeliveryApi.autoTransferOut(data)\n//     .then(res=>{\n//       onToast('托盘自动下架成功', styles.toastSuccess);\n//       loadData(selectValue);\n//     })\n//     .catch(err=>{\n//       onToast(err.message, styles.toastError);\n//     })\n//     //托盘出库   托盘自动出库\n//   }\n//   return (\n//     <Page pageContent={false}>\n//       <Navbar>\n//         <NavLeft>\n//           <a onClick={() => f7router.back()} className=\"ne-navleft\">\n//             <img alt=\"\" style={{ height: 24 }} src={backIcon} />\n//           </a>\n//         </NavLeft>\n//         <NavTitle>托盘手动下架</NavTitle>\n//       </Navbar>\n//       <PageContent\n//         infinite\n//         infiniteDistance={50}\n//         infinitePreloader={showPreloader}\n//         onInfinite={loadMore}\n//         ptrPreloader={ptrPreloader}\n//         ptr\n//         onPtrRefresh={onHandleRefresh}\n//         onPtrPullStart={() => {\n//           setPtrPreloader(true);\n//         }}\n//       >\n//         <div style={{ padding: '0 16px' }} className={styles.tabContainer}>\n//         <ul className={styles['div-ul']}>\n//           <li>\n//             <span className={styles['li-title']}>{'托盘列表'}</span>\n//           </li>\n//           {list.map((value, index) => {\n//             return (\n//               <Card key={index} className={styles['card']}>\n//                 <ul className={styles['card-ul']}>\n//                   <li>\n//                     <span className={styles['li-next-title']}>托盘号</span>\n//                     <span className={styles['li-next-title']}>{value.code || ''}</span>\n//                   </li>\n//                   <li>\n//                     <span className={styles['li-next-title']}>任务状态</span>\n//                     <span className={styles['li-next-title']}>{value.taskStatus || ''}</span>\n//                   </li>\n//                   <li>\n//                     <span className={styles['li-next-title']}>托盘状态</span>\n//                     <span\n//                       className={styles['li-status']}\n//                       style={value.state == '空闲' ? newStyle : onGoingStyle}\n//                     >\n//                       {value.state || ''}\n//                     </span>\n//                   </li>\n//                 </ul>\n//                 <div className={styles['card-div']}>\n//                   <Button\n//                     fill\n//                     round\n//                     className={styles['bottom-btn-confirm']}\n//                     // onClick={handleConfirm}\n//                   >\n//                     下架\n//                   </Button>\n//                 </div>\n//               </Card>\n//             );\n//           })}\n//         </ul>\n//         </div>\n//       </PageContent>\n//     </Page>\n//   );\n// };\n// export default Manual;","map":{"version":3,"names":[],"sources":["F:/project/vsCode/bc-app/src/pages/RawMaterialWarehousing/Manual/index.js"],"sourcesContent":["// import React, { useEffect, useMemo, useRef, useState } from 'react';\r\n// import { Toolbar, Link, Card, Tab, Block, SkeletonBlock, Page, Navbar, NavLeft, NavTitle, NavRight, List, Subnavbar, Searchbar, ListItem, PageContent, Button, Sheet, Popup, Input } from '@hvisions/f-ui';\r\n// import styles from './style.scss';\r\n// import backIcon from '~/pages/WarehousinManage/img/backIcon.png';\r\n// import { i18n, page } from '@hvisions/toolkit';\r\n// import { onToast, createDialog } from '~/util/home';\r\n// import useDebounce from '~/Hook/useDebounce';\r\n// import RawMaterialWarehousingApi from '~/api/RawMaterialWarehousing';\r\n// import EmptyPalletDeliveryApi from '~/api/EmptyPalletDelivery';\r\n// import TransferBoxServices from '~/api/TransferBox';\r\n\r\n// const Manual = ({ f7router, moduleList, ...props }) => {\r\n//   const [tabKey, setTabKey] = useState(0);\r\n//   const [state, setState] = useState({\r\n//     0: '新建', 1: '称重中', 2: '已完成'\r\n//   });\r\n//   const countRef = useRef(10);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [list, setList] = useState([]);\r\n//   const [total, setTotal] = useState(0);\r\n//   const [selectValue, setSelectValue] = useState('');\r\n//   const debounceSelectValue = useDebounce(selectValue, 500);\r\n//   const [showPreloader, setShowPreloader] = useState(false);\r\n//   const [allowInfinite, setAllowInfinite] = useState(true);\r\n//   const [ptrPreloader, setPtrPreloader] = useState(false);\r\n\r\n//   const newStyle = {\r\n//     background: '#ffdad4',\r\n//     color: '#d83333'\r\n//   };\r\n//   const onGoingStyle = {\r\n//     background: '#E1EDFF',\r\n//     color: '#3D86F3'\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     loadData();\r\n// }, []);\r\n\r\n//   const loadData = async keyWord => {\r\n//     setLoading(true);\r\n//     const searchData = {\r\n//       pageSize: countRef.current,\r\n//       type: 0 ,\r\n//     };\r\n//     console.log('searchData',searchData);\r\n//     await TransferBoxServices.getPage(searchData)\r\n//     .then(res => {\r\n//       console.log('res',res);\r\n//         setList(res.content);\r\n//         setTotal(res.totalElements);\r\n//     })\r\n//       .catch(err => {\r\n//         onToast(err.message, styles.toastError);\r\n//       });\r\n//     setLoading(false);\r\n//   };\r\n\r\n//   const loadMore = async () => {\r\n//     console.log('loadMore');\r\n\r\n//     if (!allowInfinite) return;\r\n//     setShowPreloader(true);\r\n//     if (countRef.current >= total) {\r\n//       setShowPreloader(false);\r\n//       return;\r\n//     }\r\n//     setAllowInfinite(false);\r\n//     countRef.current = countRef.current + 10;\r\n//     await loadData();\r\n//     await setAllowInfinite(true);\r\n//   };\r\n\r\n//   const onHandleRefresh = async done => {\r\n//     console.log('onHandleRefresh');\r\n//     await setPtrPreloader(true);\r\n//     await loadData();\r\n//     await setPtrPreloader(false);\r\n//     await done();\r\n//   };\r\n\r\n//   const handleAutomatic = ()=>{\r\n//     createDialog(\r\n//       '托盘自动下架',\r\n//       '确认开始托盘自动下架流程？',\r\n//       function() {\r\n//         try {\r\n//           Automatic()\r\n//           // onToast('托盘自动下架成功', styles.toastSuccess);\r\n//         } catch (error) {\r\n//           console.log('error',error);\r\n//           onToast('托盘自动下架失败', styles.toastError);\r\n//         }\r\n//       }\r\n//     );\r\n//   }\r\n\r\n//   const Automatic = async () => {\r\n//     const data ={\r\n//       destination:'原材料组托点',\r\n//       middle:'J001',\r\n//       taskType:6, //原料托盘出库\r\n//       transferType:0 //原料托盘\r\n//     }\r\n//     await EmptyPalletDeliveryApi.autoTransferOut(data)\r\n//     .then(res=>{\r\n//       onToast('托盘自动下架成功', styles.toastSuccess);\r\n//       loadData(selectValue);\r\n//     })\r\n//     .catch(err=>{\r\n//       onToast(err.message, styles.toastError);\r\n//     })\r\n//     //托盘出库   托盘自动出库\r\n//   }\r\n\r\n//   return (\r\n//     <Page pageContent={false}>\r\n//       <Navbar>\r\n//         <NavLeft>\r\n//           <a onClick={() => f7router.back()} className=\"ne-navleft\">\r\n//             <img alt=\"\" style={{ height: 24 }} src={backIcon} />\r\n//           </a>\r\n//         </NavLeft>\r\n//         <NavTitle>托盘手动下架</NavTitle>\r\n//       </Navbar>\r\n//       <PageContent\r\n//         infinite\r\n//         infiniteDistance={50}\r\n//         infinitePreloader={showPreloader}\r\n//         onInfinite={loadMore}\r\n//         ptrPreloader={ptrPreloader}\r\n//         ptr\r\n//         onPtrRefresh={onHandleRefresh}\r\n//         onPtrPullStart={() => {\r\n//           setPtrPreloader(true);\r\n//         }}\r\n//       >\r\n//         <div style={{ padding: '0 16px' }} className={styles.tabContainer}>\r\n//         <ul className={styles['div-ul']}>\r\n//           <li>\r\n//             <span className={styles['li-title']}>{'托盘列表'}</span>\r\n//           </li>\r\n//           {list.map((value, index) => {\r\n//             return (\r\n//               <Card key={index} className={styles['card']}>\r\n//                 <ul className={styles['card-ul']}>\r\n//                   <li>\r\n//                     <span className={styles['li-next-title']}>托盘号</span>\r\n//                     <span className={styles['li-next-title']}>{value.code || ''}</span>\r\n//                   </li>\r\n//                   <li>\r\n//                     <span className={styles['li-next-title']}>任务状态</span>\r\n//                     <span className={styles['li-next-title']}>{value.taskStatus || ''}</span>\r\n//                   </li>\r\n//                   <li>\r\n//                     <span className={styles['li-next-title']}>托盘状态</span>\r\n//                     <span\r\n//                       className={styles['li-status']}\r\n//                       style={value.state == '空闲' ? newStyle : onGoingStyle}\r\n//                     >\r\n//                       {value.state || ''}\r\n//                     </span>\r\n//                   </li>\r\n//                 </ul>\r\n//                 <div className={styles['card-div']}>\r\n//                   <Button\r\n//                     fill\r\n//                     round\r\n//                     className={styles['bottom-btn-confirm']}\r\n//                     // onClick={handleConfirm}\r\n//                   >\r\n//                     下架\r\n//                   </Button>\r\n//                 </div>\r\n//               </Card>\r\n//             );\r\n//           })}\r\n//         </ul>\r\n//         </div>\r\n//       </PageContent>\r\n//     </Page>\r\n//   );\r\n// };\r\n\r\n// export default Manual;"],"mappings},"metadata":{},"sourceType":"module"}