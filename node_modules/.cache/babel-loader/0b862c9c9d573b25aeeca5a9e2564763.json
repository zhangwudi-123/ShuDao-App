{"ast":null,"code":"import $ from 'dom7';\nimport Template7 from 'template7';\nimport { window, document } from 'ssr-window';\nimport Utils from '../../utils/utils';\nimport Device from '../../utils/device';\nimport Framework7Class from '../../utils/class';\nimport EventsClass from '../../utils/events-class';\nimport ConstructorMethods from '../../utils/constructor-methods';\nimport ModalMethods from '../../utils/modal-methods';\nimport loadModule from './load-module';\n\nclass Framework7 extends Framework7Class {\n  constructor(params) {\n    super(params);\n\n    if (Framework7.instance) {\n      throw new Error('Framework7 is already initialized and can\\'t be initialized more than once');\n    }\n\n    const passedParams = Utils.extend({}, params); // App Instance\n\n    const app = this;\n    Framework7.instance = app; // Default\n\n    const defaults = {\n      version: '1.0.0',\n      id: 'io.framework7.testapp',\n      root: 'body',\n      theme: 'auto',\n      language: window.navigator.language,\n      routes: [],\n      name: 'Framework7',\n      lazyModulesPath: null,\n      initOnDeviceReady: true,\n      init: true,\n      autoDarkTheme: false,\n      iosTranslucentBars: true,\n      iosTranslucentModals: true\n    }; // Extend defaults with modules params\n\n    app.useModulesParams(defaults); // Extend defaults with passed params\n\n    app.params = Utils.extend(defaults, params);\n    const $rootEl = $(app.params.root);\n    Utils.extend(app, {\n      // App Id\n      id: app.params.id,\n      // App Name\n      name: app.params.name,\n      // App version\n      version: app.params.version,\n      // Routes\n      routes: app.params.routes,\n      // Lang\n      language: app.params.language,\n      // Root\n      root: $rootEl,\n      // RTL\n      rtl: $rootEl.css('direction') === 'rtl',\n      // Theme\n      theme: function getTheme() {\n        if (app.params.theme === 'auto') {\n          if (Device.ios) return 'ios';\n          if (Device.desktop && Device.electron) return 'aurora';\n          return 'md';\n        }\n\n        return app.params.theme;\n      }(),\n      // Initially passed parameters\n      passedParams,\n      online: window.navigator.onLine\n    }); // Save Root\n\n    if (app.root && app.root[0]) {\n      app.root[0].f7 = app;\n    } // Install Modules\n\n\n    app.useModules(); // Init Data & Methods\n\n    app.initData(); // Auto Dark Theme\n\n    const DARK = '(prefers-color-scheme: dark)';\n    const LIGHT = '(prefers-color-scheme: light)';\n    app.mq = {};\n\n    if (window.matchMedia) {\n      app.mq.dark = window.matchMedia(DARK);\n      app.mq.light = window.matchMedia(LIGHT);\n    }\n\n    app.colorSchemeListener = function colorSchemeListener(_ref) {\n      let {\n        matches,\n        media\n      } = _ref;\n\n      if (!matches) {\n        return;\n      }\n\n      const html = document.querySelector('html');\n\n      if (media === DARK) {\n        html.classList.add('theme-dark');\n      } else if (media === LIGHT) {\n        html.classList.remove('theme-dark');\n      }\n    }; // Init\n\n\n    if (app.params.init) {\n      if (Device.cordova && app.params.initOnDeviceReady) {\n        $(document).on('deviceready', () => {\n          app.init();\n        });\n      } else {\n        app.init();\n      }\n    } // Return app instance\n\n\n    return app;\n  }\n\n  initData() {\n    const app = this; // Data\n\n    app.data = {};\n\n    if (app.params.data && typeof app.params.data === 'function') {\n      Utils.extend(app.data, app.params.data.bind(app)());\n    } else if (app.params.data) {\n      Utils.extend(app.data, app.params.data);\n    } // Methods\n\n\n    app.methods = {};\n\n    if (app.params.methods) {\n      Object.keys(app.params.methods).forEach(methodName => {\n        if (typeof app.params.methods[methodName] === 'function') {\n          app.methods[methodName] = app.params.methods[methodName].bind(app);\n        } else {\n          app.methods[methodName] = app.params.methods[methodName];\n        }\n      });\n    }\n  }\n\n  enableAutoDarkTheme() {\n    if (!window.matchMedia) return;\n    const app = this;\n    const html = document.querySelector('html');\n\n    if (app.mq.dark && app.mq.light) {\n      app.mq.dark.addListener(app.colorSchemeListener);\n      app.mq.light.addListener(app.colorSchemeListener);\n    }\n\n    if (app.mq.dark && app.mq.dark.matches) {\n      html.classList.add('theme-dark');\n    } else if (app.mq.light && app.mq.light.matches) {\n      html.classList.remove('theme-dark');\n    }\n  }\n\n  disableAutoDarkTheme() {\n    if (!window.matchMedia) return;\n    const app = this;\n    if (app.mq.dark) app.mq.dark.removeListener(app.colorSchemeListener);\n    if (app.mq.light) app.mq.light.removeListener(app.colorSchemeListener);\n  }\n\n  init() {\n    const app = this;\n    if (app.initialized) return app;\n    app.root.addClass('framework7-initializing'); // RTL attr\n\n    if (app.rtl) {\n      $('html').attr('dir', 'rtl');\n    } // Auto Dark Theme\n\n\n    if (app.params.autoDarkTheme) {\n      app.enableAutoDarkTheme();\n    } // Watch for online/offline state\n\n\n    window.addEventListener('offline', () => {\n      app.online = false;\n      app.emit('offline');\n      app.emit('connection', false);\n    });\n    window.addEventListener('online', () => {\n      app.online = true;\n      app.emit('online');\n      app.emit('connection', true);\n    }); // Root class\n\n    app.root.addClass('framework7-root'); // Theme class\n\n    $('html').removeClass('ios md aurora').addClass(app.theme); // iOS Translucent\n\n    if (app.params.iosTranslucentBars && app.theme === 'ios' && Device.ios) {\n      $('html').addClass('ios-translucent-bars');\n    }\n\n    if (app.params.iosTranslucentModals && app.theme === 'ios' && Device.ios) {\n      $('html').addClass('ios-translucent-modals');\n    } // Init class\n\n\n    Utils.nextFrame(() => {\n      app.root.removeClass('framework7-initializing');\n    }); // Emit, init other modules\n\n    app.initialized = true;\n    app.emit('init');\n    return app;\n  } // eslint-disable-next-line\n\n\n  loadModule() {\n    return Framework7.loadModule(...arguments);\n  } // eslint-disable-next-line\n\n\n  loadModules() {\n    return Framework7.loadModules(...arguments);\n  }\n\n  getVnodeHooks(hook, id) {\n    const app = this;\n    if (!app.vnodeHooks || !app.vnodeHooks[hook]) return [];\n    return app.vnodeHooks[hook][id] || [];\n  } // eslint-disable-next-line\n\n\n  get $() {\n    return $;\n  } // eslint-disable-next-line\n\n\n  get t7() {\n    return Template7;\n  }\n\n  static get Dom7() {\n    return $;\n  }\n\n  static get $() {\n    return $;\n  }\n\n  static get Template7() {\n    return Template7;\n  }\n\n  static get Class() {\n    return Framework7Class;\n  }\n\n  static get Events() {\n    return EventsClass;\n  }\n\n}\n\nFramework7.ModalMethods = ModalMethods;\nFramework7.ConstructorMethods = ConstructorMethods;\nFramework7.loadModule = loadModule;\n\nFramework7.loadModules = function loadModules(modules) {\n  return Promise.all(modules.map(module => Framework7.loadModule(module)));\n};\n\nexport default Framework7;","map":null,"metadata":{},"sourceType":"module"}