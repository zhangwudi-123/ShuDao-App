{"ast":null,"code":"import $ from 'dom7';\nimport Utils from '../../utils/utils';\nconst InfiniteScroll = {\n  handleScroll(el, e) {\n    const app = this;\n    const $el = $(el);\n    const scrollTop = $el[0].scrollTop;\n    const scrollHeight = $el[0].scrollHeight;\n    const height = $el[0].offsetHeight;\n    let distance = $el[0].getAttribute('data-infinite-distance');\n    const virtualListContainer = $el.find('.virtual-list');\n    let virtualList;\n    const onTop = $el.hasClass('infinite-scroll-top');\n    if (!distance) distance = 50;\n\n    if (typeof distance === 'string' && distance.indexOf('%') >= 0) {\n      distance = parseInt(distance, 10) / 100 * height;\n    }\n\n    if (distance > height) distance = height;\n\n    if (onTop) {\n      if (scrollTop < distance) {\n        $el.trigger('infinite', e);\n        app.emit('infinite', $el[0], e);\n      }\n    } else if (scrollTop + height >= scrollHeight - distance) {\n      if (virtualListContainer.length > 0) {\n        virtualList = virtualListContainer.eq(-1)[0].f7VirtualList;\n\n        if (virtualList && !virtualList.reachEnd && !virtualList.params.updatableScroll) {\n          return;\n        }\n      }\n\n      $el.trigger('infinite', e);\n      app.emit('infinite', $el[0], e);\n    }\n  },\n\n  create(el) {\n    const $el = $(el);\n    const app = this;\n\n    function scrollHandler(e) {\n      app.infiniteScroll.handle(this, e);\n    }\n\n    $el.each((index, element) => {\n      element.f7InfiniteScrollHandler = scrollHandler;\n      element.addEventListener('scroll', element.f7InfiniteScrollHandler);\n    });\n  },\n\n  destroy(el) {\n    const $el = $(el);\n    $el.each((index, element) => {\n      element.removeEventListener('scroll', element.f7InfiniteScrollHandler);\n      delete element.f7InfiniteScrollHandler;\n    });\n  }\n\n};\nexport default {\n  name: 'infiniteScroll',\n\n  create() {\n    const app = this;\n    Utils.extend(app, {\n      infiniteScroll: {\n        handle: InfiniteScroll.handleScroll.bind(app),\n        create: InfiniteScroll.create.bind(app),\n        destroy: InfiniteScroll.destroy.bind(app)\n      }\n    });\n  },\n\n  on: {\n    tabMounted(tabEl) {\n      const app = this;\n      const $tabEl = $(tabEl);\n      const $isEls = $tabEl.find('.infinite-scroll-content');\n      if ($tabEl.is('.infinite-scroll-content')) $isEls.add($tabEl);\n      $isEls.each((index, el) => {\n        app.infiniteScroll.create(el);\n      });\n    },\n\n    tabBeforeRemove(tabEl) {\n      const $tabEl = $(tabEl);\n      const app = this;\n      const $isEls = $tabEl.find('.infinite-scroll-content');\n      if ($tabEl.is('.infinite-scroll-content')) $isEls.add($tabEl);\n      $isEls.each((index, el) => {\n        app.infiniteScroll.destroy(el);\n      });\n    },\n\n    pageInit(page) {\n      const app = this;\n      page.$el.find('.infinite-scroll-content').each((index, el) => {\n        app.infiniteScroll.create(el);\n      });\n    },\n\n    pageBeforeRemove(page) {\n      const app = this;\n      page.$el.find('.infinite-scroll-content').each((index, el) => {\n        app.infiniteScroll.destroy(el);\n      });\n    }\n\n  }\n};","map":null,"metadata":{},"sourceType":"module"}