{"ast":null,"code":"import React, { useRef } from 'react';\nimport classNames from 'classnames';\nimport { animated } from '@react-spring/web';\nimport { withNativeProps } from '../../utils/native-props';\nimport { usePropsValue } from '../../utils/use-props-value';\nimport { useResizeEffect } from '../../utils/use-resize-effect';\nimport { useTabListScroll } from '../../utils/use-tab-list-scroll';\nimport ScrollMask from '../scroll-mask';\nimport { ShouldRender } from '../../utils/should-render';\nimport { traverseReactNode } from '../../utils/traverse-react-node';\nconst classPrefix = `adm-jumbo-tabs`;\nexport const JumboTab = () => {\n  return null;\n};\nexport const JumboTabs = props => {\n  var _a;\n\n  const tabListContainerRef = useRef(null);\n  const rootRef = useRef(null);\n  const keyToIndexRecord = {};\n  let firstActiveKey = null;\n  const panes = [];\n  traverseReactNode(props.children, (child, index) => {\n    if (!React.isValidElement(child)) return;\n    const key = child.key;\n    if (typeof key !== 'string') return;\n\n    if (index === 0) {\n      firstActiveKey = key;\n    }\n\n    const length = panes.push(child);\n    keyToIndexRecord[key] = length - 1;\n  });\n  const [activeKey, setActiveKey] = usePropsValue({\n    value: props.activeKey,\n    defaultValue: (_a = props.defaultActiveKey) !== null && _a !== void 0 ? _a : firstActiveKey,\n    onChange: v => {\n      var _a;\n\n      if (v === null) return;\n      (_a = props.onChange) === null || _a === void 0 ? void 0 : _a.call(props, v);\n    }\n  });\n  const {\n    scrollLeft,\n    animate\n  } = useTabListScroll(tabListContainerRef, keyToIndexRecord[activeKey]);\n  useResizeEffect(() => {\n    animate(true);\n  }, rootRef);\n  return withNativeProps(props, React.createElement(\"div\", {\n    className: classPrefix,\n    ref: rootRef\n  }, React.createElement(\"div\", {\n    className: `${classPrefix}-header`\n  }, React.createElement(ScrollMask, {\n    scrollTrackRef: tabListContainerRef\n  }), React.createElement(animated.div, {\n    className: `${classPrefix}-tab-list`,\n    ref: tabListContainerRef,\n    scrollLeft: scrollLeft\n  }, panes.map(pane => withNativeProps(pane.props, React.createElement(\"div\", {\n    key: pane.key,\n    className: `${classPrefix}-tab-wrapper`\n  }, React.createElement(\"div\", {\n    onClick: () => {\n      const {\n        key\n      } = pane;\n      if (pane.props.disabled) return;\n\n      if (key === undefined || key === null) {\n        return;\n      }\n\n      setActiveKey(key.toString());\n    },\n    className: classNames(`${classPrefix}-tab`, {\n      [`${classPrefix}-tab-active`]: pane.key === activeKey,\n      [`${classPrefix}-tab-disabled`]: pane.props.disabled\n    })\n  }, React.createElement(\"div\", {\n    className: `${classPrefix}-tab-title`\n  }, pane.props.title), React.createElement(\"div\", {\n    className: `${classPrefix}-tab-description`\n  }, pane.props.description))))))), panes.map(pane => {\n    if (pane.props.children === undefined) {\n      return null;\n    }\n\n    const active = pane.key === activeKey;\n    return React.createElement(ShouldRender, {\n      key: pane.key,\n      active: active,\n      forceRender: pane.props.forceRender,\n      destroyOnClose: pane.props.destroyOnClose\n    }, React.createElement(\"div\", {\n      className: `${classPrefix}-content`,\n      style: {\n        display: active ? 'block' : 'none'\n      }\n    }, pane.props.children));\n  })));\n};","map":null,"metadata":{},"sourceType":"module"}