{"ast":null,"code":"import $ from 'dom7';\nimport Utils from '../../utils/utils';\nimport Support from '../../utils/support';\nimport Framework7Class from '../../utils/class';\n\nclass Tooltip extends Framework7Class {\n  constructor(app) {\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(params, [app]);\n    const tooltip = this;\n    const defaults = Utils.extend({}, app.params.tooltip); // Extend defaults with modules params\n\n    tooltip.useModulesParams(defaults);\n    tooltip.params = Utils.extend(defaults, params);\n    const {\n      targetEl\n    } = tooltip.params;\n    if (!targetEl) return tooltip;\n    const $targetEl = $(targetEl);\n    if ($targetEl.length === 0) return tooltip;\n    if ($targetEl[0].f7Tooltip) return $targetEl[0].f7Tooltip;\n    const $el = $(tooltip.render()).eq(0);\n    Utils.extend(tooltip, {\n      app,\n      $targetEl,\n      targetEl: $targetEl && $targetEl[0],\n      $el,\n      el: $el && $el[0],\n      text: tooltip.params.text || '',\n      visible: false,\n      opened: false\n    });\n    $targetEl[0].f7Tooltip = tooltip;\n    const touchesStart = {};\n    let isTouched;\n\n    function handleTouchStart(e) {\n      if (isTouched) return;\n      isTouched = true;\n      touchesStart.x = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;\n      touchesStart.y = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;\n      tooltip.show(this);\n    }\n\n    function handleTouchMove(e) {\n      if (!isTouched) return;\n      const x = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;\n      const y = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;\n      const distance = ((x - touchesStart.x) ** 2 + (y - touchesStart.y) ** 2) ** 0.5;\n\n      if (distance > 50) {\n        isTouched = false;\n        tooltip.hide();\n      }\n    }\n\n    function handleTouchEnd() {\n      if (!isTouched) return;\n      isTouched = false;\n      tooltip.hide();\n    }\n\n    function handleMouseEnter() {\n      tooltip.show(this);\n    }\n\n    function handleMouseLeave() {\n      tooltip.hide();\n    }\n\n    function handleTransitionEnd() {\n      if (!$el.hasClass('tooltip-in')) {\n        $el.removeClass('tooltip-out').remove();\n      }\n    }\n\n    tooltip.attachEvents = function attachEvents() {\n      $el.on('transitionend', handleTransitionEnd);\n\n      if (Support.touch) {\n        const passive = Support.passiveListener ? {\n          passive: true\n        } : false;\n        $targetEl.on(app.touchEvents.start, handleTouchStart, passive);\n        app.on('touchmove', handleTouchMove);\n        app.on('touchend:passive', handleTouchEnd);\n      } else {\n        $targetEl.on(Support.pointerEvents ? 'pointerenter' : 'mouseenter', handleMouseEnter);\n        $targetEl.on(Support.pointerEvents ? 'pointerleave' : 'mouseleave', handleMouseLeave);\n      }\n    };\n\n    tooltip.detachEvents = function detachEvents() {\n      $el.off('transitionend', handleTransitionEnd);\n\n      if (Support.touch) {\n        const passive = Support.passiveListener ? {\n          passive: true\n        } : false;\n        $targetEl.off(app.touchEvents.start, handleTouchStart, passive);\n        app.off('touchmove', handleTouchMove);\n        app.off('touchend:passive', handleTouchEnd);\n      } else {\n        $targetEl.off(Support.pointerEvents ? 'pointerenter' : 'mouseenter', handleMouseEnter);\n        $targetEl.off(Support.pointerEvents ? 'pointerleave' : 'mouseleave', handleMouseLeave);\n      }\n    }; // Install Modules\n\n\n    tooltip.useModules();\n    tooltip.init();\n    return tooltip;\n  }\n\n  position(targetEl) {\n    const tooltip = this;\n    const {\n      $el,\n      app\n    } = tooltip;\n    $el.css({\n      left: '',\n      top: ''\n    });\n    const $targetEl = $(targetEl || tooltip.targetEl);\n    const [width, height] = [$el.width(), $el.height()];\n    $el.css({\n      left: '',\n      top: ''\n    });\n    let targetWidth;\n    let targetHeight;\n    let targetOffsetLeft;\n    let targetOffsetTop;\n\n    if ($targetEl && $targetEl.length > 0) {\n      targetWidth = $targetEl.outerWidth();\n      targetHeight = $targetEl.outerHeight();\n      const targetOffset = $targetEl.offset();\n      targetOffsetLeft = targetOffset.left - app.left;\n      targetOffsetTop = targetOffset.top - app.top;\n      const targetParentPage = $targetEl.parents('.page');\n\n      if (targetParentPage.length > 0) {\n        targetOffsetTop -= targetParentPage[0].scrollTop;\n      }\n    }\n\n    let [left, top] = [0, 0, 0]; // Top Position\n\n    let position = 'top';\n\n    if (height < targetOffsetTop) {\n      // On top\n      top = targetOffsetTop - height;\n    } else if (height < app.height - targetOffsetTop - targetHeight) {\n      // On bottom\n      position = 'bottom';\n      top = targetOffsetTop + targetHeight;\n    } else {\n      // On middle\n      position = 'middle';\n      top = targetHeight / 2 + targetOffsetTop - height / 2;\n\n      if (top <= 0) {\n        top = 8;\n      } else if (top + height >= app.height) {\n        top = app.height - height - 8;\n      }\n    } // Horizontal Position\n\n\n    if (position === 'top' || position === 'bottom') {\n      left = targetWidth / 2 + targetOffsetLeft - width / 2;\n      if (left < 8) left = 8;\n      if (left + width > app.width) left = app.width - width - 8;\n      if (left < 0) left = 0;\n    } else if (position === 'middle') {\n      left = targetOffsetLeft - width;\n\n      if (left < 8 || left + width > app.width) {\n        if (left < 8) left = targetOffsetLeft + targetWidth;\n        if (left + width > app.width) left = app.width - width - 8;\n      }\n    } // Apply Styles\n\n\n    $el.css({\n      top: `${top}px`,\n      left: `${left}px`\n    });\n  }\n\n  show(aroundEl) {\n    const tooltip = this;\n    const {\n      app,\n      $el,\n      $targetEl\n    } = tooltip;\n    app.root.append($el);\n    tooltip.position(aroundEl);\n    const $aroundEl = $(aroundEl);\n    tooltip.visible = true;\n    tooltip.opened = true;\n    $targetEl.trigger('tooltip:show');\n    $el.trigger('tooltip:show');\n\n    if ($aroundEl.length && $aroundEl[0] !== $targetEl[0]) {\n      $aroundEl.trigger('tooltip:show');\n    }\n\n    tooltip.emit('local::show tooltipShow', tooltip);\n    $el.removeClass('tooltip-out').addClass('tooltip-in');\n    return tooltip;\n  }\n\n  hide() {\n    const tooltip = this;\n    const {\n      $el,\n      $targetEl\n    } = tooltip;\n    tooltip.visible = false;\n    tooltip.opened = false;\n    $targetEl.trigger('tooltip:hide');\n    $el.trigger('tooltip:hide');\n    tooltip.emit('local::hide tooltipHide', tooltip);\n    $el.addClass('tooltip-out').removeClass('tooltip-in');\n    return tooltip;\n  }\n\n  render() {\n    const tooltip = this;\n    if (tooltip.params.render) return tooltip.params.render.call(tooltip, tooltip);\n    const {\n      cssClass,\n      text\n    } = tooltip.params;\n    return `\n      <div class=\"tooltip ${cssClass || ''}\">\n        <div class=\"tooltip-content\">${text || ''}</div>\n      </div>\n    `.trim();\n  }\n\n  setText(newText) {\n    const tooltip = this;\n\n    if (typeof newText === 'undefined') {\n      return tooltip;\n    }\n\n    tooltip.params.text = newText;\n    tooltip.text = newText;\n\n    if (tooltip.$el) {\n      tooltip.$el.children('.tooltip-content').html(newText);\n    }\n\n    if (tooltip.opened) {\n      tooltip.position();\n    }\n\n    return tooltip;\n  }\n\n  init() {\n    const tooltip = this;\n    tooltip.attachEvents();\n  }\n\n  destroy() {\n    const tooltip = this;\n    if (!tooltip.$targetEl || tooltip.destroyed) return;\n    tooltip.$targetEl.trigger('tooltip:beforedestroy');\n    tooltip.emit('local::beforeDestroy tooltipBeforeDestroy', tooltip);\n    tooltip.$el.remove();\n    delete tooltip.$targetEl[0].f7Tooltip;\n    tooltip.detachEvents();\n    Utils.deleteProps(tooltip);\n    tooltip.destroyed = true;\n  }\n\n}\n\nexport default Tooltip;","map":null,"metadata":{},"sourceType":"module"}