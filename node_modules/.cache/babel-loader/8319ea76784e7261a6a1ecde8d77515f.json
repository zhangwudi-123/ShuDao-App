{"ast":null,"code":"import React, { useState, useEffect, useMemo } from 'react';\nimport classNames from 'classnames';\nimport Tabs from '../tabs';\nimport CheckList from '../check-list';\nimport { withNativeProps } from '../../utils/native-props';\nimport { mergeProps } from '../../utils/with-default-props';\nimport { usePropsValue } from '../../utils/use-props-value';\nimport { useCascaderValueExtend } from './use-cascader-value-extend';\nimport { useConfig } from '../config-provider';\nimport { optionSkeleton } from './option-skeleton';\nimport Skeleton from '../skeleton';\nimport { useUpdateEffect } from 'ahooks';\nconst classPrefix = `adm-cascader-view`;\nconst defaultProps = {\n  defaultValue: []\n};\nexport const CascaderView = p => {\n  const {\n    locale\n  } = useConfig();\n  const props = mergeProps(defaultProps, p);\n  const placeholder = props.placeholder || locale.Cascader.placeholder;\n  const [value, setValue] = usePropsValue(Object.assign(Object.assign({}, props), {\n    onChange: val => {\n      var _a;\n\n      (_a = props.onChange) === null || _a === void 0 ? void 0 : _a.call(props, val, generateValueExtend(val));\n    }\n  }));\n  const [tabActiveIndex, setTabActiveIndex] = useState(0);\n  useUpdateEffect(() => {\n    var _a;\n\n    (_a = props.onTabsChange) === null || _a === void 0 ? void 0 : _a.call(props, tabActiveIndex);\n  }, [tabActiveIndex]);\n  const generateValueExtend = useCascaderValueExtend(props.options);\n  const levels = useMemo(() => {\n    const ret = [];\n    let currentOptions = props.options;\n    let reachedEnd = false;\n\n    for (const v of value) {\n      const target = currentOptions.find(option => option.value === v);\n      ret.push({\n        selected: target,\n        options: currentOptions\n      });\n\n      if (!target || !target.children) {\n        reachedEnd = true;\n        break;\n      }\n\n      currentOptions = target.children;\n    }\n\n    if (!reachedEnd) {\n      ret.push({\n        selected: undefined,\n        options: currentOptions\n      });\n    }\n\n    return ret;\n  }, [value, props.options]);\n  useEffect(() => {\n    setTabActiveIndex(levels.length - 1);\n  }, [value]);\n  useEffect(() => {\n    const max = levels.length - 1;\n\n    if (tabActiveIndex > max) {\n      setTabActiveIndex(max);\n    }\n  }, [tabActiveIndex, levels]);\n\n  const onItemSelect = (selectValue, depth) => {\n    const next = value.slice(0, depth);\n\n    if (selectValue !== undefined) {\n      next[depth] = selectValue;\n    }\n\n    setValue(next);\n  };\n\n  return withNativeProps(props, React.createElement(\"div\", {\n    className: classPrefix\n  }, React.createElement(Tabs, {\n    activeKey: tabActiveIndex.toString(),\n    onChange: key => {\n      const activeIndex = parseInt(key);\n      setTabActiveIndex(activeIndex);\n    },\n    stretch: false,\n    className: `${classPrefix}-tabs`\n  }, levels.map((level, index) => {\n    const selected = level.selected;\n    return React.createElement(Tabs.Tab, {\n      key: index.toString(),\n      title: React.createElement(\"div\", {\n        className: `${classPrefix}-header-title`\n      }, selected ? selected.label : typeof placeholder === 'function' ? placeholder(index) : placeholder),\n      forceRender: true\n    }, React.createElement(\"div\", {\n      className: `${classPrefix}-content`\n    }, level.options === optionSkeleton ? React.createElement(\"div\", {\n      className: `${classPrefix}-skeleton`\n    }, React.createElement(Skeleton, {\n      className: `${classPrefix}-skeleton-line-1`,\n      animated: true\n    }), React.createElement(Skeleton, {\n      className: `${classPrefix}-skeleton-line-2`,\n      animated: true\n    }), React.createElement(Skeleton, {\n      className: `${classPrefix}-skeleton-line-3`,\n      animated: true\n    }), React.createElement(Skeleton, {\n      className: `${classPrefix}-skeleton-line-4`,\n      animated: true\n    })) : React.createElement(CheckList, {\n      value: [value[index]],\n      onChange: selectValue => onItemSelect(selectValue[0], index),\n      activeIcon: props.activeIcon\n    }, level.options.map(option => {\n      const active = value[index] === option.value;\n      return React.createElement(CheckList.Item, {\n        value: option.value,\n        key: option.value,\n        disabled: option.disabled,\n        className: classNames(`${classPrefix}-item`, {\n          [`${classPrefix}-item-active`]: active\n        })\n      }, option.label);\n    }))));\n  }))));\n};","map":null,"metadata":{},"sourceType":"module"}