{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport React from 'react';\nimport Utils from '../utils/utils';\nimport Mixins from '../utils/mixins';\nimport F7Toggle from './toggle';\nimport F7Range from './range';\nimport F7TextEditor from './text-editor';\nimport __reactComponentWatch from '../runtime-helpers/react-component-watch.js';\nimport __reactComponentDispatchEvent from '../runtime-helpers/react-component-dispatch-event.js';\nimport __reactComponentSlots from '../runtime-helpers/react-component-slots.js';\nimport __reactComponentSetProps from '../runtime-helpers/react-component-set-props.js';\n\nvar F7Input = /*#__PURE__*/function (_React$Component) {\n  _inherits(F7Input, _React$Component);\n\n  function F7Input(props, context) {\n    var _this;\n\n    _classCallCheck(this, F7Input);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(F7Input).call(this, props, context));\n    _this.__reactRefs = {};\n\n    _this.state = function () {\n      return {\n        inputFocused: false,\n        inputInvalid: false\n      };\n    }();\n\n    (function () {\n      Utils.bindMethods(_assertThisInitialized(_this), 'onFocus onBlur onInput onChange onTextareaResize onInputNotEmpty onInputEmpty onInputClear'.split(' '));\n    })();\n\n    return _this;\n  }\n\n  _createClass(F7Input, [{\n    key: \"domValue\",\n    value: function domValue() {\n      var self = this;\n      var inputEl = self.refs.inputEl;\n      if (!inputEl) return undefined;\n      return inputEl.value;\n    }\n  }, {\n    key: \"inputHasValue\",\n    value: function inputHasValue() {\n      var self = this;\n      var _self$props = self.props,\n          value = _self$props.value,\n          type = _self$props.type;\n\n      if (type === 'datepicker' && Array.isArray(value) && value.length === 0) {\n        return false;\n      }\n\n      var domValue = self.domValue();\n      return typeof value === 'undefined' ? domValue || domValue === 0 : value || value === 0;\n    }\n  }, {\n    key: \"validateInput\",\n    value: function validateInput(inputEl) {\n      var self = this;\n      var f7 = self.$f7;\n      if (!f7 || !inputEl) return;\n      var validity = inputEl.validity;\n      if (!validity) return;\n\n      if (!validity.valid) {\n        if (self.state.inputInvalid !== true) {\n          self.setState({\n            inputInvalid: true\n          });\n        }\n      } else if (self.state.inputInvalid !== false) {\n        self.setState({\n          inputInvalid: false\n        });\n      }\n    }\n  }, {\n    key: \"onTextareaResize\",\n    value: function onTextareaResize(event) {\n      this.dispatchEvent('textarea:resize textareaResize', event);\n    }\n  }, {\n    key: \"onInputNotEmpty\",\n    value: function onInputNotEmpty(event) {\n      this.dispatchEvent('input:notempty inputNotEmpty', event);\n    }\n  }, {\n    key: \"onInputEmpty\",\n    value: function onInputEmpty(event) {\n      this.dispatchEvent('input:empty inputEmpty', event);\n    }\n  }, {\n    key: \"onInputClear\",\n    value: function onInputClear(event) {\n      this.dispatchEvent('input:clear inputClear', event);\n    }\n  }, {\n    key: \"onInput\",\n    value: function onInput() {\n      var self = this;\n      var _self$props2 = self.props,\n          validate = _self$props2.validate,\n          validateOnBlur = _self$props2.validateOnBlur;\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      self.dispatchEvent.apply(self, ['input'].concat(args));\n\n      if (!(validateOnBlur || validateOnBlur === '') && (validate || validate === '') && self.refs && self.refs.inputEl) {\n        self.validateInput(self.refs.inputEl);\n      }\n    }\n  }, {\n    key: \"onFocus\",\n    value: function onFocus() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      this.dispatchEvent.apply(this, ['focus'].concat(args));\n      this.setState({\n        inputFocused: true\n      });\n    }\n  }, {\n    key: \"onBlur\",\n    value: function onBlur() {\n      var self = this;\n      var _self$props3 = self.props,\n          validate = _self$props3.validate,\n          validateOnBlur = _self$props3.validateOnBlur;\n\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      self.dispatchEvent.apply(self, ['blur'].concat(args));\n\n      if ((validate || validate === '' || validateOnBlur || validateOnBlur === '') && self.refs && self.refs.inputEl) {\n        self.validateInput(self.refs.inputEl);\n      }\n\n      self.setState({\n        inputFocused: false\n      });\n    }\n  }, {\n    key: \"onChange\",\n    value: function onChange() {\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      this.dispatchEvent.apply(this, ['change'].concat(args));\n\n      if (this.props.type === 'texteditor') {\n        this.dispatchEvent('texteditor:change textEditorChange', args[1]);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var self = this;\n      var props = self.props;\n      var type = props.type,\n          name = props.name,\n          value = props.value,\n          defaultValue = props.defaultValue,\n          placeholder = props.placeholder,\n          id = props.id,\n          inputId = props.inputId,\n          size = props.size,\n          accept = props.accept,\n          autocomplete = props.autocomplete,\n          autocorrect = props.autocorrect,\n          autocapitalize = props.autocapitalize,\n          spellcheck = props.spellcheck,\n          autofocus = props.autofocus,\n          autosave = props.autosave,\n          checked = props.checked,\n          disabled = props.disabled,\n          max = props.max,\n          min = props.min,\n          step = props.step,\n          maxlength = props.maxlength,\n          minlength = props.minlength,\n          multiple = props.multiple,\n          readonly = props.readonly,\n          required = props.required,\n          inputStyle = props.inputStyle,\n          pattern = props.pattern,\n          validate = props.validate,\n          validateOnBlur = props.validateOnBlur,\n          tabindex = props.tabindex,\n          resizable = props.resizable,\n          clearButton = props.clearButton,\n          errorMessage = props.errorMessage,\n          errorMessageForce = props.errorMessageForce,\n          info = props.info,\n          wrap = props.wrap,\n          dropdown = props.dropdown,\n          style = props.style,\n          className = props.className,\n          noStoreData = props.noStoreData,\n          noFormStoreData = props.noFormStoreData,\n          ignoreStoreData = props.ignoreStoreData,\n          outline = props.outline,\n          textEditorParams = props.textEditorParams;\n      var domValue = self.domValue();\n      var inputHasValue = self.inputHasValue();\n      var inputEl;\n\n      var createInput = function createInput(InputTag, children) {\n        var needsValue = type !== 'file' && type !== 'datepicker' && type !== 'colorpicker';\n        var needsType = InputTag === 'input';\n        var inputType = type;\n\n        if (inputType === 'datepicker' || inputType === 'colorpicker') {\n          inputType = 'text';\n        }\n\n        var inputClassName = Utils.classNames(!wrap && className, {\n          resizable: inputType === 'textarea' && resizable,\n          'no-store-data': noFormStoreData || noStoreData || ignoreStoreData,\n          'input-invalid': errorMessage && errorMessageForce || self.state.inputInvalid,\n          'input-with-value': inputHasValue,\n          'input-focused': self.state.inputFocused\n        });\n        var input;\n        var inputValue;\n\n        if (needsValue) {\n          if (typeof value !== 'undefined') inputValue = value;else inputValue = domValue;\n        }\n\n        var valueProps = {};\n\n        if (type !== 'datepicker' && type !== 'colorpicker') {\n          if ('value' in props) valueProps.value = inputValue;\n          if ('defaultValue' in props) valueProps.defaultValue = defaultValue;\n        }\n\n        {\n          input = React.createElement(InputTag, Object.assign({\n            ref: function ref(__reactNode) {\n              _this2.__reactRefs['inputEl'] = __reactNode;\n            },\n            style: inputStyle,\n            name: name,\n            type: needsType ? inputType : undefined,\n            placeholder: placeholder,\n            id: inputId,\n            size: size,\n            accept: accept,\n            autoComplete: autocomplete,\n            autoCorrect: autocorrect,\n            autoCapitalize: autocapitalize,\n            spellCheck: spellcheck,\n            autoFocus: autofocus,\n            autoSave: autosave,\n            checked: checked,\n            disabled: disabled,\n            max: max,\n            maxLength: maxlength,\n            min: min,\n            minLength: minlength,\n            step: step,\n            multiple: multiple,\n            readOnly: readonly,\n            required: required,\n            pattern: pattern,\n            validate: typeof validate === 'string' && validate.length ? validate : undefined,\n            'data-validate': validate === true || validate === '' || validateOnBlur === true || validateOnBlur === '' ? true : undefined,\n            'data-validate-on-blur': validateOnBlur === true || validateOnBlur === '' ? true : undefined,\n            tabIndex: tabindex,\n            'data-error-message': errorMessageForce ? undefined : errorMessage,\n            className: inputClassName,\n            onFocus: self.onFocus,\n            onBlur: self.onBlur,\n            onInput: self.onInput,\n            onChange: self.onChange\n          }, valueProps), children);\n        }\n        return input;\n      };\n\n      var _self$slots = self.slots,\n          slotsDefault = _self$slots.default,\n          slotsInfo = _self$slots.info;\n\n      if (type === 'select' || type === 'textarea' || type === 'file') {\n        if (type === 'select') {\n          inputEl = createInput('select', slotsDefault);\n        } else if (type === 'file') {\n          inputEl = createInput('input');\n        } else {\n          inputEl = createInput('textarea');\n        }\n      } else if (slotsDefault && slotsDefault.length > 0 || !type) {\n        inputEl = slotsDefault;\n      } else if (type === 'toggle') {\n        inputEl = React.createElement(F7Toggle, {\n          checked: checked,\n          readonly: readonly,\n          name: name,\n          value: value,\n          disabled: disabled,\n          id: inputId,\n          onChange: self.onChange\n        });\n      } else if (type === 'range') {\n        inputEl = React.createElement(F7Range, {\n          value: value,\n          disabled: disabled,\n          min: min,\n          max: max,\n          step: step,\n          name: name,\n          id: inputId,\n          input: true,\n          onRangeChange: self.onChange\n        });\n      } else if (type === 'texteditor') {\n        inputEl = React.createElement(F7TextEditor, Object.assign({\n          value: value,\n          resizable: resizable,\n          placeholder: placeholder,\n          onTextEditorFocus: self.onFocus,\n          onTextEditorBlur: self.onBlur,\n          onTextEditorInput: self.onInput,\n          onTextEditorChange: self.onChange\n        }, textEditorParams));\n      } else {\n        inputEl = createInput('input');\n      }\n\n      if (wrap) {\n        var wrapClasses = Utils.classNames(className, 'input', {\n          'input-outline': outline,\n          'input-dropdown': dropdown === 'auto' ? type === 'select' : dropdown\n        }, Mixins.colorClasses(props));\n        return React.createElement('div', {\n          id: id,\n          ref: function ref(__reactNode) {\n            _this2.__reactRefs['wrapEl'] = __reactNode;\n          },\n          className: wrapClasses,\n          style: style\n        }, inputEl, errorMessage && errorMessageForce && React.createElement('div', {\n          className: 'input-error-message'\n        }, errorMessage), clearButton && React.createElement('span', {\n          className: 'input-clear-button'\n        }), (info || slotsInfo && slotsInfo.length) && React.createElement('div', {\n          className: 'input-info'\n        }, info, this.slots['info']));\n      }\n\n      return inputEl;\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var self = this;\n      var _self$props4 = self.props,\n          type = _self$props4.type,\n          resizable = _self$props4.resizable,\n          clearButton = _self$props4.clearButton;\n      if (type === 'range' || type === 'toggle') return;\n      var inputEl = self.refs.inputEl;\n      if (!inputEl) return;\n      inputEl.removeEventListener('input:notempty', self.onInputNotEmpty, false);\n\n      if (type === 'textarea' && resizable) {\n        inputEl.removeEventListener('textarea:resize', self.onTextareaResize, false);\n      }\n\n      if (clearButton) {\n        inputEl.removeEventListener('input:empty', self.onInputEmpty, false);\n        inputEl.removeEventListener('input:clear', self.onInputClear, false);\n      }\n\n      if (self.f7Calendar && self.f7Calendar.destroy) {\n        self.f7Calendar.destroy();\n      }\n\n      if (self.f7ColorPicker && self.f7ColorPicker.destroy) {\n        self.f7ColorPicker.destroy();\n      }\n\n      delete self.f7Calendar;\n      delete self.f7ColorPicker;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this3 = this;\n\n      __reactComponentWatch(this, 'props.value', prevProps, prevState, function () {\n        var self = _this3;\n        var type = self.props.type;\n        if (type === 'range' || type === 'toggle') return;\n        if (!self.$f7) return;\n        self.updateInputOnDidUpdate = true;\n\n        if (self.f7Calendar) {\n          self.f7Calendar.setValue(self.props.value);\n        }\n\n        if (self.f7ColorPicker) {\n          self.f7ColorPicker.setValue(self.props.value);\n        }\n      });\n\n      var self = this;\n      var _self$props5 = self.props,\n          validate = _self$props5.validate,\n          validateOnBlur = _self$props5.validateOnBlur,\n          resizable = _self$props5.resizable;\n      var f7 = self.$f7;\n      if (!f7) return;\n\n      if (self.updateInputOnDidUpdate) {\n        var inputEl = self.refs.inputEl;\n        if (!inputEl) return;\n        self.updateInputOnDidUpdate = false;\n        f7.input.checkEmptyState(inputEl);\n\n        if (validate && !validateOnBlur) {\n          self.validateInput(inputEl);\n        }\n\n        if (resizable) {\n          f7.input.resizeTextarea(inputEl);\n        }\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var self = this;\n      self.$f7ready(function (f7) {\n        var _self$props6 = self.props,\n            validate = _self$props6.validate,\n            validateOnBlur = _self$props6.validateOnBlur,\n            resizable = _self$props6.resizable,\n            type = _self$props6.type,\n            clearButton = _self$props6.clearButton,\n            value = _self$props6.value,\n            defaultValue = _self$props6.defaultValue,\n            calendarParams = _self$props6.calendarParams,\n            colorPickerParams = _self$props6.colorPickerParams;\n        if (type === 'range' || type === 'toggle') return;\n        var inputEl = self.refs.inputEl;\n        if (!inputEl) return;\n        inputEl.addEventListener('input:notempty', self.onInputNotEmpty, false);\n\n        if (type === 'textarea' && resizable) {\n          inputEl.addEventListener('textarea:resize', self.onTextareaResize, false);\n        }\n\n        if (clearButton) {\n          inputEl.addEventListener('input:empty', self.onInputEmpty, false);\n          inputEl.addEventListener('input:clear', self.onInputClear, false);\n        }\n\n        if (type === 'datepicker') {\n          self.f7Calendar = f7.calendar.create(Object.assign({\n            inputEl: inputEl,\n            value: value,\n            on: {\n              change: function change(calendar, calendarValue) {\n                self.dispatchEvent('calendar:change calendarChange', calendarValue);\n              }\n            }\n          }, calendarParams || {}));\n        }\n\n        if (type === 'colorpicker') {\n          self.f7ColorPicker = f7.colorPicker.create(Object.assign({\n            inputEl: inputEl,\n            value: value,\n            on: {\n              change: function change(colorPicker, colorPickerValue) {\n                self.dispatchEvent('colorpicker:change colorPickerChange', colorPickerValue);\n              }\n            }\n          }, colorPickerParams || {}));\n        }\n\n        f7.input.checkEmptyState(inputEl);\n\n        if (!(validateOnBlur || validateOnBlur === '') && (validate || validate === '') && (typeof value !== 'undefined' && value !== null && value !== '' || typeof defaultValue !== 'undefined' && defaultValue !== null && defaultValue !== '')) {\n          setTimeout(function () {\n            self.validateInput(inputEl);\n          }, 0);\n        }\n\n        if (resizable) {\n          f7.input.resizeTextarea(inputEl);\n        }\n      });\n    }\n  }, {\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(events) {\n      for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n        args[_key5 - 1] = arguments[_key5];\n      }\n\n      return __reactComponentDispatchEvent.apply(void 0, [this, events].concat(args));\n    }\n  }, {\n    key: \"slots\",\n    get: function get() {\n      return __reactComponentSlots(this.props);\n    }\n  }, {\n    key: \"refs\",\n    get: function get() {\n      return this.__reactRefs;\n    },\n    set: function set(refs) {}\n  }]);\n\n  return F7Input;\n}(React.Component);\n\n__reactComponentSetProps(F7Input, Object.assign({\n  type: String,\n  name: String,\n  value: [String, Number, Array, Date, Object],\n  defaultValue: [String, Number, Array],\n  placeholder: String,\n  id: [String, Number],\n  className: String,\n  style: Object,\n  inputId: [String, Number],\n  size: [String, Number],\n  accept: [String, Number],\n  autocomplete: [String],\n  autocorrect: [String],\n  autocapitalize: [String],\n  spellcheck: [String],\n  autofocus: Boolean,\n  autosave: String,\n  checked: Boolean,\n  disabled: Boolean,\n  max: [String, Number],\n  min: [String, Number],\n  step: [String, Number],\n  maxlength: [String, Number],\n  minlength: [String, Number],\n  multiple: Boolean,\n  readonly: Boolean,\n  required: Boolean,\n  inputStyle: Object,\n  pattern: String,\n  validate: [Boolean, String],\n  validateOnBlur: Boolean,\n  tabindex: [String, Number],\n  resizable: Boolean,\n  clearButton: Boolean,\n  noFormStoreData: Boolean,\n  noStoreData: Boolean,\n  ignoreStoreData: Boolean,\n  errorMessage: String,\n  errorMessageForce: Boolean,\n  info: String,\n  outline: Boolean,\n  wrap: {\n    type: Boolean,\n    default: true\n  },\n  dropdown: {\n    type: [String, Boolean],\n    default: 'auto'\n  },\n  calendarParams: Object,\n  colorPickerParams: Object,\n  textEditorParams: Object\n}, Mixins.colorProps));\n\nF7Input.displayName = 'f7-input';\nexport default F7Input;","map":null,"metadata":{},"sourceType":"module"}