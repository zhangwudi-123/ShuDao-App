{"ast":null,"code":"import { useMemo } from 'react';\nimport memoize from 'lodash/memoize';\nexport function useCascaderValueExtend(options) {\n  const generateItems = useMemo(() => {\n    return memoize(val => {\n      const ret = [];\n      let currentOptions = options;\n\n      for (const v of val) {\n        const target = currentOptions.find(option => option.value === v);\n\n        if (!target) {\n          break;\n        }\n\n        ret.push(target);\n        if (!target.children) break;\n        currentOptions = target.children;\n      }\n\n      return ret;\n    }, val => JSON.stringify(val));\n  }, [options]);\n  const generateIsLeaf = useMemo(() => {\n    return memoize(val => {\n      const children = val.reduce((currentOptions, v) => {\n        var _a;\n\n        return ((_a = currentOptions.find(option => option.value === v)) === null || _a === void 0 ? void 0 : _a.children) || [];\n      }, options);\n      return children.length === 0;\n    }, val => JSON.stringify(val));\n  }, [options]);\n\n  function generateValueExtend(val) {\n    return {\n      get items() {\n        return generateItems(val);\n      },\n\n      get isLeaf() {\n        return generateIsLeaf(val);\n      }\n\n    };\n  }\n\n  return generateValueExtend;\n}","map":null,"metadata":{},"sourceType":"module"}