{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport React from 'react';\nimport Utils from '../utils/utils';\nimport Mixins from '../utils/mixins';\nimport __reactComponentSlots from '../runtime-helpers/react-component-slots.js';\nimport __reactComponentSetProps from '../runtime-helpers/react-component-set-props.js';\n\nvar F7Segmented = /*#__PURE__*/function (_React$Component) {\n  _inherits(F7Segmented, _React$Component);\n\n  function F7Segmented(props, context) {\n    _classCallCheck(this, F7Segmented);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(F7Segmented).call(this, props, context));\n  }\n\n  _createClass(F7Segmented, [{\n    key: \"render\",\n    value: function render() {\n      var self = this;\n      var props = self.props;\n      var className = props.className,\n          raised = props.raised,\n          raisedIos = props.raisedIos,\n          raisedAurora = props.raisedAurora,\n          raisedMd = props.raisedMd,\n          round = props.round,\n          roundIos = props.roundIos,\n          roundAurora = props.roundAurora,\n          roundMd = props.roundMd,\n          strong = props.strong,\n          strongIos = props.strongIos,\n          strongMd = props.strongMd,\n          strongAurora = props.strongAurora,\n          id = props.id,\n          style = props.style,\n          tag = props.tag;\n      var classNames = Utils.classNames(className, {\n        segmented: true,\n        'segmented-raised': raised,\n        'segmented-raised-ios': raisedIos,\n        'segmented-raised-aurora': raisedAurora,\n        'segmented-raised-md': raisedMd,\n        'segmented-round': round,\n        'segmented-round-ios': roundIos,\n        'segmented-round-aurora': roundAurora,\n        'segmented-round-md': roundMd,\n        'segmented-strong': strong,\n        'segmented-strong-ios': strongIos,\n        'segmented-strong-md': strongMd,\n        'segmented-strong-aurora': strongAurora\n      }, Mixins.colorClasses(props));\n      var SegmentedTag = tag;\n      return React.createElement(SegmentedTag, {\n        id: id,\n        style: style,\n        className: classNames\n      }, this.slots['default']);\n    }\n  }, {\n    key: \"slots\",\n    get: function get() {\n      return __reactComponentSlots(this.props);\n    }\n  }]);\n\n  return F7Segmented;\n}(React.Component);\n\n__reactComponentSetProps(F7Segmented, Object.assign({\n  id: [String, Number],\n  className: String,\n  style: Object,\n  raised: Boolean,\n  raisedIos: Boolean,\n  raisedMd: Boolean,\n  raisedAurora: Boolean,\n  round: Boolean,\n  roundIos: Boolean,\n  roundMd: Boolean,\n  roundAurora: Boolean,\n  strong: Boolean,\n  strongIos: Boolean,\n  strongMd: Boolean,\n  strongAurora: Boolean,\n  tag: {\n    type: String,\n    default: 'div'\n  }\n}, Mixins.colorProps));\n\nF7Segmented.displayName = 'f7-segmented';\nexport default F7Segmented;","map":null,"metadata":{},"sourceType":"module"}