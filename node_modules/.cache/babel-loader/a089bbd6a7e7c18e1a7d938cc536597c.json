{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport React from 'react';\nimport Utils from '../utils/utils';\nimport Mixins from '../utils/mixins';\nimport __reactComponentWatch from '../runtime-helpers/react-component-watch.js';\nimport __reactComponentDispatchEvent from '../runtime-helpers/react-component-dispatch-event.js';\nimport __reactComponentSlots from '../runtime-helpers/react-component-slots.js';\nimport __reactComponentSetProps from '../runtime-helpers/react-component-set-props.js';\n\nvar F7TextEditor = /*#__PURE__*/function (_React$Component) {\n  _inherits(F7TextEditor, _React$Component);\n\n  function F7TextEditor(props, context) {\n    var _this;\n\n    _classCallCheck(this, F7TextEditor);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(F7TextEditor).call(this, props, context));\n    _this.__reactRefs = {};\n\n    (function () {\n      Utils.bindMethods(_assertThisInitialized(_this), 'onChange onInput onFocus onBlur onButtonClick onKeyboardOpen onKeyboardClose onPopoverOpen onPopoverClose'.split(' '));\n    })();\n\n    return _this;\n  }\n\n  _createClass(F7TextEditor, [{\n    key: \"onChange\",\n    value: function onChange(editor, value) {\n      this.dispatchEvent('texteditor:change textEditorChange', value);\n    }\n  }, {\n    key: \"onInput\",\n    value: function onInput() {\n      this.dispatchEvent('texteditor:change textEditorChange');\n    }\n  }, {\n    key: \"onFocus\",\n    value: function onFocus() {\n      this.dispatchEvent('texteditor:focus textEditorFocus');\n    }\n  }, {\n    key: \"onBlur\",\n    value: function onBlur() {\n      this.dispatchEvent('texteditor:blur textEditorBlur');\n    }\n  }, {\n    key: \"onButtonClick\",\n    value: function onButtonClick(editor, button) {\n      this.dispatchEvent('texteditor:buttonclick textEditorButtonClick', button);\n    }\n  }, {\n    key: \"onKeyboardOpen\",\n    value: function onKeyboardOpen() {\n      this.dispatchEvent('texteditor:keyboardopen textEditorKeyboardOpen');\n    }\n  }, {\n    key: \"onKeyboardClose\",\n    value: function onKeyboardClose() {\n      this.dispatchEvent('texteditor:keyboardclose textEditorKeyboardClose');\n    }\n  }, {\n    key: \"onPopoverOpen\",\n    value: function onPopoverOpen() {\n      this.dispatchEvent('texteditor:popoveropen textEditorPopoverOpen');\n    }\n  }, {\n    key: \"onPopoverClose\",\n    value: function onPopoverClose() {\n      this.dispatchEvent('texteditor:popoverclose textEditorPopoverClose');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var props = this.props;\n      var className = props.className,\n          id = props.id,\n          style = props.style,\n          resizable = props.resizable;\n      var classes = Utils.classNames(className, 'text-editor', resizable && 'text-editor-resizable', Mixins.colorClasses(props));\n      return React.createElement('div', {\n        ref: function ref(__reactNode) {\n          _this2.__reactRefs['el'] = __reactNode;\n        },\n        id: id,\n        style: style,\n        className: classes\n      }, this.slots['root-start'], React.createElement('div', {\n        className: 'text-editor-content',\n        contentEditable: true\n      }, this.slots['default']), this.slots['root-end'], this.slots['root']);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.f7TextEditor && this.f7TextEditor.destroy) {\n        this.f7TextEditor.destroy();\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this3 = this;\n\n      var props = this.props;\n      var mode = props.mode,\n          value = props.value,\n          palceholder = props.palceholder,\n          buttons = props.buttons,\n          customButtons = props.customButtons,\n          dividers = props.dividers,\n          imageUrlText = props.imageUrlText,\n          linkUrlText = props.linkUrlText,\n          placeholder = props.placeholder,\n          clearFormattingOnPaste = props.clearFormattingOnPaste;\n      var params = Utils.noUndefinedProps({\n        el: this.refs.el,\n        mode: mode,\n        value: value,\n        palceholder: palceholder,\n        buttons: buttons,\n        customButtons: customButtons,\n        dividers: dividers,\n        imageUrlText: imageUrlText,\n        linkUrlText: linkUrlText,\n        placeholder: placeholder,\n        clearFormattingOnPaste: clearFormattingOnPaste,\n        on: {\n          onChange: this.onChange,\n          onInput: this.onInput,\n          onFocus: this.onFocus,\n          onBlur: this.onBlur,\n          onButtonClick: this.onButtonClick,\n          onKeyboardOpen: this.onKeyboardOpen,\n          onKeyboardClose: this.onKeyboardClose,\n          onPopoverOpen: this.onPopoverOpen,\n          onPopoverClose: this.onPopoverClose\n        }\n      });\n      this.$f7ready(function (f7) {\n        _this3.f7TextEditor = f7.textEditor.create(params);\n      });\n    }\n  }, {\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(events) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return __reactComponentDispatchEvent.apply(void 0, [this, events].concat(args));\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this4 = this;\n\n      __reactComponentWatch(this, 'props.value', prevProps, prevState, function () {\n        if (_this4.f7TextEditor) {\n          _this4.f7TextEditor.setValue(_this4.props.value);\n        }\n      });\n    }\n  }, {\n    key: \"slots\",\n    get: function get() {\n      return __reactComponentSlots(this.props);\n    }\n  }, {\n    key: \"refs\",\n    get: function get() {\n      return this.__reactRefs;\n    },\n    set: function set(refs) {}\n  }]);\n\n  return F7TextEditor;\n}(React.Component);\n\n__reactComponentSetProps(F7TextEditor, Object.assign({\n  id: [String, Number],\n  className: String,\n  style: Object\n}, Mixins.colorProps, {\n  mode: {\n    type: String,\n    default: undefined\n  },\n  value: {\n    type: String,\n    default: undefined\n  },\n  buttons: Array,\n  customButtons: Object,\n  dividers: {\n    type: Boolean,\n    default: undefined\n  },\n  imageUrlText: {\n    type: String,\n    default: undefined\n  },\n  linkUrlText: {\n    type: String,\n    default: undefined\n  },\n  placeholder: {\n    type: String,\n    default: undefined\n  },\n  clearFormattingOnPaste: {\n    type: Boolean,\n    default: undefined\n  },\n  resizable: {\n    type: Boolean,\n    default: false\n  }\n}));\n\nF7TextEditor.displayName = 'f7-text-editor';\nexport default F7TextEditor;","map":null,"metadata":{},"sourceType":"module"}