{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport React from 'react';\nimport Utils from '../utils/utils';\nimport F7ListItemContent from './list-item-content';\nimport Mixins from '../utils/mixins';\nimport __reactComponentWatch from '../runtime-helpers/react-component-watch.js';\nimport __reactComponentDispatchEvent from '../runtime-helpers/react-component-dispatch-event.js';\nimport __reactComponentSlots from '../runtime-helpers/react-component-slots.js';\nimport __reactComponentSetProps from '../runtime-helpers/react-component-set-props.js';\n\nvar F7ListItem = /*#__PURE__*/function (_React$Component) {\n  _inherits(F7ListItem, _React$Component);\n\n  function F7ListItem(props, context) {\n    var _this;\n\n    _classCallCheck(this, F7ListItem);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(F7ListItem).call(this, props, context));\n    _this.__reactRefs = {};\n\n    _this.state = function () {\n      return {\n        isMedia: props.mediaItem || props.mediaList,\n        isSortable: props.sortable,\n        isSimple: false\n      };\n    }();\n\n    (function () {\n      Utils.bindMethods(_assertThisInitialized(_this), ['onClick', 'onChange', 'onSwipeoutOpen', 'onSwipeoutOpened', 'onSwipeoutClose', 'onSwipeoutClosed', 'onSwipeoutDelete', 'onSwipeoutDeleted', 'onSwipeoutOverswipeEnter', 'onSwipeoutOverswipeExit', 'onSwipeout', 'onAccBeforeOpen', 'onAccOpen', 'onAccOpened', 'onAccBeforeClose', 'onAccClose', 'onAccClosed']);\n    })();\n\n    return _this;\n  }\n\n  _createClass(F7ListItem, [{\n    key: \"onClick\",\n    value: function onClick(event) {\n      var self = this;\n\n      if (event.target.tagName.toLowerCase() !== 'input') {\n        self.dispatchEvent('click', event);\n      }\n    }\n  }, {\n    key: \"onSwipeoutOverswipeEnter\",\n    value: function onSwipeoutOverswipeEnter(el) {\n      if (this.eventTargetEl !== el) return;\n      this.dispatchEvent('swipeout:overswipeenter swipeoutOverswipeEnter');\n    }\n  }, {\n    key: \"onSwipeoutOverswipeExit\",\n    value: function onSwipeoutOverswipeExit(el) {\n      if (this.eventTargetEl !== el) return;\n      this.dispatchEvent('swipeout:overswipeexit swipeoutOverswipeExit');\n    }\n  }, {\n    key: \"onSwipeoutDeleted\",\n    value: function onSwipeoutDeleted(el) {\n      if (this.eventTargetEl !== el) return;\n      this.dispatchEvent('swipeout:deleted swipeoutDeleted');\n    }\n  }, {\n    key: \"onSwipeoutDelete\",\n    value: function onSwipeoutDelete(el) {\n      if (this.eventTargetEl !== el) return;\n      this.dispatchEvent('swipeout:delete swipeoutDelete');\n    }\n  }, {\n    key: \"onSwipeoutClose\",\n    value: function onSwipeoutClose(el) {\n      if (this.eventTargetEl !== el) return;\n      this.dispatchEvent('swipeout:close swipeoutClose');\n    }\n  }, {\n    key: \"onSwipeoutClosed\",\n    value: function onSwipeoutClosed(el) {\n      if (this.eventTargetEl !== el) return;\n      this.dispatchEvent('swipeout:closed swipeoutClosed');\n    }\n  }, {\n    key: \"onSwipeoutOpen\",\n    value: function onSwipeoutOpen(el) {\n      if (this.eventTargetEl !== el) return;\n      this.dispatchEvent('swipeout:open swipeoutOpen');\n    }\n  }, {\n    key: \"onSwipeoutOpened\",\n    value: function onSwipeoutOpened(el) {\n      if (this.eventTargetEl !== el) return;\n      this.dispatchEvent('swipeout:opened swipeoutOpened');\n    }\n  }, {\n    key: \"onSwipeout\",\n    value: function onSwipeout(el, progress) {\n      if (this.eventTargetEl !== el) return;\n      this.dispatchEvent('swipeout', progress);\n    }\n  }, {\n    key: \"onAccBeforeClose\",\n    value: function onAccBeforeClose(el, prevent) {\n      if (this.eventTargetEl !== el) return;\n      this.dispatchEvent('accordion:beforeclose accordionBeforeClose', prevent);\n    }\n  }, {\n    key: \"onAccClose\",\n    value: function onAccClose(el) {\n      if (this.eventTargetEl !== el) return;\n      this.dispatchEvent('accordion:close accordionClose');\n    }\n  }, {\n    key: \"onAccClosed\",\n    value: function onAccClosed(el) {\n      if (this.eventTargetEl !== el) return;\n      this.dispatchEvent('accordion:closed accordionClosed');\n    }\n  }, {\n    key: \"onAccBeforeOpen\",\n    value: function onAccBeforeOpen(el, prevent) {\n      if (this.eventTargetEl !== el) return;\n      this.dispatchEvent('accordion:beforeopen accordionBeforeOpen', prevent);\n    }\n  }, {\n    key: \"onAccOpen\",\n    value: function onAccOpen(el) {\n      if (this.eventTargetEl !== el) return;\n      this.dispatchEvent('accordion:open accordionOpen');\n    }\n  }, {\n    key: \"onAccOpened\",\n    value: function onAccOpened(el) {\n      if (this.eventTargetEl !== el) return;\n      this.dispatchEvent('accordion:opened accordionOpened');\n    }\n  }, {\n    key: \"onChange\",\n    value: function onChange(event) {\n      this.dispatchEvent('change', event);\n    }\n  }, {\n    key: \"onInput\",\n    value: function onInput(event) {\n      this.dispatchEvent('input', event);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var self = this;\n      var linkEl;\n      var itemContentEl;\n      var props = self.props;\n      var id = props.id,\n          style = props.style,\n          className = props.className,\n          title = props.title,\n          text = props.text,\n          media = props.media,\n          subtitle = props.subtitle,\n          header = props.header,\n          footer = props.footer,\n          link = props.link,\n          href = props.href,\n          target = props.target,\n          after = props.after,\n          badge = props.badge,\n          badgeColor = props.badgeColor,\n          mediaItem = props.mediaItem,\n          mediaList = props.mediaList,\n          divider = props.divider,\n          groupTitle = props.groupTitle,\n          swipeout = props.swipeout,\n          accordionItem = props.accordionItem,\n          accordionItemOpened = props.accordionItemOpened,\n          smartSelect = props.smartSelect,\n          checkbox = props.checkbox,\n          radio = props.radio,\n          checked = props.checked,\n          defaultChecked = props.defaultChecked,\n          indeterminate = props.indeterminate,\n          name = props.name,\n          value = props.value,\n          readonly = props.readonly,\n          required = props.required,\n          disabled = props.disabled,\n          sortable = props.sortable,\n          noChevron = props.noChevron,\n          chevronCenter = props.chevronCenter,\n          virtualListIndex = props.virtualListIndex;\n      var isMedia = mediaItem || mediaList || self.state.isMedia;\n      var isSortable = sortable || self.state.isSortable;\n      var isSimple = self.state.isSimple;\n\n      if (!isSimple) {\n        var needsEvents = !(link || href || accordionItem || smartSelect);\n        itemContentEl = React.createElement(F7ListItemContent, {\n          title: title,\n          text: text,\n          media: media,\n          subtitle: subtitle,\n          after: after,\n          header: header,\n          footer: footer,\n          badge: badge,\n          badgeColor: badgeColor,\n          mediaList: isMedia,\n          accordionItem: accordionItem,\n          checkbox: checkbox,\n          checked: checked,\n          defaultChecked: defaultChecked,\n          indeterminate: indeterminate,\n          radio: radio,\n          name: name,\n          value: value,\n          readonly: readonly,\n          required: required,\n          disabled: disabled,\n          onClick: needsEvents ? self.onClick : null,\n          onChange: needsEvents ? self.onChange : null\n        }, this.slots['content-start'], this.slots['content'], this.slots['content-end'], this.slots['media'], this.slots['inner-start'], this.slots['inner'], this.slots['inner-end'], this.slots['after-start'], this.slots['after'], this.slots['after-end'], this.slots['header'], this.slots['footer'], this.slots['before-title'], this.slots['title'], this.slots['after-title'], this.slots['subtitle'], this.slots['text'], swipeout || accordionItem ? null : self.slots.default);\n\n        if (link || href || accordionItem || smartSelect) {\n          var linkAttrs = Object.assign({\n            href: link === true ? '' : link || href,\n            target: target\n          }, Mixins.linkRouterAttrs(props), {}, Mixins.linkActionsAttrs(props));\n          var linkClasses = Utils.classNames({\n            'item-link': true,\n            'smart-select': smartSelect\n          }, Mixins.linkRouterClasses(props), Mixins.linkActionsClasses(props));\n          linkEl = React.createElement('a', Object.assign({\n            ref: function ref(__reactNode) {\n              _this2.__reactRefs['linkEl'] = __reactNode;\n            },\n            className: linkClasses\n          }, linkAttrs), itemContentEl);\n        }\n      }\n\n      var liClasses = Utils.classNames(className, {\n        'item-divider': divider,\n        'list-group-title': groupTitle,\n        'media-item': isMedia,\n        swipeout: swipeout,\n        'accordion-item': accordionItem,\n        'accordion-item-opened': accordionItemOpened,\n        disabled: disabled && !(radio || checkbox),\n        'no-chevron': noChevron,\n        'chevron-center': chevronCenter,\n        'disallow-sorting': sortable === false\n      }, Mixins.colorClasses(props));\n\n      if (divider || groupTitle) {\n        return React.createElement('li', {\n          ref: function ref(__reactNode) {\n            _this2.__reactRefs['el'] = __reactNode;\n          },\n          id: id,\n          style: style,\n          className: liClasses,\n          'data-virtual-list-index': virtualListIndex\n        }, React.createElement('span', null, this.slots['default'], !this.slots.default && title));\n      }\n\n      if (isSimple) {\n        return React.createElement('li', {\n          ref: function ref(__reactNode) {\n            _this2.__reactRefs['el'] = __reactNode;\n          },\n          id: id,\n          style: style,\n          className: liClasses,\n          'data-virtual-list-index': virtualListIndex\n        }, title, this.slots['default']);\n      }\n\n      var linkItemEl = link || href || smartSelect || accordionItem ? linkEl : itemContentEl;\n      return React.createElement('li', {\n        ref: function ref(__reactNode) {\n          _this2.__reactRefs['el'] = __reactNode;\n        },\n        id: id,\n        style: style,\n        className: liClasses,\n        'data-virtual-list-index': virtualListIndex\n      }, this.slots['root-start'], swipeout ? React.createElement('div', {\n        className: 'swipeout-content'\n      }, linkItemEl) : linkItemEl, isSortable && sortable !== false && React.createElement('div', {\n        className: 'sortable-handler'\n      }), (swipeout || accordionItem) && self.slots.default, this.slots['root'], this.slots['root-end']);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var self = this;\n      var linkEl = self.refs.linkEl;\n      var _self$props = self.props,\n          link = _self$props.link,\n          href = _self$props.href,\n          smartSelect = _self$props.smartSelect,\n          swipeout = _self$props.swipeout,\n          accordionItem = _self$props.accordionItem;\n      var needsEvents = !(link || href || accordionItem || smartSelect);\n\n      if (linkEl) {\n        if (!needsEvents) {\n          linkEl.removeEventListener('click', self.onClick);\n        }\n\n        delete linkEl.f7RouteProps;\n      }\n\n      if (self.$f7) {\n        var f7 = self.$f7;\n\n        if (swipeout) {\n          f7.off('swipeoutOpen', self.onSwipeoutOpen);\n          f7.off('swipeoutOpened', self.onSwipeoutOpened);\n          f7.off('swipeoutClose', self.onSwipeoutClose);\n          f7.off('swipeoutClosed', self.onSwipeoutClosed);\n          f7.off('swipeoutDelete', self.onSwipeoutDelete);\n          f7.off('swipeoutDeleted', self.onSwipeoutDeleted);\n          f7.off('swipeoutOverswipeEnter', self.onSwipeoutOverswipeEnter);\n          f7.off('swipeoutOverswipeExit', self.onSwipeoutOverswipeExit);\n          f7.off('swipeout', self.onSwipeout);\n        }\n\n        if (accordionItem) {\n          f7.off('accordionBeforeOpen', self.onAccBeforeOpen);\n          f7.off('accordionOpen', self.onAccOpen);\n          f7.off('accordionOpened', self.onAccOpened);\n          f7.off('accordionBeforeClose', self.onAccBeforeClose);\n          f7.off('accordionClose', self.onAccClose);\n          f7.off('accordionClosed', self.onAccClosed);\n        }\n      }\n\n      if (smartSelect && self.f7SmartSelect) {\n        self.f7SmartSelect.destroy();\n      }\n\n      if (self.f7Tooltip && self.f7Tooltip.destroy) {\n        self.f7Tooltip.destroy();\n        self.f7Tooltip = null;\n        delete self.f7Tooltip;\n      }\n\n      self.eventTargetEl = null;\n      delete self.eventTargetEl;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this3 = this;\n\n      __reactComponentWatch(this, 'props.tooltip', prevProps, prevState, function (newText) {\n        var self = _this3;\n\n        if (!newText && self.f7Tooltip) {\n          self.f7Tooltip.destroy();\n          self.f7Tooltip = null;\n          delete self.f7Tooltip;\n          return;\n        }\n\n        if (newText && !self.f7Tooltip && self.$f7) {\n          self.f7Tooltip = self.$f7.tooltip.create({\n            targetEl: self.refs.el,\n            text: newText\n          });\n          return;\n        }\n\n        if (!newText || !self.f7Tooltip) return;\n        self.f7Tooltip.setText(newText);\n      });\n\n      __reactComponentWatch(this, 'props.swipeoutOpened', prevProps, prevState, function (opened) {\n        var self = _this3;\n        if (!self.props.swipeout) return;\n        var el = self.refs.el;\n\n        if (opened) {\n          self.$f7.swipeout.open(el);\n        } else {\n          self.$f7.swipeout.close(el);\n        }\n      });\n\n      var self = this;\n      var $listEl = self.$listEl;\n      var linkEl = self.refs.linkEl;\n      var routeProps = self.props.routeProps;\n\n      if (linkEl && routeProps) {\n        linkEl.f7RouteProps = routeProps;\n      }\n\n      if (!$listEl || $listEl && $listEl.length === 0) return;\n      var isMedia = $listEl.hasClass('media-list');\n      var isSimple = $listEl.hasClass('simple-list');\n      var isSortable = $listEl.hasClass('sortable');\n\n      if (isMedia !== self.state.isMedia) {\n        self.setState({\n          isMedia: isMedia\n        });\n      }\n\n      if (isSimple !== self.state.isSimple) {\n        self.setState({\n          isSimple: isSimple\n        });\n      }\n\n      if (isSortable !== self.state.isSortable) {\n        self.setState({\n          isSortable: isSortable\n        });\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var self = this;\n      var _self$refs = self.refs,\n          el = _self$refs.el,\n          linkEl = _self$refs.linkEl;\n      if (!el) return;\n      var _self$props2 = self.props,\n          link = _self$props2.link,\n          href = _self$props2.href,\n          smartSelect = _self$props2.smartSelect,\n          swipeout = _self$props2.swipeout,\n          swipeoutOpened = _self$props2.swipeoutOpened,\n          accordionItem = _self$props2.accordionItem,\n          smartSelectParams = _self$props2.smartSelectParams,\n          routeProps = _self$props2.routeProps,\n          tooltip = _self$props2.tooltip;\n      var needsEvents = !(link || href || accordionItem || smartSelect);\n\n      if (!needsEvents && linkEl) {\n        linkEl.addEventListener('click', self.onClick);\n      }\n\n      if (linkEl && routeProps) {\n        linkEl.f7RouteProps = routeProps;\n      }\n\n      self.$listEl = self.$$(el).parents('.list, .list-group').eq(0);\n\n      if (self.$listEl.length) {\n        self.setState({\n          isMedia: self.$listEl.hasClass('media-list'),\n          isSimple: self.$listEl.hasClass('simple-list'),\n          isSortable: self.$listEl.hasClass('sortable')\n        });\n      }\n\n      self.$f7ready(function (f7) {\n        self.eventTargetEl = el;\n\n        if (swipeout) {\n          f7.on('swipeoutOpen', self.onSwipeoutOpen);\n          f7.on('swipeoutOpened', self.onSwipeoutOpened);\n          f7.on('swipeoutClose', self.onSwipeoutClose);\n          f7.on('swipeoutClosed', self.onSwipeoutClosed);\n          f7.on('swipeoutDelete', self.onSwipeoutDelete);\n          f7.on('swipeoutDeleted', self.onSwipeoutDeleted);\n          f7.on('swipeoutOverswipeEnter', self.onSwipeoutOverswipeEnter);\n          f7.on('swipeoutOverswipeExit', self.onSwipeoutOverswipeExit);\n          f7.on('swipeout', self.onSwipeout);\n        }\n\n        if (accordionItem) {\n          f7.on('accordionBeforeOpen', self.onAccBeforeOpen);\n          f7.on('accordionOpen', self.onAccOpen);\n          f7.on('accordionOpened', self.onAccOpened);\n          f7.on('accordionBeforeClose', self.onAccBeforeClose);\n          f7.on('accordionClose', self.onAccClose);\n          f7.on('accordionClosed', self.onAccClosed);\n        }\n\n        if (smartSelect) {\n          var ssParams = Utils.extend({\n            el: el.querySelector('a.smart-select')\n          }, smartSelectParams || {});\n          self.f7SmartSelect = f7.smartSelect.create(ssParams);\n        }\n\n        if (swipeoutOpened) {\n          f7.swipeout.open(el);\n        }\n\n        if (tooltip) {\n          self.f7Tooltip = f7.tooltip.create({\n            targetEl: el,\n            text: tooltip\n          });\n        }\n      });\n    }\n  }, {\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(events) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return __reactComponentDispatchEvent.apply(void 0, [this, events].concat(args));\n    }\n  }, {\n    key: \"slots\",\n    get: function get() {\n      return __reactComponentSlots(this.props);\n    }\n  }, {\n    key: \"refs\",\n    get: function get() {\n      return this.__reactRefs;\n    },\n    set: function set(refs) {}\n  }]);\n\n  return F7ListItem;\n}(React.Component);\n\n__reactComponentSetProps(F7ListItem, Object.assign({\n  id: [String, Number],\n  className: String,\n  style: Object,\n  title: [String, Number],\n  text: [String, Number],\n  media: String,\n  subtitle: [String, Number],\n  header: [String, Number],\n  footer: [String, Number],\n  tooltip: String,\n  link: [Boolean, String],\n  target: String,\n  after: [String, Number],\n  badge: [String, Number],\n  badgeColor: String,\n  mediaItem: Boolean,\n  mediaList: Boolean,\n  divider: Boolean,\n  groupTitle: Boolean,\n  swipeout: Boolean,\n  swipeoutOpened: Boolean,\n  sortable: {\n    type: Boolean,\n    default: undefined\n  },\n  accordionItem: Boolean,\n  accordionItemOpened: Boolean,\n  smartSelect: Boolean,\n  smartSelectParams: Object,\n  noChevron: Boolean,\n  chevronCenter: Boolean,\n  checkbox: Boolean,\n  radio: Boolean,\n  checked: Boolean,\n  defaultChecked: Boolean,\n  indeterminate: Boolean,\n  name: String,\n  value: [String, Number, Array],\n  readonly: Boolean,\n  required: Boolean,\n  disabled: Boolean,\n  virtualListIndex: Number\n}, Mixins.colorProps, {}, Mixins.linkRouterProps, {}, Mixins.linkActionsProps));\n\nF7ListItem.displayName = 'f7-list-item';\nexport default F7ListItem;","map":null,"metadata":{},"sourceType":"module"}