{"ast":null,"code":"import { __read, __spreadArray } from \"tslib\";\nimport { useCallback, useRef, useState } from 'react';\n\nvar useDynamicList = function (initialList) {\n  if (initialList === void 0) {\n    initialList = [];\n  }\n\n  var counterRef = useRef(-1);\n  var keyList = useRef([]);\n  var setKey = useCallback(function (index) {\n    counterRef.current += 1;\n    keyList.current.splice(index, 0, counterRef.current);\n  }, []);\n\n  var _a = __read(useState(function () {\n    initialList.forEach(function (_, index) {\n      setKey(index);\n    });\n    return initialList;\n  }), 2),\n      list = _a[0],\n      setList = _a[1];\n\n  var resetList = useCallback(function (newList) {\n    keyList.current = [];\n    setList(function () {\n      newList.forEach(function (_, index) {\n        setKey(index);\n      });\n      return newList;\n    });\n  }, []);\n  var insert = useCallback(function (index, item) {\n    setList(function (l) {\n      var temp = __spreadArray([], __read(l), false);\n\n      temp.splice(index, 0, item);\n      setKey(index);\n      return temp;\n    });\n  }, []);\n  var getKey = useCallback(function (index) {\n    return keyList.current[index];\n  }, []);\n  var getIndex = useCallback(function (key) {\n    return keyList.current.findIndex(function (ele) {\n      return ele === key;\n    });\n  }, []);\n  var merge = useCallback(function (index, items) {\n    setList(function (l) {\n      var temp = __spreadArray([], __read(l), false);\n\n      items.forEach(function (_, i) {\n        setKey(index + i);\n      });\n      temp.splice.apply(temp, __spreadArray([index, 0], __read(items), false));\n      return temp;\n    });\n  }, []);\n  var replace = useCallback(function (index, item) {\n    setList(function (l) {\n      var temp = __spreadArray([], __read(l), false);\n\n      temp[index] = item;\n      return temp;\n    });\n  }, []);\n  var remove = useCallback(function (index) {\n    setList(function (l) {\n      var temp = __spreadArray([], __read(l), false);\n\n      temp.splice(index, 1); // remove keys if necessary\n\n      try {\n        keyList.current.splice(index, 1);\n      } catch (e) {\n        console.error(e);\n      }\n\n      return temp;\n    });\n  }, []);\n  var move = useCallback(function (oldIndex, newIndex) {\n    if (oldIndex === newIndex) {\n      return;\n    }\n\n    setList(function (l) {\n      var newList = __spreadArray([], __read(l), false);\n\n      var temp = newList.filter(function (_, index) {\n        return index !== oldIndex;\n      });\n      temp.splice(newIndex, 0, newList[oldIndex]); // move keys if necessary\n\n      try {\n        var keyTemp = keyList.current.filter(function (_, index) {\n          return index !== oldIndex;\n        });\n        keyTemp.splice(newIndex, 0, keyList.current[oldIndex]);\n        keyList.current = keyTemp;\n      } catch (e) {\n        console.error(e);\n      }\n\n      return temp;\n    });\n  }, []);\n  var push = useCallback(function (item) {\n    setList(function (l) {\n      setKey(l.length);\n      return l.concat([item]);\n    });\n  }, []);\n  var pop = useCallback(function () {\n    // remove keys if necessary\n    try {\n      keyList.current = keyList.current.slice(0, keyList.current.length - 1);\n    } catch (e) {\n      console.error(e);\n    }\n\n    setList(function (l) {\n      return l.slice(0, l.length - 1);\n    });\n  }, []);\n  var unshift = useCallback(function (item) {\n    setList(function (l) {\n      setKey(0);\n      return [item].concat(l);\n    });\n  }, []);\n  var shift = useCallback(function () {\n    // remove keys if necessary\n    try {\n      keyList.current = keyList.current.slice(1, keyList.current.length);\n    } catch (e) {\n      console.error(e);\n    }\n\n    setList(function (l) {\n      return l.slice(1, l.length);\n    });\n  }, []);\n  var sortList = useCallback(function (result) {\n    return result.map(function (item, index) {\n      return {\n        key: index,\n        item: item\n      };\n    }) // add index into obj\n    .sort(function (a, b) {\n      return getIndex(a.key) - getIndex(b.key);\n    }) // sort based on the index of table\n    .filter(function (item) {\n      return !!item.item;\n    }) // remove undefined(s)\n    .map(function (item) {\n      return item.item;\n    });\n  }, // retrive the data\n  []);\n  return {\n    list: list,\n    insert: insert,\n    merge: merge,\n    replace: replace,\n    remove: remove,\n    getKey: getKey,\n    getIndex: getIndex,\n    move: move,\n    push: push,\n    pop: pop,\n    unshift: unshift,\n    shift: shift,\n    sortList: sortList,\n    resetList: resetList\n  };\n};\n\nexport default useDynamicList;","map":null,"metadata":{},"sourceType":"module"}