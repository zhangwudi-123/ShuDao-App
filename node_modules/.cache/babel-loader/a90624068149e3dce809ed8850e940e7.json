{"ast":null,"code":"import $ from 'dom7';\nimport Utils from '../../utils/utils';\nimport Framework7Class from '../../utils/class';\n\nclass SmartSelect extends Framework7Class {\n  constructor(app) {\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(params, [app]);\n    const ss = this;\n    const defaults = Utils.extend({\n      on: {}\n    }, app.params.smartSelect);\n\n    if (typeof defaults.searchbarDisableButton === 'undefined') {\n      defaults.searchbarDisableButton = app.theme !== 'aurora';\n    } // Extend defaults with modules params\n\n\n    ss.useModulesParams(defaults);\n    ss.params = Utils.extend({}, defaults, params);\n    ss.app = app;\n    const $el = $(ss.params.el).eq(0);\n    if ($el.length === 0) return ss;\n    if ($el[0].f7SmartSelect) return $el[0].f7SmartSelect;\n    const $selectEl = $el.find('select').eq(0);\n    if ($selectEl.length === 0) return ss;\n    let $valueEl;\n\n    if (ss.params.setValueText) {\n      $valueEl = $(ss.params.valueEl);\n\n      if ($valueEl.length === 0) {\n        $valueEl = $el.find('.item-after');\n      }\n\n      if ($valueEl.length === 0) {\n        $valueEl = $('<div class=\"item-after\"></div>');\n        $valueEl.insertAfter($el.find('.item-title'));\n      }\n    } // View\n\n\n    let view; // Url\n\n    let url = params.url;\n\n    if (!url) {\n      if ($el.attr('href') && $el.attr('href') !== '#') url = $el.attr('href');else if ($selectEl.attr('name')) url = `${$selectEl.attr('name').toLowerCase()}-select/`;\n    }\n\n    if (!url) url = ss.params.url;\n    const multiple = $selectEl[0].multiple;\n    const inputType = multiple ? 'checkbox' : 'radio';\n    const id = Utils.id();\n    Utils.extend(ss, {\n      $el,\n      el: $el[0],\n      $selectEl,\n      selectEl: $selectEl[0],\n      $valueEl,\n      valueEl: $valueEl && $valueEl[0],\n      url,\n      multiple,\n      inputType,\n      id,\n      view,\n      inputName: `${inputType}-${id}`,\n      selectName: $selectEl.attr('name'),\n      maxLength: $selectEl.attr('maxlength') || params.maxLength\n    });\n    $el[0].f7SmartSelect = ss; // Events\n\n    function onClick() {\n      ss.open();\n    }\n\n    function onChange() {\n      const value = ss.$selectEl.val();\n      ss.$el.trigger('smartselect:change', value);\n      ss.emit('local::change smartSelectChange', ss, value);\n\n      if (ss.vl) {\n        ss.vl.clearCache();\n      }\n\n      ss.setValueText();\n    }\n\n    ss.attachEvents = function attachEvents() {\n      $el.on('click', onClick);\n      $el.on('change', 'select', onChange);\n    };\n\n    ss.detachEvents = function detachEvents() {\n      $el.off('click', onClick);\n      $el.off('change', 'select', onChange);\n    };\n\n    function handleInputChange() {\n      let optionEl;\n      let text;\n      const inputEl = this;\n      const value = inputEl.value;\n      let optionText = [];\n      let displayAs;\n\n      if (inputEl.type === 'checkbox') {\n        for (let i = 0; i < ss.selectEl.options.length; i += 1) {\n          optionEl = ss.selectEl.options[i];\n\n          if (optionEl.value === value) {\n            optionEl.selected = inputEl.checked;\n          }\n\n          if (optionEl.selected) {\n            displayAs = optionEl.dataset ? optionEl.dataset.displayAs : $(optionEl).data('display-value-as');\n            text = displayAs && typeof displayAs !== 'undefined' ? displayAs : optionEl.textContent;\n            optionText.push(text.trim());\n          }\n        }\n\n        if (ss.maxLength) {\n          ss.checkMaxLength();\n        }\n      } else {\n        optionEl = ss.$selectEl.find(`option[value=\"${value}\"]`)[0];\n        displayAs = optionEl.dataset ? optionEl.dataset.displayAs : $(optionEl).data('display-as');\n        text = displayAs && typeof displayAs !== 'undefined' ? displayAs : optionEl.textContent;\n        optionText = [text];\n        ss.selectEl.value = value;\n      }\n\n      ss.$selectEl.trigger('change');\n\n      if (ss.params.setValueText) {\n        ss.$valueEl.text(ss.formatValueText(optionText));\n      }\n\n      if (ss.params.closeOnSelect && ss.inputType === 'radio') {\n        ss.close();\n      }\n    }\n\n    ss.attachInputsEvents = function attachInputsEvents() {\n      ss.$containerEl.on('change', 'input[type=\"checkbox\"], input[type=\"radio\"]', handleInputChange);\n    };\n\n    ss.detachInputsEvents = function detachInputsEvents() {\n      ss.$containerEl.off('change', 'input[type=\"checkbox\"], input[type=\"radio\"]', handleInputChange);\n    }; // Install Modules\n\n\n    ss.useModules(); // Init\n\n    ss.init();\n    return ss;\n  }\n\n  setValue(value) {\n    const ss = this;\n    let newValue = value;\n    let optionText = [];\n    let optionEl;\n    let displayAs;\n    let text;\n\n    if (ss.multiple) {\n      if (!Array.isArray(newValue)) newValue = [newValue];\n\n      for (let i = 0; i < ss.selectEl.options.length; i += 1) {\n        optionEl = ss.selectEl.options[i];\n\n        if (newValue.indexOf(optionEl.value) >= 0) {\n          optionEl.selected = true;\n        } else {\n          optionEl.selected = false;\n        }\n\n        if (optionEl.selected) {\n          displayAs = optionEl.dataset ? optionEl.dataset.displayAs : $(optionEl).data('display-value-as');\n          text = displayAs && typeof displayAs !== 'undefined' ? displayAs : optionEl.textContent;\n          optionText.push(text.trim());\n        }\n      }\n    } else {\n      optionEl = ss.$selectEl.find(`option[value=\"${newValue}\"]`)[0];\n\n      if (optionEl) {\n        displayAs = optionEl.dataset ? optionEl.dataset.displayAs : $(optionEl).data('display-as');\n        text = displayAs && typeof displayAs !== 'undefined' ? displayAs : optionEl.textContent;\n        optionText = [text];\n      }\n\n      ss.selectEl.value = newValue;\n    }\n\n    if (ss.params.setValueText) {\n      ss.$valueEl.text(ss.formatValueText(optionText));\n    }\n\n    ss.$selectEl.trigger('change');\n    return ss;\n  }\n\n  unsetValue() {\n    const ss = this;\n\n    if (ss.params.setValueText) {\n      ss.$valueEl.text(ss.formatValueText([]));\n    }\n\n    ss.$selectEl.find('option').each((optionIndex, optionEl) => {\n      optionEl.selected = false;\n      optionEl.checked = false;\n    });\n    ss.$selectEl[0].value = null;\n\n    if (ss.$containerEl) {\n      ss.$containerEl.find(`input[name=\"${ss.inputName}\"][type=\"checkbox\"], input[name=\"${ss.inputName}\"][type=\"radio\"]`).prop('checked', false);\n    }\n\n    ss.$selectEl.trigger('change');\n  }\n\n  getValue() {\n    const ss = this;\n    return ss.$selectEl.val();\n  }\n\n  getView() {\n    const ss = this;\n    let view = ss.view || ss.params.view;\n\n    if (!view) {\n      view = ss.$el.parents('.view').length && ss.$el.parents('.view')[0].f7View;\n    }\n\n    if (!view) {\n      throw Error('Smart Select requires initialized View');\n    }\n\n    ss.view = view;\n    return view;\n  }\n\n  checkMaxLength() {\n    const ss = this;\n    const $containerEl = ss.$containerEl;\n\n    if (ss.selectEl.selectedOptions.length >= ss.maxLength) {\n      $containerEl.find('input[type=\"checkbox\"]').each((index, inputEl) => {\n        if (!inputEl.checked) {\n          $(inputEl).parents('li').addClass('disabled');\n        } else {\n          $(inputEl).parents('li').removeClass('disabled');\n        }\n      });\n    } else {\n      $containerEl.find('.disabled').removeClass('disabled');\n    }\n  }\n\n  formatValueText(values) {\n    const ss = this;\n    let textValue;\n\n    if (ss.params.formatValueText) {\n      textValue = ss.params.formatValueText.call(ss, values, ss);\n    } else {\n      textValue = values.join(', ');\n    }\n\n    return textValue;\n  }\n\n  setValueText(value) {\n    const ss = this;\n    let valueArray = [];\n\n    if (typeof value !== 'undefined') {\n      if (Array.isArray(value)) {\n        valueArray = value;\n      } else {\n        valueArray = [value];\n      }\n    } else {\n      ss.$selectEl.find('option').each((optionIndex, optionEl) => {\n        const $optionEl = $(optionEl);\n\n        if (optionEl.selected) {\n          const displayAs = optionEl.dataset ? optionEl.dataset.displayAs : $optionEl.data('display-value-as');\n\n          if (displayAs && typeof displayAs !== 'undefined') {\n            valueArray.push(displayAs);\n          } else {\n            valueArray.push(optionEl.textContent.trim());\n          }\n        }\n      });\n    }\n\n    if (ss.params.setValueText) {\n      ss.$valueEl.text(ss.formatValueText(valueArray));\n    }\n  }\n\n  getItemsData() {\n    const ss = this;\n    const items = [];\n    let previousGroupEl;\n    ss.$selectEl.find('option').each((index, optionEl) => {\n      const $optionEl = $(optionEl);\n      const optionData = $optionEl.dataset();\n      const optionImage = optionData.optionImage || ss.params.optionImage;\n      const optionIcon = optionData.optionIcon || ss.params.optionIcon;\n      const optionHasMedia = optionImage || optionIcon; // if (material) optionHasMedia = optionImage || optionIcon;\n\n      const optionColor = optionData.optionColor;\n      let optionClassName = optionData.optionClass || '';\n      if ($optionEl[0].disabled) optionClassName += ' disabled';\n      const optionGroupEl = $optionEl.parent('optgroup')[0];\n      const optionGroupLabel = optionGroupEl && optionGroupEl.label;\n      let optionIsLabel = false;\n\n      if (optionGroupEl && optionGroupEl !== previousGroupEl) {\n        optionIsLabel = true;\n        previousGroupEl = optionGroupEl;\n        items.push({\n          groupLabel: optionGroupLabel,\n          isLabel: optionIsLabel\n        });\n      }\n\n      items.push({\n        value: $optionEl[0].value,\n        text: $optionEl[0].textContent.trim(),\n        selected: $optionEl[0].selected,\n        groupEl: optionGroupEl,\n        groupLabel: optionGroupLabel,\n        image: optionImage,\n        icon: optionIcon,\n        color: optionColor,\n        className: optionClassName,\n        disabled: $optionEl[0].disabled,\n        id: ss.id,\n        hasMedia: optionHasMedia,\n        checkbox: ss.inputType === 'checkbox',\n        radio: ss.inputType === 'radio',\n        inputName: ss.inputName,\n        inputType: ss.inputType\n      });\n    });\n    ss.items = items;\n    return items;\n  }\n\n  renderSearchbar() {\n    const ss = this;\n    if (ss.params.renderSearchbar) return ss.params.renderSearchbar.call(ss);\n    const searchbarHTML = `\n      <form class=\"searchbar\">\n        <div class=\"searchbar-inner\">\n          <div class=\"searchbar-input-wrap\">\n            <input type=\"search\" placeholder=\"${ss.params.searchbarPlaceholder}\"/>\n            <i class=\"searchbar-icon\"></i>\n            <span class=\"input-clear-button\"></span>\n          </div>\n          ${ss.params.searchbarDisableButton ? `\n          <span class=\"searchbar-disable-button\">${ss.params.searchbarDisableText}</span>\n          ` : ''}\n        </div>\n      </form>\n    `;\n    return searchbarHTML;\n  }\n\n  renderItem(item, index) {\n    const ss = this;\n    if (ss.params.renderItem) return ss.params.renderItem.call(ss, item, index);\n    let itemHtml;\n\n    if (item.isLabel) {\n      itemHtml = `<li class=\"item-divider\">${item.groupLabel}</li>`;\n    } else {\n      let selected = item.selected;\n      let disabled;\n\n      if (ss.params.virtualList) {\n        const ssValue = ss.getValue();\n        selected = ss.multiple ? ssValue.indexOf(item.value) >= 0 : ssValue === item.value;\n\n        if (ss.multiple) {\n          disabled = ss.multiple && !selected && ssValue.length === parseInt(ss.maxLength, 10);\n        }\n      }\n\n      itemHtml = `\n        <li class=\"${item.className || ''}${disabled ? ' disabled' : ''}\">\n          <label class=\"item-${item.inputType} item-content\">\n            <input type=\"${item.inputType}\" name=\"${item.inputName}\" value=\"${item.value}\" ${selected ? 'checked' : ''}/>\n            <i class=\"icon icon-${item.inputType}\"></i>\n            ${item.hasMedia ? `\n              <div class=\"item-media\">\n                ${item.icon ? `<i class=\"icon ${item.icon}\"></i>` : ''}\n                ${item.image ? `<img src=\"${item.image}\">` : ''}\n              </div>\n            ` : ''}\n            <div class=\"item-inner\">\n              <div class=\"item-title${item.color ? ` color-${item.color}` : ''}\">${item.text}</div>\n            </div>\n          </label>\n        </li>\n      `;\n    }\n\n    return itemHtml;\n  }\n\n  renderItems() {\n    const ss = this;\n    if (ss.params.renderItems) return ss.params.renderItems.call(ss, ss.items);\n    const itemsHtml = `\n      ${ss.items.map((item, index) => `${ss.renderItem(item, index)}`).join('')}\n    `;\n    return itemsHtml;\n  }\n\n  renderPage() {\n    const ss = this;\n    if (ss.params.renderPage) return ss.params.renderPage.call(ss, ss.items);\n    let pageTitle = ss.params.pageTitle;\n\n    if (typeof pageTitle === 'undefined') {\n      const $itemTitleEl = ss.$el.find('.item-title');\n      pageTitle = $itemTitleEl.length ? $itemTitleEl.text().trim() : '';\n    }\n\n    const cssClass = ss.params.cssClass;\n    const pageHtml = `\n      <div class=\"page smart-select-page ${cssClass}\" data-name=\"smart-select-page\" data-select-name=\"${ss.selectName}\">\n        <div class=\"navbar ${ss.params.navbarColorTheme ? `color-${ss.params.navbarColorTheme}` : ''}\">\n          <div class=\"navbar-bg\"></div>\n          <div class=\"navbar-inner sliding ${ss.params.navbarColorTheme ? `color-${ss.params.navbarColorTheme}` : ''}\">\n            <div class=\"left\">\n              <a class=\"link back\">\n                <i class=\"icon icon-back\"></i>\n                <span class=\"if-not-md\">${ss.params.pageBackLinkText}</span>\n              </a>\n            </div>\n            ${pageTitle ? `<div class=\"title\">${pageTitle}</div>` : ''}\n            ${ss.params.searchbar ? `<div class=\"subnavbar\">${ss.renderSearchbar()}</div>` : ''}\n          </div>\n        </div>\n        ${ss.params.searchbar ? '<div class=\"searchbar-backdrop\"></div>' : ''}\n        <div class=\"page-content\">\n          <div class=\"list smart-select-list-${ss.id} ${ss.params.virtualList ? ' virtual-list' : ''} ${ss.params.formColorTheme ? `color-${ss.params.formColorTheme}` : ''}\">\n            <ul>${!ss.params.virtualList && ss.renderItems(ss.items)}</ul>\n          </div>\n        </div>\n      </div>\n    `;\n    return pageHtml;\n  }\n\n  renderPopup() {\n    const ss = this;\n    if (ss.params.renderPopup) return ss.params.renderPopup.call(ss, ss.items);\n    let pageTitle = ss.params.pageTitle;\n\n    if (typeof pageTitle === 'undefined') {\n      const $itemTitleEl = ss.$el.find('.item-title');\n      pageTitle = $itemTitleEl.length ? $itemTitleEl.text().trim() : '';\n    }\n\n    const cssClass = ss.params.cssClass || '';\n    const popupHtml = `\n      <div class=\"popup smart-select-popup ${cssClass} ${ss.params.popupTabletFullscreen ? 'popup-tablet-fullscreen' : ''}\" data-select-name=\"${ss.selectName}\">\n        <div class=\"view\">\n          <div class=\"page smart-select-page ${ss.params.searchbar ? 'page-with-subnavbar' : ''}\" data-name=\"smart-select-page\">\n            <div class=\"navbar ${ss.params.navbarColorTheme ? `color-${ss.params.navbarColorTheme}` : ''}\">\n              <div class=\"navbar-bg\"></div>\n              <div class=\"navbar-inner sliding\">\n                ${pageTitle ? `<div class=\"title\">${pageTitle}</div>` : ''}\n                <div class=\"right\">\n                  <a class=\"link popup-close\" data-popup=\".smart-select-popup[data-select-name='${ss.selectName}']\">${ss.params.popupCloseLinkText}</span></a>\n                </div>\n                ${ss.params.searchbar ? `<div class=\"subnavbar\">${ss.renderSearchbar()}</div>` : ''}\n              </div>\n            </div>\n            ${ss.params.searchbar ? '<div class=\"searchbar-backdrop\"></div>' : ''}\n            <div class=\"page-content\">\n              <div class=\"list smart-select-list-${ss.id} ${ss.params.virtualList ? ' virtual-list' : ''} ${ss.params.formColorTheme ? `color-${ss.params.formColorTheme}` : ''}\">\n                <ul>${!ss.params.virtualList && ss.renderItems(ss.items)}</ul>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n    return popupHtml;\n  }\n\n  renderSheet() {\n    const ss = this;\n    if (ss.params.renderSheet) return ss.params.renderSheet.call(ss, ss.items);\n    const cssClass = ss.params.cssClass;\n    const sheetHtml = `\n      <div class=\"sheet-modal smart-select-sheet ${cssClass}\" data-select-name=\"${ss.selectName}\">\n        <div class=\"toolbar toolbar-top ${ss.params.toolbarColorTheme ? `color-${ss.params.toolbarColorTheme}` : ''}\">\n          <div class=\"toolbar-inner\">\n            <div class=\"left\"></div>\n            <div class=\"right\">\n              <a class=\"link sheet-close\">${ss.params.sheetCloseLinkText}</a>\n            </div>\n          </div>\n        </div>\n        <div class=\"sheet-modal-inner\">\n          <div class=\"page-content\">\n            <div class=\"list smart-select-list-${ss.id} ${ss.params.virtualList ? ' virtual-list' : ''} ${ss.params.formColorTheme ? `color-${ss.params.formColorTheme}` : ''}\">\n              <ul>${!ss.params.virtualList && ss.renderItems(ss.items)}</ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n    return sheetHtml;\n  }\n\n  renderPopover() {\n    const ss = this;\n    if (ss.params.renderPopover) return ss.params.renderPopover.call(ss, ss.items);\n    const cssClass = ss.params.cssClass;\n    const popoverHtml = `\n      <div class=\"popover smart-select-popover ${cssClass}\" data-select-name=\"${ss.selectName}\">\n        <div class=\"popover-inner\">\n          <div class=\"list smart-select-list-${ss.id} ${ss.params.virtualList ? ' virtual-list' : ''} ${ss.params.formColorTheme ? `color-${ss.params.formColorTheme}` : ''}\">\n            <ul>${!ss.params.virtualList && ss.renderItems(ss.items)}</ul>\n          </div>\n        </div>\n      </div>\n    `;\n    return popoverHtml;\n  }\n\n  scrollToSelectedItem() {\n    const ss = this;\n    const {\n      params,\n      $containerEl\n    } = ss;\n    if (!ss.opened) return ss;\n\n    if (params.virtualList) {\n      let selectedIndex;\n      ss.vl.items.forEach((item, index) => {\n        if (typeof selectedIndex === 'undefined' && item.selected) {\n          selectedIndex = index;\n        }\n      });\n\n      if (typeof selectedIndex !== 'undefined') {\n        ss.vl.scrollToItem(selectedIndex);\n      }\n    } else {\n      const $selectedItemEl = $containerEl.find('input:checked').parents('li');\n      const $pageContentEl = $containerEl.find('.page-content');\n      $pageContentEl.scrollTop($selectedItemEl.offset().top - $pageContentEl.offset().top - parseInt($pageContentEl.css('padding-top'), 10));\n    }\n\n    return ss;\n  }\n\n  onOpen(type, containerEl) {\n    const ss = this;\n    const app = ss.app;\n    const $containerEl = $(containerEl);\n    ss.$containerEl = $containerEl;\n    ss.openedIn = type;\n    ss.opened = true; // Init VL\n\n    if (ss.params.virtualList) {\n      ss.vl = app.virtualList.create({\n        el: $containerEl.find('.virtual-list'),\n        items: ss.items,\n        renderItem: ss.renderItem.bind(ss),\n        height: ss.params.virtualListHeight,\n\n        searchByItem(query, item) {\n          if (item.text && item.text.toLowerCase().indexOf(query.trim().toLowerCase()) >= 0) return true;\n          return false;\n        }\n\n      });\n    }\n\n    if (ss.params.scrollToSelectedItem) {\n      ss.scrollToSelectedItem();\n    } // Init SB\n\n\n    if (ss.params.searchbar) {\n      let $searchbarEl = $containerEl.find('.searchbar');\n\n      if (type === 'page' && app.theme === 'ios') {\n        $searchbarEl = $(app.navbar.getElByPage($containerEl)).find('.searchbar');\n      }\n\n      if (ss.params.appendSearchbarNotFound && (type === 'page' || type === 'popup')) {\n        let $notFoundEl = null;\n\n        if (typeof ss.params.appendSearchbarNotFound === 'string') {\n          $notFoundEl = $(`<div class=\"block searchbar-not-found\">${ss.params.appendSearchbarNotFound}</div>`);\n        } else if (typeof ss.params.appendSearchbarNotFound === 'boolean') {\n          $notFoundEl = $('<div class=\"block searchbar-not-found\">Nothing found</div>');\n        } else {\n          $notFoundEl = ss.params.appendSearchbarNotFound;\n        }\n\n        if ($notFoundEl) {\n          $containerEl.find('.page-content').append($notFoundEl[0]);\n        }\n      }\n\n      const searchbarParams = Utils.extend({\n        el: $searchbarEl,\n        backdropEl: $containerEl.find('.searchbar-backdrop'),\n        searchContainer: `.smart-select-list-${ss.id}`,\n        searchIn: '.item-title'\n      }, typeof ss.params.searchbar === 'object' ? ss.params.searchbar : {});\n      ss.searchbar = app.searchbar.create(searchbarParams);\n    } // Check for max length\n\n\n    if (ss.maxLength) {\n      ss.checkMaxLength();\n    } // Close on select\n\n\n    if (ss.params.closeOnSelect) {\n      ss.$containerEl.find(`input[type=\"radio\"][name=\"${ss.inputName}\"]:checked`).parents('label').once('click', () => {\n        ss.close();\n      });\n    } // Attach input events\n\n\n    ss.attachInputsEvents();\n    ss.$el.trigger('smartselect:open');\n    ss.emit('local::open smartSelectOpen', ss);\n  }\n\n  onOpened() {\n    const ss = this;\n    ss.$el.trigger('smartselect:opened');\n    ss.emit('local::opened smartSelectOpened', ss);\n  }\n\n  onClose() {\n    const ss = this;\n    if (ss.destroyed) return; // Destroy VL\n\n    if (ss.vl && ss.vl.destroy) {\n      ss.vl.destroy();\n      ss.vl = null;\n      delete ss.vl;\n    } // Destroy SB\n\n\n    if (ss.searchbar && ss.searchbar.destroy) {\n      ss.searchbar.destroy();\n      ss.searchbar = null;\n      delete ss.searchbar;\n    } // Detach events\n\n\n    ss.detachInputsEvents();\n    ss.$el.trigger('smartselect:close');\n    ss.emit('local::close smartSelectClose', ss);\n  }\n\n  onClosed() {\n    const ss = this;\n    if (ss.destroyed) return;\n    ss.opened = false;\n    ss.$containerEl = null;\n    delete ss.$containerEl;\n    ss.$el.trigger('smartselect:closed');\n    ss.emit('local::closed smartSelectClosed', ss);\n  }\n\n  openPage() {\n    const ss = this;\n    if (ss.opened) return ss;\n    ss.getItemsData();\n    const pageHtml = ss.renderPage(ss.items);\n    const view = ss.getView();\n    view.router.navigate({\n      url: ss.url,\n      route: {\n        content: pageHtml,\n        path: ss.url,\n        on: {\n          pageBeforeIn(e, page) {\n            ss.onOpen('page', page.el);\n          },\n\n          pageAfterIn(e, page) {\n            ss.onOpened('page', page.el);\n          },\n\n          pageBeforeOut(e, page) {\n            ss.onClose('page', page.el);\n          },\n\n          pageAfterOut(e, page) {\n            ss.onClosed('page', page.el);\n          }\n\n        }\n      }\n    });\n    return ss;\n  }\n\n  openPopup() {\n    const ss = this;\n    if (ss.opened) return ss;\n    ss.getItemsData();\n    const popupHtml = ss.renderPopup(ss.items);\n    const popupParams = {\n      content: popupHtml,\n      push: ss.params.popupPush,\n      swipeToClose: ss.params.popupSwipeToClose,\n      on: {\n        popupOpen(popup) {\n          ss.onOpen('popup', popup.el);\n        },\n\n        popupOpened(popup) {\n          ss.onOpened('popup', popup.el);\n        },\n\n        popupClose(popup) {\n          ss.onClose('popup', popup.el);\n        },\n\n        popupClosed(popup) {\n          ss.onClosed('popup', popup.el);\n        }\n\n      }\n    };\n\n    if (ss.params.routableModals) {\n      const view = ss.getView();\n      view.router.navigate({\n        url: ss.url,\n        route: {\n          path: ss.url,\n          popup: popupParams\n        }\n      });\n    } else {\n      ss.modal = ss.app.popup.create(popupParams).open();\n    }\n\n    return ss;\n  }\n\n  openSheet() {\n    const ss = this;\n    if (ss.opened) return ss;\n    ss.getItemsData();\n    const sheetHtml = ss.renderSheet(ss.items);\n    const sheetParams = {\n      content: sheetHtml,\n      backdrop: false,\n      scrollToEl: ss.$el,\n      closeByOutsideClick: true,\n      push: ss.params.sheetPush,\n      swipeToClose: ss.params.sheetSwipeToClose,\n      on: {\n        sheetOpen(sheet) {\n          ss.onOpen('sheet', sheet.el);\n        },\n\n        sheetOpened(sheet) {\n          ss.onOpened('sheet', sheet.el);\n        },\n\n        sheetClose(sheet) {\n          ss.onClose('sheet', sheet.el);\n        },\n\n        sheetClosed(sheet) {\n          ss.onClosed('sheet', sheet.el);\n        }\n\n      }\n    };\n\n    if (ss.params.routableModals) {\n      const view = ss.getView();\n      view.router.navigate({\n        url: ss.url,\n        route: {\n          path: ss.url,\n          sheet: sheetParams\n        }\n      });\n    } else {\n      ss.modal = ss.app.sheet.create(sheetParams).open();\n    }\n\n    return ss;\n  }\n\n  openPopover() {\n    const ss = this;\n    if (ss.opened) return ss;\n    ss.getItemsData();\n    const popoverHtml = ss.renderPopover(ss.items);\n    const popoverParams = {\n      content: popoverHtml,\n      targetEl: ss.$el,\n      on: {\n        popoverOpen(popover) {\n          ss.onOpen('popover', popover.el);\n        },\n\n        popoverOpened(popover) {\n          ss.onOpened('popover', popover.el);\n        },\n\n        popoverClose(popover) {\n          ss.onClose('popover', popover.el);\n        },\n\n        popoverClosed(popover) {\n          ss.onClosed('popover', popover.el);\n        }\n\n      }\n    };\n\n    if (ss.params.routableModals) {\n      const view = ss.getView();\n      view.router.navigate({\n        url: ss.url,\n        route: {\n          path: ss.url,\n          popover: popoverParams\n        }\n      });\n    } else {\n      ss.modal = ss.app.popover.create(popoverParams).open();\n    }\n\n    return ss;\n  }\n\n  open(type) {\n    const ss = this;\n    if (ss.opened) return ss;\n    let prevented = false;\n\n    function prevent() {\n      prevented = true;\n    }\n\n    if (ss.$el) {\n      ss.$el.trigger('smartselect:beforeopen', {\n        prevent\n      });\n    }\n\n    ss.emit('local::beforeOpen smartSelectBeforeOpen', ss, prevent);\n    if (prevented) return ss;\n    const openIn = type || ss.params.openIn;\n    ss[`open${openIn.split('').map((el, index) => {\n      if (index === 0) return el.toUpperCase();\n      return el;\n    }).join('')}`]();\n    return ss;\n  }\n\n  close() {\n    const ss = this;\n    if (!ss.opened) return ss;\n\n    if (ss.params.routableModals || ss.openedIn === 'page') {\n      const view = ss.getView();\n      view.router.back();\n    } else {\n      ss.modal.once('modalClosed', () => {\n        Utils.nextTick(() => {\n          if (ss.destroyed) return;\n          ss.modal.destroy();\n          delete ss.modal;\n        });\n      });\n      ss.modal.close();\n    }\n\n    return ss;\n  }\n\n  init() {\n    const ss = this;\n    ss.attachEvents();\n    ss.setValueText();\n  }\n\n  destroy() {\n    const ss = this;\n    ss.emit('local::beforeDestroy smartSelectBeforeDestroy', ss);\n    ss.$el.trigger('smartselect:beforedestroy');\n    ss.detachEvents();\n    delete ss.$el[0].f7SmartSelect;\n    Utils.deleteProps(ss);\n    ss.destroyed = true;\n  }\n\n}\n\nexport default SmartSelect;","map":null,"metadata":{},"sourceType":"module"}