{"ast":null,"code":"/* eslint no-use-before-define: \"off\" */\n\n/* eslint import/no-named-as-default: \"off\" */\nimport { window, document } from 'ssr-window';\nimport h from './snabbdom/h';\nimport customComponents from './custom-components';\nconst selfClosing = 'area base br col command embed hr img input keygen link menuitem meta param source track wbr'.split(' ');\nconst propsAttrs = 'hidden checked disabled readonly selected autocomplete autofocus autoplay required multiple value indeterminate'.split(' ');\nconst booleanProps = 'hidden checked disabled readonly selected autocomplete autofocus autoplay required multiple readOnly indeterminate'.split(' ');\nconst tempDom = document.createElement('div');\n\nfunction toCamelCase(name) {\n  return name.split('-').map((word, index) => {\n    if (index === 0) return word.toLowerCase();\n    return word[0].toUpperCase() + word.substr(1);\n  }).join('');\n}\n\nfunction contextFromAttrs() {\n  const context = {};\n\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  args.forEach(function () {\n    let obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    Object.keys(obj).forEach(key => {\n      context[toCamelCase(key)] = obj[key];\n    });\n  });\n  return context;\n}\n\nfunction createCustomComponent(_ref) {\n  let {\n    app,\n    vnode,\n    tagName,\n    data\n  } = _ref;\n  app.component.create(Object.assign({\n    el: vnode.elm\n  }, customComponents[tagName]), {\n    $props: contextFromAttrs(data.attrs || {}, data.props || {})\n  }, vnode.children).then(c => {\n    if (vnode.data && vnode.data.on && c && c.$el) {\n      Object.keys(vnode.data.on).forEach(eventName => {\n        c.$el.on(eventName, vnode.data.on[eventName]);\n      });\n    } // eslint-disable-next-line\n\n\n    vnode.elm.__component__ = c;\n  });\n}\n\nfunction updateCustomComponent(vnode) {\n  // eslint-disable-next-line\n  const component = vnode && vnode.elm && vnode.elm.__component__;\n  if (!component) return;\n  const newProps = contextFromAttrs(vnode.data.attrs || {}, vnode.data.props || {});\n  component.$children = vnode.children;\n  Object.assign(component.$props, newProps);\n  component.$update();\n}\n\nfunction destroyCustomComponent(vnode) {\n  // eslint-disable-next-line\n  const component = vnode && vnode.elm && vnode.elm.__component__;\n\n  if (component) {\n    const {\n      el,\n      $el\n    } = component;\n\n    if (vnode.data && vnode.data.on && $el) {\n      Object.keys(vnode.data.on).forEach(eventName => {\n        $el.off(eventName, vnode.data.on[eventName]);\n      });\n    }\n\n    if (component.$destroy) component.$destroy();\n    if (el && el.parentNode) el.parentNode.removeChild(el);\n    delete vnode.elm.__component__; // eslint-disable-line\n  }\n}\n\nfunction getHooks(data, app, initial, isRoot, tagName) {\n  const hooks = {};\n  const insert = [];\n  const destroy = [];\n  const update = [];\n  const postpatch = [];\n  const isCustomComponent = tagName && tagName.indexOf('-') > 0 && customComponents[tagName];\n\n  if (isCustomComponent) {\n    insert.push(vnode => {\n      if (vnode.sel !== tagName) return;\n      createCustomComponent({\n        app,\n        vnode,\n        tagName,\n        data\n      });\n    });\n    destroy.push(vnode => {\n      destroyCustomComponent(vnode);\n    });\n    update.push((oldVnode, vnode) => {\n      updateCustomComponent(vnode);\n    });\n  }\n\n  if (!isCustomComponent) {\n    if (!data || !data.attrs || !data.attrs.class) return hooks;\n    const classNames = data.attrs.class;\n    classNames.split(' ').forEach(className => {\n      if (!initial) {\n        insert.push(...app.getVnodeHooks('insert', className));\n      }\n\n      destroy.push(...app.getVnodeHooks('destroy', className));\n      update.push(...app.getVnodeHooks('update', className));\n      postpatch.push(...app.getVnodeHooks('postpatch', className));\n    });\n  }\n\n  if (isRoot && !initial) {\n    postpatch.push((oldVnode, vnode) => {\n      const vn = vnode || oldVnode;\n      if (!vn) return;\n\n      if (vn.data && vn.data.context && vn.data.context.$options.updated) {\n        vn.data.context.$options.updated();\n      }\n    });\n  }\n\n  if (insert.length === 0 && destroy.length === 0 && update.length === 0 && postpatch.length === 0) {\n    return hooks;\n  }\n\n  if (insert.length) {\n    hooks.insert = vnode => {\n      insert.forEach(f => f(vnode));\n    };\n  }\n\n  if (destroy.length) {\n    hooks.destroy = vnode => {\n      destroy.forEach(f => f(vnode));\n    };\n  }\n\n  if (update.length) {\n    hooks.update = (oldVnode, vnode) => {\n      update.forEach(f => f(oldVnode, vnode));\n    };\n  }\n\n  if (postpatch.length) {\n    hooks.postpatch = (oldVnode, vnode) => {\n      postpatch.forEach(f => f(oldVnode, vnode));\n    };\n  }\n\n  return hooks;\n}\n\nfunction getEventHandler(handlerString, context) {\n  let {\n    stop,\n    prevent,\n    once\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let fired = false;\n  let methodName;\n  let method;\n  let customArgs = [];\n  let needMethodBind = true;\n\n  if (handlerString.indexOf('(') < 0) {\n    methodName = handlerString;\n  } else {\n    methodName = handlerString.split('(')[0];\n  }\n\n  if (methodName.indexOf('.') >= 0) {\n    methodName.split('.').forEach((path, pathIndex) => {\n      if (pathIndex === 0 && path === 'this') return;\n\n      if (pathIndex === 0 && path === 'window') {\n        // eslint-disable-next-line\n        method = window;\n        needMethodBind = false;\n        return;\n      }\n\n      if (!method) method = context;\n      if (method[path]) method = method[path];else {\n        throw new Error(`Framework7: Component doesn't have method \"${methodName.split('.').slice(0, pathIndex + 1).join('.')}\"`);\n      }\n    });\n  } else {\n    if (!context[methodName]) {\n      throw new Error(`Framework7: Component doesn't have method \"${methodName}\"`);\n    }\n\n    method = context[methodName];\n  }\n\n  if (needMethodBind) {\n    method = method.bind(context);\n  }\n\n  function handler() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    const e = args[0];\n    if (once && fired) return;\n    if (stop) e.stopPropagation();\n    if (prevent) e.preventDefault();\n    fired = true;\n\n    if (handlerString.indexOf('(') < 0) {\n      customArgs = args;\n    } else {\n      const handlerArguments = handlerString.split('(')[1].split(')')[0].replace(/'[^']*'|\"[^\"]*\"/g, a => a.replace(/,/g, '<_comma_>')).split(',').map(a => a.replace(/<_comma_>/g, ','));\n      handlerArguments.forEach(argument => {\n        let arg = argument.trim(); // eslint-disable-next-line\n\n        if (!isNaN(arg)) arg = parseFloat(arg);else if (arg === 'true') arg = true;else if (arg === 'false') arg = false;else if (arg === 'null') arg = null;else if (arg === 'undefined') arg = undefined;else if (arg[0] === '\"') arg = arg.replace(/\"/g, '');else if (arg[0] === '\\'') arg = arg.replace(/'/g, '');else if (arg.indexOf('.') > 0) {\n          let deepArg;\n          arg.split('.').forEach(path => {\n            if (!deepArg) deepArg = context;\n            deepArg = deepArg[path];\n          });\n          arg = deepArg;\n        } else {\n          arg = context[arg];\n        }\n        customArgs.push(arg);\n      });\n    }\n\n    method(...customArgs);\n  }\n\n  return handler;\n}\n\nfunction getData(el, context, app, initial, isRoot, tagName) {\n  const data = {\n    context\n  };\n  const attributes = el.attributes;\n  Array.prototype.forEach.call(attributes, attr => {\n    let attrName = attr.name;\n    const attrValue = attr.value;\n\n    if (propsAttrs.indexOf(attrName) >= 0) {\n      // Props\n      if (!data.props) data.props = {};\n\n      if (attrName === 'readonly') {\n        attrName = 'readOnly';\n      }\n\n      if (booleanProps.indexOf(attrName) >= 0) {\n        // eslint-disable-next-line\n        data.props[attrName] = attrValue === false ? false : true;\n      } else {\n        data.props[attrName] = attrValue;\n      }\n    } else if (attrName === 'key') {\n      // Key\n      data.key = attrValue;\n    } else if (attrName.indexOf('@') === 0) {\n      // Events\n      if (!data.on) data.on = {};\n      let eventName = attrName.substr(1);\n      let stop = false;\n      let prevent = false;\n      let once = false;\n\n      if (eventName.indexOf('.') >= 0) {\n        eventName.split('.').forEach((eventNamePart, eventNameIndex) => {\n          if (eventNameIndex === 0) eventName = eventNamePart;else {\n            if (eventNamePart === 'stop') stop = true;\n            if (eventNamePart === 'prevent') prevent = true;\n            if (eventNamePart === 'once') once = true;\n          }\n        });\n      }\n\n      data.on[eventName] = getEventHandler(attrValue, context, {\n        stop,\n        prevent,\n        once\n      });\n    } else if (attrName === 'style') {\n      // Style\n      if (attrValue.indexOf('{') >= 0 && attrValue.indexOf('}') >= 0) {\n        try {\n          data.style = JSON.parse(attrValue);\n        } catch (e) {\n          if (!data.attrs) data.attrs = {};\n          data.attrs.style = attrValue;\n        }\n      } else {\n        if (!data.attrs) data.attrs = {};\n        data.attrs.style = attrValue;\n      }\n    } else {\n      // Rest of attribures\n      if (!data.attrs) data.attrs = {};\n      data.attrs[attrName] = attrValue; // ID -> Key\n\n      if (attrName === 'id' && !data.key && !isRoot) {\n        data.key = attrValue;\n      }\n    }\n  });\n  const hooks = getHooks(data, app, initial, isRoot, tagName);\n\n  hooks.prepatch = (oldVnode, vnode) => {\n    if (!oldVnode || !vnode) return;\n\n    if (oldVnode && oldVnode.data && oldVnode.data.props) {\n      Object.keys(oldVnode.data.props).forEach(key => {\n        if (booleanProps.indexOf(key) < 0) return;\n        if (!vnode.data) vnode.data = {};\n        if (!vnode.data.props) vnode.data.props = {};\n\n        if (oldVnode.data.props[key] === true && !(key in vnode.data.props)) {\n          vnode.data.props[key] = false;\n        }\n      });\n    }\n  };\n\n  if (hooks) {\n    data.hook = hooks;\n  }\n\n  return data;\n}\n\nfunction getChildren(el, context, app, initial) {\n  const children = [];\n  const nodes = el.childNodes;\n\n  for (let i = 0; i < nodes.length; i += 1) {\n    const childNode = nodes[i];\n    const child = elementToVNode(childNode, context, app, initial);\n\n    if (Array.isArray(child)) {\n      children.push(...child);\n    } else if (child) {\n      children.push(child);\n    }\n  }\n\n  return children;\n}\n\nfunction getSlots(slotEl, context, app, initial) {\n  const slotName = slotEl.getAttribute('name') || 'default';\n  const slots = (context.$children || []).filter(childEl => {\n    let childSlotName = 'default';\n\n    if (childEl.data) {\n      childSlotName = childEl.data.attrs && childEl.data.attrs.slot || 'default';\n    }\n\n    return childSlotName === slotName;\n  });\n\n  if (slots.length === 0) {\n    return getChildren(slotEl, context, app, initial);\n  }\n\n  return slots;\n}\n\nfunction elementToVNode(el, context, app, initial, isRoot) {\n  if (el.nodeType === 3) {\n    // text\n    return el.textContent;\n  }\n\n  if (el.nodeType !== 1) return null; // element (statement adds inline SVG compatibility)\n\n  const tagName = el instanceof window.SVGElement ? el.nodeName : el.nodeName.toLowerCase();\n\n  if (tagName === 'slot') {\n    return getSlots(el, context, app, initial);\n  }\n\n  return h(tagName, getData(el, context, app, initial, isRoot, tagName), selfClosing.indexOf(tagName) >= 0 ? [] : getChildren(el, context, app, initial));\n}\n\nexport default function () {\n  let html = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  let context = arguments.length > 1 ? arguments[1] : undefined;\n  let initial = arguments.length > 2 ? arguments[2] : undefined;\n  // Save to temp dom\n  tempDom.innerHTML = html.trim(); // Parse DOM\n\n  let rootEl;\n\n  for (let i = 0; i < tempDom.childNodes.length; i += 1) {\n    if (!rootEl && tempDom.childNodes[i].nodeType === 1) {\n      rootEl = tempDom.childNodes[i];\n    }\n  }\n\n  const result = elementToVNode(rootEl, context, context.$app, initial, true); // Clean\n\n  tempDom.innerHTML = '';\n  return result;\n}","map":null,"metadata":{},"sourceType":"module"}