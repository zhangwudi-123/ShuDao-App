{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport React from 'react';\nimport f7 from '../utils/f7';\nimport Utils from '../utils/utils';\nimport Mixins from '../utils/mixins';\nimport __reactComponentDispatchEvent from '../runtime-helpers/react-component-dispatch-event.js';\nimport __reactComponentSlots from '../runtime-helpers/react-component-slots.js';\nimport __reactComponentSetProps from '../runtime-helpers/react-component-set-props.js';\n\nvar F7View = /*#__PURE__*/function (_React$Component) {\n  _inherits(F7View, _React$Component);\n\n  function F7View(props, context) {\n    var _this;\n\n    _classCallCheck(this, F7View);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(F7View).call(this, props, context));\n    _this.__reactRefs = {};\n\n    _this.state = function () {\n      return {\n        pages: []\n      };\n    }();\n\n    (function () {\n      var self = _assertThisInitialized(_this);\n\n      Utils.bindMethods(self, ['onSwipeBackMove', 'onSwipeBackBeforeChange', 'onSwipeBackAfterChange', 'onSwipeBackBeforeReset', 'onSwipeBackAfterReset', 'onTabShow', 'onTabHide', 'onViewInit']);\n    })();\n\n    return _this;\n  }\n\n  _createClass(F7View, [{\n    key: \"onViewInit\",\n    value: function onViewInit(view) {\n      var self = this;\n      self.dispatchEvent('view:init viewInit', view);\n\n      if (!self.props.init) {\n        self.routerData.instance = view;\n        self.f7View = self.routerData.instance;\n      }\n    }\n  }, {\n    key: \"onSwipeBackMove\",\n    value: function onSwipeBackMove(data) {\n      var swipeBackData = data;\n      this.dispatchEvent('swipeback:move swipeBackMove', swipeBackData);\n    }\n  }, {\n    key: \"onSwipeBackBeforeChange\",\n    value: function onSwipeBackBeforeChange(data) {\n      var swipeBackData = data;\n      this.dispatchEvent('swipeback:beforechange swipeBackBeforeChange', swipeBackData);\n    }\n  }, {\n    key: \"onSwipeBackAfterChange\",\n    value: function onSwipeBackAfterChange(data) {\n      var swipeBackData = data;\n      this.dispatchEvent('swipeback:afterchange swipeBackAfterChange', swipeBackData);\n    }\n  }, {\n    key: \"onSwipeBackBeforeReset\",\n    value: function onSwipeBackBeforeReset(data) {\n      var swipeBackData = data;\n      this.dispatchEvent('swipeback:beforereset swipeBackBeforeReset', swipeBackData);\n    }\n  }, {\n    key: \"onSwipeBackAfterReset\",\n    value: function onSwipeBackAfterReset(data) {\n      var swipeBackData = data;\n      this.dispatchEvent('swipeback:afterreset swipeBackAfterReset', swipeBackData);\n    }\n  }, {\n    key: \"onTabShow\",\n    value: function onTabShow(el) {\n      if (el === this.refs.el) {\n        this.dispatchEvent('tab:show tabShow');\n      }\n    }\n  }, {\n    key: \"onTabHide\",\n    value: function onTabHide(el) {\n      if (el === this.refs.el) {\n        this.dispatchEvent('tab:hide tabHide');\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var self = this;\n      var props = self.props;\n      var id = props.id,\n          style = props.style,\n          tab = props.tab,\n          main = props.main,\n          tabActive = props.tabActive,\n          className = props.className;\n      var classes = Utils.classNames(className, 'view', {\n        'view-main': main,\n        'tab-active': tabActive,\n        tab: tab\n      }, Mixins.colorClasses(props));\n      return React.createElement('div', {\n        ref: function ref(__reactNode) {\n          _this2.__reactRefs['el'] = __reactNode;\n        },\n        id: id,\n        style: style,\n        className: classes\n      }, this.slots['default'], self.state.pages.map(function (page) {\n        var PageComponent = page.component;\n        {\n          return React.createElement(PageComponent, Object.assign({\n            key: page.id\n          }, page.props));\n        }\n      }));\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var self = this;\n      if (!self.routerData) return;\n      f7.events.emit('viewRouterDidUpdate', self.routerData);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var self = this;\n\n      if (f7.instance) {\n        f7.instance.off('tabShow', self.onTabShow);\n        f7.instance.off('tabHide', self.onTabHide);\n      }\n\n      if (self.f7View) {\n        self.f7View.off('swipebackMove', self.onSwipeBackMove);\n        self.f7View.off('swipebackBeforeChange', self.onSwipeBackBeforeChange);\n        self.f7View.off('swipebackAfterChange', self.onSwipeBackAfterChange);\n        self.f7View.off('swipebackBeforeReset', self.onSwipeBackBeforeReset);\n        self.f7View.off('swipebackAfterReset', self.onSwipeBackAfterReset);\n        if (self.f7View.destroy) self.f7View.destroy();\n      }\n\n      f7.routers.views.splice(f7.routers.views.indexOf(self.routerData), 1);\n      self.routerData = null;\n      delete self.routerData;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var self = this;\n      var el = self.refs.el;\n      self.$f7ready(function (f7Instance) {\n        f7Instance.on('tabShow', self.onTabShow);\n        f7Instance.on('tabHide', self.onTabHide);\n        self.routerData = {\n          el: el,\n          component: self,\n          pages: self.state.pages,\n          instance: null,\n          setPages: function setPages(pages) {\n            self.setState({\n              pages: pages\n            });\n          }\n        };\n        f7.routers.views.push(self.routerData);\n        if (!self.props.init) return;\n        self.routerData.instance = f7Instance.views.create(el, Object.assign({\n          on: {\n            init: self.onViewInit\n          }\n        }, Utils.noUndefinedProps(self.props)));\n        self.f7View = self.routerData.instance;\n        self.f7View.on('swipebackMove', self.onSwipeBackMove);\n        self.f7View.on('swipebackBeforeChange', self.onSwipeBackBeforeChange);\n        self.f7View.on('swipebackAfterChange', self.onSwipeBackAfterChange);\n        self.f7View.on('swipebackBeforeReset', self.onSwipeBackBeforeReset);\n        self.f7View.on('swipebackAfterReset', self.onSwipeBackAfterReset);\n      });\n    }\n  }, {\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(events) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return __reactComponentDispatchEvent.apply(void 0, [this, events].concat(args));\n    }\n  }, {\n    key: \"slots\",\n    get: function get() {\n      return __reactComponentSlots(this.props);\n    }\n  }, {\n    key: \"refs\",\n    get: function get() {\n      return this.__reactRefs;\n    },\n    set: function set(refs) {}\n  }]);\n\n  return F7View;\n}(React.Component);\n\n__reactComponentSetProps(F7View, Object.assign({\n  id: [String, Number],\n  className: String,\n  style: Object,\n  tab: Boolean,\n  tabActive: Boolean,\n  name: String,\n  router: Boolean,\n  linksView: [Object, String],\n  url: String,\n  main: Boolean,\n  stackPages: Boolean,\n  xhrCache: Boolean,\n  xhrCacheIgnore: Array,\n  xhrCacheIgnoreGetParameters: Boolean,\n  xhrCacheDuration: Number,\n  preloadPreviousPage: Boolean,\n  allowDuplicateUrls: Boolean,\n  reloadPages: Boolean,\n  reloadDetail: Boolean,\n  masterDetailBreakpoint: Number,\n  removeElements: Boolean,\n  removeElementsWithTimeout: Boolean,\n  removeElementsTimeout: Number,\n  restoreScrollTopOnBack: Boolean,\n  loadInitialPage: Boolean,\n  iosSwipeBack: Boolean,\n  iosSwipeBackAnimateShadow: Boolean,\n  iosSwipeBackAnimateOpacity: Boolean,\n  iosSwipeBackActiveArea: Number,\n  iosSwipeBackThreshold: Number,\n  mdSwipeBack: Boolean,\n  mdSwipeBackAnimateShadow: Boolean,\n  mdSwipeBackAnimateOpacity: Boolean,\n  mdSwipeBackActiveArea: Number,\n  mdSwipeBackThreshold: Number,\n  auroraSwipeBack: Boolean,\n  auroraSwipeBackAnimateShadow: Boolean,\n  auroraSwipeBackAnimateOpacity: Boolean,\n  auroraSwipeBackActiveArea: Number,\n  auroraSwipeBackThreshold: Number,\n  pushState: Boolean,\n  pushStateRoot: String,\n  pushStateAnimate: Boolean,\n  pushStateAnimateOnLoad: Boolean,\n  pushStateSeparator: String,\n  pushStateOnLoad: Boolean,\n  animate: Boolean,\n  transition: String,\n  iosDynamicNavbar: Boolean,\n  iosAnimateNavbarBackIcon: Boolean,\n  materialPageLoadDelay: Number,\n  passRouteQueryToRequest: Boolean,\n  passRouteParamsToRequest: Boolean,\n  routes: Array,\n  routesAdd: Array,\n  routesBeforeEnter: [Function, Array],\n  routesBeforeLeave: [Function, Array],\n  init: {\n    type: Boolean,\n    default: true\n  }\n}, Mixins.colorProps));\n\nF7View.displayName = 'f7-view';\nexport default F7View;","map":null,"metadata":{},"sourceType":"module"}