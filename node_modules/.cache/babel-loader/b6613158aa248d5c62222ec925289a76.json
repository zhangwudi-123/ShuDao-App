{"ast":null,"code":"import $ from 'dom7';\nimport { window\n/* , document */\n} from 'ssr-window'; // import Device from '../../utils/device';\n// import Support from '../../utils/support';\n\nimport ViewClass from '../../components/view/view-class';\n\nfunction initClicks(app) {\n  function handleClicks(e) {\n    const $clickedEl = $(e.target);\n    const $clickedLinkEl = $clickedEl.closest('a');\n    const isLink = $clickedLinkEl.length > 0;\n    const url = isLink && $clickedLinkEl.attr('href'); // const isTabLink = isLink && $clickedLinkEl.hasClass('tab-link') && ($clickedLinkEl.attr('data-tab') || (url && url.indexOf('#') === 0));\n    // Check if link is external\n\n    if (isLink) {\n      // eslint-disable-next-line\n      if ($clickedLinkEl.is(app.params.clicks.externalLinks) || url && url.indexOf('javascript:') >= 0) {\n        const target = $clickedLinkEl.attr('target');\n\n        if (url && window.cordova && window.cordova.InAppBrowser && (target === '_system' || target === '_blank')) {\n          e.preventDefault();\n          window.cordova.InAppBrowser.open(url, target);\n        }\n\n        return;\n      }\n    } // Modules Clicks\n\n\n    Object.keys(app.modules).forEach(moduleName => {\n      const moduleClicks = app.modules[moduleName].clicks;\n      if (!moduleClicks) return;\n      if (e.preventF7Router) return;\n      Object.keys(moduleClicks).forEach(clickSelector => {\n        const matchingClickedElement = $clickedEl.closest(clickSelector).eq(0);\n\n        if (matchingClickedElement.length > 0) {\n          moduleClicks[clickSelector].call(app, matchingClickedElement, matchingClickedElement.dataset(), e);\n        }\n      });\n    }); // Load Page\n\n    let clickedLinkData = {};\n\n    if (isLink) {\n      e.preventDefault();\n      clickedLinkData = $clickedLinkEl.dataset();\n    } // Prevent Router\n\n\n    if (e.preventF7Router) return;\n    if ($clickedLinkEl.hasClass('prevent-router') || $clickedLinkEl.hasClass('router-prevent')) return;\n    const validUrl = url && url.length > 0 && url[0] !== '#';\n\n    if (validUrl || $clickedLinkEl.hasClass('back')) {\n      let view;\n\n      if (clickedLinkData.view && clickedLinkData.view === 'current') {\n        view = app.views.current;\n      } else if (clickedLinkData.view) {\n        view = $(clickedLinkData.view)[0].f7View;\n      } else {\n        view = $clickedEl.parents('.view')[0] && $clickedEl.parents('.view')[0].f7View;\n\n        if (!$clickedLinkEl.hasClass('back') && view && view.params.linksView) {\n          if (typeof view.params.linksView === 'string') view = $(view.params.linksView)[0].f7View;else if (view.params.linksView instanceof ViewClass) view = view.params.linksView;\n        }\n      }\n\n      if (!view) {\n        if (app.views.main) view = app.views.main;\n      }\n\n      if (!view || !view.router) return;\n\n      if (clickedLinkData.context && typeof clickedLinkData.context === 'string') {\n        try {\n          clickedLinkData.context = JSON.parse(clickedLinkData.context);\n        } catch (err) {// something wrong there\n        }\n      }\n\n      if ($clickedLinkEl[0].f7RouteProps) {\n        clickedLinkData.props = $clickedLinkEl[0].f7RouteProps;\n      }\n\n      if ($clickedLinkEl.hasClass('back')) view.router.back(url, clickedLinkData);else view.router.navigate(url, clickedLinkData);\n    }\n  }\n\n  app.on('click', handleClicks);\n}\n\nexport default {\n  name: 'clicks',\n  params: {\n    clicks: {\n      // External Links\n      externalLinks: '.external'\n    }\n  },\n  on: {\n    init() {\n      const app = this;\n      initClicks(app);\n    }\n\n  }\n};","map":null,"metadata":{},"sourceType":"module"}