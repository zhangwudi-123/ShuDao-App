{"ast":null,"code":"import $ from 'dom7';\nimport Tooltip from './tooltip-class';\nimport ConstructorMethods from '../../utils/constructor-methods';\nexport default {\n  name: 'tooltip',\n  static: {\n    Tooltip\n  },\n\n  create() {\n    const app = this;\n    app.tooltip = ConstructorMethods({\n      defaultSelector: '.tooltip',\n      constructor: Tooltip,\n      app,\n      domProp: 'f7Tooltip'\n    });\n\n    app.tooltip.show = function show(el) {\n      const $el = $(el);\n      if ($el.length === 0) return undefined;\n      const tooltip = $el[0].f7Tooltip;\n      if (!tooltip) return undefined;\n      tooltip.show($el[0]);\n      return tooltip;\n    };\n\n    app.tooltip.hide = function hide(el) {\n      const $el = $(el);\n      if ($el.length === 0) return undefined;\n      const tooltip = $el[0].f7Tooltip;\n      if (!tooltip) return undefined;\n      tooltip.hide();\n      return tooltip;\n    };\n\n    app.tooltip.setText = function text(el, newText) {\n      const $el = $(el);\n      if ($el.length === 0) return undefined;\n      const tooltip = $el[0].f7Tooltip;\n      if (!tooltip) return undefined;\n      tooltip.setText(newText);\n      return tooltip;\n    };\n  },\n\n  params: {\n    tooltip: {\n      targetEl: null,\n      text: null,\n      cssClass: null,\n      render: null\n    }\n  },\n  on: {\n    tabMounted(tabEl) {\n      const app = this;\n      $(tabEl).find('.tooltip-init').each((index, el) => {\n        const text = $(el).attr('data-tooltip');\n        if (!text) return;\n        app.tooltip.create({\n          targetEl: el,\n          text\n        });\n      });\n    },\n\n    tabBeforeRemove(tabEl) {\n      $(tabEl).find('.tooltip-init').each((index, el) => {\n        if (el.f7Tooltip) el.f7Tooltip.destroy();\n      });\n    },\n\n    pageInit(page) {\n      const app = this;\n      page.$el.find('.tooltip-init').each((index, el) => {\n        const text = $(el).attr('data-tooltip');\n        if (!text) return;\n        app.tooltip.create({\n          targetEl: el,\n          text\n        });\n      });\n\n      if (app.theme === 'ios' && page.view && page.view.router.dynamicNavbar && page.$navbarEl && page.$navbarEl.length > 0) {\n        page.$navbarEl.find('.tooltip-init').each((index, el) => {\n          const text = $(el).attr('data-tooltip');\n          if (!text) return;\n          app.tooltip.create({\n            targetEl: el,\n            text\n          });\n        });\n      }\n    },\n\n    pageBeforeRemove(page) {\n      const app = this;\n      page.$el.find('.tooltip-init').each((index, el) => {\n        if (el.f7Tooltip) el.f7Tooltip.destroy();\n      });\n\n      if (app.theme === 'ios' && page.view && page.view.router.dynamicNavbar && page.$navbarEl && page.$navbarEl.length > 0) {\n        page.$navbarEl.find('.tooltip-init').each((index, el) => {\n          if (el.f7Tooltip) el.f7Tooltip.destroy();\n        });\n      }\n    }\n\n  },\n  vnode: {\n    'tooltip-init': {\n      insert(vnode) {\n        const app = this;\n        const el = vnode.elm;\n        const text = $(el).attr('data-tooltip');\n        if (!text) return;\n        app.tooltip.create({\n          targetEl: el,\n          text\n        });\n      },\n\n      update(vnode) {\n        const el = vnode.elm;\n        if (!el.f7Tooltip) return;\n\n        if (vnode && vnode.data && vnode.data.attrs && vnode.data.attrs['data-tooltip']) {\n          el.f7Tooltip.setText(vnode.data.attrs['data-tooltip']);\n        }\n      },\n\n      destroy(vnode) {\n        const el = vnode.elm;\n        if (el.f7Tooltip) el.f7Tooltip.destroy();\n      }\n\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}