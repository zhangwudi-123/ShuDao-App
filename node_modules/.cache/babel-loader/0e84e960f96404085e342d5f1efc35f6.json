{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport React from 'react';\nimport Utils from '../utils/utils';\nimport Mixins from '../utils/mixins';\nimport __reactComponentWatch from '../runtime-helpers/react-component-watch.js';\nimport __reactComponentDispatchEvent from '../runtime-helpers/react-component-dispatch-event.js';\nimport __reactComponentSetProps from '../runtime-helpers/react-component-set-props.js';\n\nvar F7Toggle = /*#__PURE__*/function (_React$Component) {\n  _inherits(F7Toggle, _React$Component);\n\n  function F7Toggle(props, context) {\n    var _this;\n\n    _classCallCheck(this, F7Toggle);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(F7Toggle).call(this, props, context));\n    _this.__reactRefs = {};\n\n    (function () {\n      Utils.bindMethods(_assertThisInitialized(_this), ['onChange']);\n    })();\n\n    return _this;\n  }\n\n  _createClass(F7Toggle, [{\n    key: \"toggle\",\n    value: function toggle() {\n      var self = this;\n      if (self.f7Toggle && self.f7Toggle.toggle) self.f7Toggle.toggle();\n    }\n  }, {\n    key: \"onChange\",\n    value: function onChange(event) {\n      var self = this;\n      self.dispatchEvent('change', event);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var self = this;\n      var props = self.props;\n      var className = props.className,\n          disabled = props.disabled,\n          id = props.id,\n          style = props.style,\n          name = props.name,\n          readonly = props.readonly,\n          checked = props.checked,\n          defaultChecked = props.defaultChecked,\n          value = props.value;\n      var labelClasses = Utils.classNames('toggle', className, {\n        disabled: disabled\n      }, Mixins.colorClasses(props));\n      var inputEl;\n      {\n        inputEl = React.createElement('input', {\n          ref: function ref(__reactNode) {\n            _this2.__reactRefs['inputEl'] = __reactNode;\n          },\n          type: 'checkbox',\n          name: name,\n          disabled: disabled,\n          readOnly: readonly,\n          checked: checked,\n          defaultChecked: defaultChecked,\n          value: value,\n          onChange: self.onChange\n        });\n      }\n      return React.createElement('label', {\n        ref: function ref(__reactNode) {\n          _this2.__reactRefs['el'] = __reactNode;\n        },\n        id: id,\n        style: style,\n        className: labelClasses\n      }, inputEl, React.createElement('span', {\n        className: 'toggle-icon'\n      }));\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var self = this;\n      if (self.f7Toggle && self.f7Toggle.destroy && self.f7Toggle.$el) self.f7Toggle.destroy();\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var self = this;\n      if (!self.props.init) return;\n      self.$f7ready(function (f7) {\n        self.f7Toggle = f7.toggle.create({\n          el: self.refs.el,\n          on: {\n            change: function change(toggle) {\n              var checked = toggle.checked;\n              self.dispatchEvent('toggle:change toggleChange', checked);\n            }\n          }\n        });\n      });\n    }\n  }, {\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(events) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return __reactComponentDispatchEvent.apply(void 0, [this, events].concat(args));\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this3 = this;\n\n      __reactComponentWatch(this, 'props.checked', prevProps, prevState, function (newValue) {\n        var self = _this3;\n        if (!self.f7Toggle) return;\n        self.f7Toggle.checked = newValue;\n      });\n    }\n  }, {\n    key: \"refs\",\n    get: function get() {\n      return this.__reactRefs;\n    },\n    set: function set(refs) {}\n  }]);\n\n  return F7Toggle;\n}(React.Component);\n\n__reactComponentSetProps(F7Toggle, Object.assign({\n  id: [String, Number],\n  className: String,\n  style: Object,\n  init: {\n    type: Boolean,\n    default: true\n  },\n  checked: Boolean,\n  defaultChecked: Boolean,\n  disabled: Boolean,\n  readonly: Boolean,\n  name: String,\n  value: [String, Number, Array]\n}, Mixins.colorProps));\n\nF7Toggle.displayName = 'f7-toggle';\nexport default F7Toggle;","map":null,"metadata":{},"sourceType":"module"}