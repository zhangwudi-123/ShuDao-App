{"ast":null,"code":"import { mergeProps } from '../../utils/with-default-props';\nimport React, { useState, useRef, useEffect } from 'react';\nimport { withNativeProps } from '../../utils/native-props';\nimport { staged } from 'staged-components';\nimport { toCSSLength } from '../../utils/to-css-length';\nimport { LazyDetector } from './lazy-detector';\nimport { useIsomorphicUpdateLayoutEffect } from '../../utils/use-isomorphic-update-layout-effect';\nimport { ImageIcon } from './image-icon';\nimport { BrokenImageIcon } from './broken-image-icon';\nconst classPrefix = `adm-image`;\nconst defaultProps = {\n  fit: 'fill',\n  placeholder: React.createElement(\"div\", {\n    className: `${classPrefix}-tip`\n  }, React.createElement(ImageIcon, null)),\n  fallback: React.createElement(\"div\", {\n    className: `${classPrefix}-tip`\n  }, React.createElement(BrokenImageIcon, null)),\n  lazy: false,\n  draggable: false\n};\nexport const Image = staged(p => {\n  const props = mergeProps(defaultProps, p);\n  const [loaded, setLoaded] = useState(false);\n  const [failed, setFailed] = useState(false);\n  const ref = useRef(null);\n  const imgRef = useRef(null);\n  let src = props.src;\n  let srcSet = props.srcSet;\n  const [initialized, setInitialized] = useState(!props.lazy);\n  src = initialized ? props.src : undefined;\n  srcSet = initialized ? props.srcSet : undefined;\n  useIsomorphicUpdateLayoutEffect(() => {\n    setLoaded(false);\n    setFailed(false);\n  }, [src]);\n  useEffect(() => {\n    var _a; // for nextjs ssr\n\n\n    if ((_a = imgRef.current) === null || _a === void 0 ? void 0 : _a.complete) {\n      setLoaded(true);\n    }\n  }, []);\n\n  function renderInner() {\n    if (failed) {\n      return React.createElement(React.Fragment, null, props.fallback);\n    }\n\n    const img = React.createElement(\"img\", {\n      ref: imgRef,\n      className: `${classPrefix}-img`,\n      src: src,\n      alt: props.alt,\n      onClick: props.onClick,\n      onLoad: e => {\n        var _a;\n\n        setLoaded(true);\n        (_a = props.onLoad) === null || _a === void 0 ? void 0 : _a.call(props, e);\n      },\n      onError: e => {\n        var _a;\n\n        setFailed(true);\n        (_a = props.onError) === null || _a === void 0 ? void 0 : _a.call(props, e);\n      },\n      style: {\n        objectFit: props.fit,\n        display: loaded ? 'block' : 'none'\n      },\n      crossOrigin: props.crossOrigin,\n      decoding: props.decoding,\n      loading: props.loading,\n      referrerPolicy: props.referrerPolicy,\n      sizes: props.sizes,\n      srcSet: srcSet,\n      useMap: props.useMap,\n      draggable: props.draggable\n    });\n    return React.createElement(React.Fragment, null, !loaded && props.placeholder, img);\n  }\n\n  const style = {};\n\n  if (props.width) {\n    style['--width'] = toCSSLength(props.width);\n    style['width'] = toCSSLength(props.width);\n  }\n\n  if (props.height) {\n    style['--height'] = toCSSLength(props.height);\n    style['height'] = toCSSLength(props.height);\n  }\n\n  return withNativeProps(props, React.createElement(\"div\", {\n    ref: ref,\n    className: classPrefix,\n    style: style,\n    onClick: props.onContainerClick\n  }, props.lazy && !initialized && React.createElement(LazyDetector, {\n    onActive: () => {\n      setInitialized(true);\n    }\n  }), renderInner()));\n});","map":null,"metadata":{},"sourceType":"module"}