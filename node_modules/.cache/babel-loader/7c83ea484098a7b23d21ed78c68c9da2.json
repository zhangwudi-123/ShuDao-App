{"ast":null,"code":"import { __assign, __awaiter, __generator, __read, __rest, __spreadArray } from \"tslib\";\n/* eslint-disable @typescript-eslint/no-parameter-properties */\n\nimport { isFunction } from '../../utils';\n\nvar Fetch =\n/** @class */\nfunction () {\n  function Fetch(serviceRef, options, subscribe, initState) {\n    if (initState === void 0) {\n      initState = {};\n    }\n\n    this.serviceRef = serviceRef;\n    this.options = options;\n    this.subscribe = subscribe;\n    this.initState = initState;\n    this.count = 0;\n    this.state = {\n      loading: false,\n      params: undefined,\n      data: undefined,\n      error: undefined\n    };\n    this.state = __assign(__assign(__assign({}, this.state), {\n      loading: !options.manual\n    }), initState);\n  }\n\n  Fetch.prototype.setState = function (s) {\n    if (s === void 0) {\n      s = {};\n    }\n\n    this.state = __assign(__assign({}, this.state), s);\n    this.subscribe();\n  };\n\n  Fetch.prototype.runPluginHandler = function (event) {\n    var rest = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      rest[_i - 1] = arguments[_i];\n    } // @ts-ignore\n\n\n    var r = this.pluginImpls.map(function (i) {\n      var _a;\n\n      return (_a = i[event]) === null || _a === void 0 ? void 0 : _a.call.apply(_a, __spreadArray([i], __read(rest), false));\n    }).filter(Boolean);\n    return Object.assign.apply(Object, __spreadArray([{}], __read(r), false));\n  };\n\n  Fetch.prototype.runAsync = function () {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n\n    var params = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      params[_i] = arguments[_i];\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var currentCount, _l, _m, stopNow, _o, returnNow, state, servicePromise, res, error_1;\n\n      var _p;\n\n      return __generator(this, function (_q) {\n        switch (_q.label) {\n          case 0:\n            this.count += 1;\n            currentCount = this.count;\n            _l = this.runPluginHandler('onBefore', params), _m = _l.stopNow, stopNow = _m === void 0 ? false : _m, _o = _l.returnNow, returnNow = _o === void 0 ? false : _o, state = __rest(_l, [\"stopNow\", \"returnNow\"]); // stop request\n\n            if (stopNow) {\n              return [2\n              /*return*/\n              , new Promise(function () {})];\n            }\n\n            this.setState(__assign({\n              loading: true,\n              params: params\n            }, state)); // return now\n\n            if (returnNow) {\n              return [2\n              /*return*/\n              , Promise.resolve(state.data)];\n            }\n\n            (_b = (_a = this.options).onBefore) === null || _b === void 0 ? void 0 : _b.call(_a, params);\n            _q.label = 1;\n\n          case 1:\n            _q.trys.push([1, 3,, 4]);\n\n            servicePromise = this.runPluginHandler('onRequest', this.serviceRef.current, params).servicePromise;\n\n            if (!servicePromise) {\n              servicePromise = (_p = this.serviceRef).current.apply(_p, __spreadArray([], __read(params), false));\n            }\n\n            return [4\n            /*yield*/\n            , servicePromise];\n\n          case 2:\n            res = _q.sent();\n\n            if (currentCount !== this.count) {\n              // prevent run.then when request is canceled\n              return [2\n              /*return*/\n              , new Promise(function () {})];\n            } // const formattedResult = this.options.formatResultRef.current ? this.options.formatResultRef.current(res) : res;\n\n\n            this.setState({\n              data: res,\n              error: undefined,\n              loading: false\n            });\n            (_d = (_c = this.options).onSuccess) === null || _d === void 0 ? void 0 : _d.call(_c, res, params);\n            this.runPluginHandler('onSuccess', res, params);\n            (_f = (_e = this.options).onFinally) === null || _f === void 0 ? void 0 : _f.call(_e, params, res, undefined);\n\n            if (currentCount === this.count) {\n              this.runPluginHandler('onFinally', params, res, undefined);\n            }\n\n            return [2\n            /*return*/\n            , res];\n\n          case 3:\n            error_1 = _q.sent();\n\n            if (currentCount !== this.count) {\n              // prevent run.then when request is canceled\n              return [2\n              /*return*/\n              , new Promise(function () {})];\n            }\n\n            this.setState({\n              error: error_1,\n              loading: false\n            });\n            (_h = (_g = this.options).onError) === null || _h === void 0 ? void 0 : _h.call(_g, error_1, params);\n            this.runPluginHandler('onError', error_1, params);\n            (_k = (_j = this.options).onFinally) === null || _k === void 0 ? void 0 : _k.call(_j, params, undefined, error_1);\n\n            if (currentCount === this.count) {\n              this.runPluginHandler('onFinally', params, undefined, error_1);\n            }\n\n            throw error_1;\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  Fetch.prototype.run = function () {\n    var _this = this;\n\n    var params = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      params[_i] = arguments[_i];\n    }\n\n    this.runAsync.apply(this, __spreadArray([], __read(params), false)).catch(function (error) {\n      if (!_this.options.onError) {\n        console.error(error);\n      }\n    });\n  };\n\n  Fetch.prototype.cancel = function () {\n    this.count += 1;\n    this.setState({\n      loading: false\n    });\n    this.runPluginHandler('onCancel');\n  };\n\n  Fetch.prototype.refresh = function () {\n    // @ts-ignore\n    this.run.apply(this, __spreadArray([], __read(this.state.params || []), false));\n  };\n\n  Fetch.prototype.refreshAsync = function () {\n    // @ts-ignore\n    return this.runAsync.apply(this, __spreadArray([], __read(this.state.params || []), false));\n  };\n\n  Fetch.prototype.mutate = function (data) {\n    var targetData = isFunction(data) ? data(this.state.data) : data;\n    this.runPluginHandler('onMutate', targetData);\n    this.setState({\n      data: targetData\n    });\n  };\n\n  return Fetch;\n}();\n\nexport default Fetch;","map":null,"metadata":{},"sourceType":"module"}