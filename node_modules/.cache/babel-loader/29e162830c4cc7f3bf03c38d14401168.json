{"ast":null,"code":"import { useClickAway } from 'ahooks';\nimport classNames from 'classnames';\nimport React, { cloneElement, useEffect, useRef, useState, forwardRef, useImperativeHandle } from 'react';\nimport Popup from '../popup';\nimport { ItemChildrenWrap } from './item';\nimport { withNativeProps } from '../../utils/native-props';\nimport { mergeProps } from '../../utils/with-default-props';\nimport { usePropsValue } from '../../utils/use-props-value';\nimport { defaultPopupBaseProps } from '../popup/popup-base-props';\nconst classPrefix = `adm-dropdown`;\nconst defaultProps = {\n  defaultActiveKey: null,\n  closeOnMaskClick: true,\n  closeOnClickAway: false,\n  getContainer: defaultPopupBaseProps['getContainer']\n};\nconst Dropdown = forwardRef((p, ref) => {\n  const props = mergeProps(defaultProps, p);\n  const [value, setValue] = usePropsValue({\n    value: props.activeKey,\n    defaultValue: props.defaultActiveKey,\n    onChange: props.onChange\n  });\n  const navRef = useRef(null);\n  const contentRef = useRef(null); // 点击外部区域，关闭\n\n  useClickAway(() => {\n    if (!props.closeOnClickAway) return;\n    setValue(null);\n  }, [navRef, contentRef]); // 计算 navs 的 top 值\n\n  const [top, setTop] = useState();\n  const containerRef = useRef(null);\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    if (value) {\n      const rect = container.getBoundingClientRect();\n      setTop(rect.bottom);\n    }\n  }, [value]);\n\n  const changeActive = key => {\n    if (value === key) {\n      setValue(null);\n    } else {\n      setValue(key);\n    }\n  };\n\n  let popupForceRender = false;\n  const items = [];\n  const navs = React.Children.map(props.children, child => {\n    if (React.isValidElement(child)) {\n      const childProps = Object.assign(Object.assign({}, child.props), {\n        onClick: () => {\n          changeActive(child.key);\n        },\n        active: child.key === value,\n        arrow: child.props.arrow === undefined ? props.arrow : child.props.arrow\n      });\n      items.push(child);\n      if (child.props.forceRender) popupForceRender = true;\n      return cloneElement(child, childProps);\n    } else {\n      return child;\n    }\n  });\n  useImperativeHandle(ref, () => ({\n    close: () => {\n      setValue(null);\n    }\n  }), [setValue]);\n  return withNativeProps(props, React.createElement(\"div\", {\n    className: classNames(classPrefix, {\n      [`${classPrefix}-open`]: !!value\n    }),\n    ref: containerRef\n  }, React.createElement(\"div\", {\n    className: `${classPrefix}-nav`,\n    ref: navRef\n  }, navs), React.createElement(Popup, {\n    visible: !!value,\n    position: 'top',\n    getContainer: props.getContainer,\n    className: `${classPrefix}-popup`,\n    maskClassName: `${classPrefix}-popup-mask`,\n    bodyClassName: `${classPrefix}-popup-body`,\n    style: {\n      top\n    },\n    forceRender: popupForceRender,\n    onMaskClick: props.closeOnMaskClick ? () => {\n      changeActive(null);\n    } : undefined\n  }, React.createElement(\"div\", {\n    ref: contentRef\n  }, items.map(item => {\n    const isActive = item.key === value;\n    return React.createElement(ItemChildrenWrap, {\n      key: item.key,\n      active: isActive,\n      forceRender: item.props.forceRender,\n      destroyOnClose: item.props.destroyOnClose\n    }, item.props.children);\n  })))));\n});\nexport default Dropdown;","map":null,"metadata":{},"sourceType":"module"}