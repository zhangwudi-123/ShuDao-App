{"ast":null,"code":"import $ from 'dom7';\nimport Utils from '../../utils/utils';\nimport Framework7Class from '../../utils/class';\nimport Support from '../../utils/support';\nimport Device from '../../utils/device';\n\nclass PullToRefresh extends Framework7Class {\n  constructor(app, el) {\n    super({}, [app]);\n    const ptr = this;\n    const $el = $(el);\n    const $preloaderEl = $el.find('.ptr-preloader');\n    ptr.$el = $el;\n    ptr.el = $el[0];\n    ptr.app = app;\n    ptr.bottom = ptr.$el.hasClass('ptr-bottom'); // Extend defaults with modules params\n\n    ptr.useModulesParams({});\n    const isMaterial = app.theme === 'md';\n    const isIos = app.theme === 'ios';\n    const isAurora = app.theme === 'aurora'; // Done\n\n    ptr.done = function done() {\n      const $transitionTarget = isMaterial ? $preloaderEl : $el;\n      $transitionTarget.transitionEnd(() => {\n        $el.removeClass('ptr-transitioning ptr-pull-up ptr-pull-down ptr-closing');\n        $el.trigger('ptr:done');\n        ptr.emit('local::done ptrDone', $el[0]);\n      });\n      $el.removeClass('ptr-refreshing').addClass('ptr-transitioning ptr-closing');\n      return ptr;\n    };\n\n    ptr.refresh = function refresh() {\n      if ($el.hasClass('ptr-refreshing')) return ptr;\n      $el.addClass('ptr-transitioning ptr-refreshing');\n      $el.trigger('ptr:refresh', ptr.done);\n      ptr.emit('local::refresh ptrRefresh', $el[0], ptr.done);\n      return ptr;\n    }; // Mousewheel\n\n\n    ptr.mousewheel = $el.attr('data-ptr-mousewheel') === 'true'; // Events handling\n\n    let touchId;\n    let isTouched;\n    let isMoved;\n    const touchesStart = {};\n    let isScrolling;\n    let touchesDiff;\n    let refresh = false;\n    let useTranslate = false;\n    let forceUseTranslate = false;\n    let startTranslate = 0;\n    let translate;\n    let scrollTop;\n    let wasScrolled;\n    let triggerDistance;\n    let dynamicTriggerDistance;\n    let pullStarted;\n    let hasNavbar = false;\n    let scrollHeight;\n    let offsetHeight;\n    let maxScrollTop;\n    const $pageEl = $el.parents('.page');\n    if ($pageEl.find('.navbar').length > 0 || $pageEl.parents('.view').children('.navbars').length > 0) hasNavbar = true;\n    if ($pageEl.hasClass('no-navbar')) hasNavbar = false;\n\n    if (!ptr.bottom && $pageEl.hasClass('page-with-navbar-large')) {\n      const pageNavbarEl = app.navbar.getElByPage($pageEl[0]);\n\n      if (pageNavbarEl && $(pageNavbarEl).hasClass('navbar-large-transparent')) {\n        $el.addClass('ptr-with-navbar-large-transparent');\n      }\n    }\n\n    if (!hasNavbar && !ptr.bottom) $el.addClass('ptr-no-navbar'); // Define trigger distance\n\n    if ($el.attr('data-ptr-distance')) {\n      dynamicTriggerDistance = true;\n    } else if (isMaterial) {\n      triggerDistance = 66;\n    } else if (isIos) {\n      triggerDistance = 44;\n    } else if (isAurora) {\n      triggerDistance = 38;\n    }\n\n    function handleTouchStart(e) {\n      if (isTouched) {\n        if (Device.os === 'android') {\n          if ('targetTouches' in e && e.targetTouches.length > 1) return;\n        } else return;\n      }\n\n      if ($el.hasClass('ptr-refreshing')) {\n        return;\n      }\n\n      if ($(e.target).closest('.sortable-handler, .ptr-ignore, .card-expandable.card-opened').length) return;\n      isMoved = false;\n      pullStarted = false;\n      isTouched = true;\n      isScrolling = undefined;\n      wasScrolled = undefined;\n      if (e.type === 'touchstart') touchId = e.targetTouches[0].identifier;\n      touchesStart.x = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;\n      touchesStart.y = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;\n    }\n\n    function handleTouchMove(e) {\n      if (!isTouched) return;\n      let pageX;\n      let pageY;\n      let touch;\n\n      if (e.type === 'touchmove') {\n        if (touchId && e.touches) {\n          for (let i = 0; i < e.touches.length; i += 1) {\n            if (e.touches[i].identifier === touchId) {\n              touch = e.touches[i];\n            }\n          }\n        }\n\n        if (!touch) touch = e.targetTouches[0];\n        pageX = touch.pageX;\n        pageY = touch.pageY;\n      } else {\n        pageX = e.pageX;\n        pageY = e.pageY;\n      }\n\n      if (!pageX || !pageY) return;\n\n      if (typeof isScrolling === 'undefined') {\n        isScrolling = !!(isScrolling || Math.abs(pageY - touchesStart.y) > Math.abs(pageX - touchesStart.x));\n      }\n\n      if (!isScrolling) {\n        isTouched = false;\n        return;\n      }\n\n      scrollTop = $el[0].scrollTop;\n\n      if (!isMoved) {\n        $el.removeClass('ptr-transitioning');\n        let targetIsScrollable;\n        scrollHeight = $el[0].scrollHeight;\n        offsetHeight = $el[0].offsetHeight;\n\n        if (ptr.bottom) {\n          maxScrollTop = scrollHeight - offsetHeight;\n        }\n\n        if (scrollTop > scrollHeight) {\n          isTouched = false;\n          return;\n        }\n\n        const $ptrWatchScrollable = $(e.target).closest('.ptr-watch-scroll');\n\n        if ($ptrWatchScrollable.length) {\n          $ptrWatchScrollable.each((ptrScrollableIndex, ptrScrollableEl) => {\n            if (ptrScrollableEl === el) return;\n\n            if (ptrScrollableEl.scrollHeight > ptrScrollableEl.offsetHeight && $(ptrScrollableEl).css('overflow') === 'auto' && (!ptr.bottom && ptrScrollableEl.scrollTop > 0 || ptr.bottom && ptrScrollableEl.scrollTop < ptrScrollableEl.scrollHeight - ptrScrollableEl.offsetHeight)) {\n              targetIsScrollable = true;\n            }\n          });\n        }\n\n        if (targetIsScrollable) {\n          isTouched = false;\n          return;\n        }\n\n        if (dynamicTriggerDistance) {\n          triggerDistance = $el.attr('data-ptr-distance');\n          if (triggerDistance.indexOf('%') >= 0) triggerDistance = scrollHeight * parseInt(triggerDistance, 10) / 100;\n        }\n\n        startTranslate = $el.hasClass('ptr-refreshing') ? triggerDistance : 0;\n\n        if (scrollHeight === offsetHeight || Device.os !== 'ios' || isMaterial) {\n          useTranslate = true;\n        } else {\n          useTranslate = false;\n        }\n\n        forceUseTranslate = false;\n      }\n\n      isMoved = true;\n      touchesDiff = pageY - touchesStart.y;\n      if (typeof wasScrolled === 'undefined' && (ptr.bottom ? scrollTop !== maxScrollTop : scrollTop !== 0)) wasScrolled = true;\n      const ptrStarted = ptr.bottom ? touchesDiff < 0 && scrollTop >= maxScrollTop || scrollTop > maxScrollTop : touchesDiff > 0 && scrollTop <= 0 || scrollTop < 0;\n\n      if (ptrStarted) {\n        // iOS 8 fix\n        if (Device.os === 'ios' && parseInt(Device.osVersion.split('.')[0], 10) > 7) {\n          if (!ptr.bottom && scrollTop === 0 && !wasScrolled) useTranslate = true;\n          if (ptr.bottom && scrollTop === maxScrollTop && !wasScrolled) useTranslate = true;\n        }\n\n        if (!useTranslate && ptr.bottom && !isMaterial) {\n          $el.css('-webkit-overflow-scrolling', 'auto');\n          $el.scrollTop(maxScrollTop);\n          forceUseTranslate = true;\n        }\n\n        if (useTranslate || forceUseTranslate) {\n          if (e.cancelable) {\n            e.preventDefault();\n          }\n\n          translate = (ptr.bottom ? -1 * Math.abs(touchesDiff) ** 0.85 : touchesDiff ** 0.85) + startTranslate;\n\n          if (isMaterial) {\n            $preloaderEl.transform(`translate3d(0,${translate}px,0)`).find('.ptr-arrow').transform(`rotate(${180 * (Math.abs(touchesDiff) / 66) + 100}deg)`);\n          } else {\n            // eslint-disable-next-line\n            if (ptr.bottom) {\n              $el.children().transform(`translate3d(0,${translate}px,0)`);\n            } else {\n              $el.transform(`translate3d(0,${translate}px,0)`);\n            }\n          }\n        }\n\n        if ((useTranslate || forceUseTranslate) && Math.abs(touchesDiff) ** 0.85 > triggerDistance || !useTranslate && Math.abs(touchesDiff) >= triggerDistance * 2) {\n          refresh = true;\n          $el.addClass('ptr-pull-up').removeClass('ptr-pull-down');\n        } else {\n          refresh = false;\n          $el.removeClass('ptr-pull-up').addClass('ptr-pull-down');\n        }\n\n        if (!pullStarted) {\n          $el.trigger('ptr:pullstart');\n          ptr.emit('local::pullStart ptrPullStart', $el[0]);\n          pullStarted = true;\n        }\n\n        $el.trigger('ptr:pullmove', {\n          event: e,\n          scrollTop,\n          translate,\n          touchesDiff\n        });\n        ptr.emit('local::pullMove ptrPullMove', $el[0], {\n          event: e,\n          scrollTop,\n          translate,\n          touchesDiff\n        });\n      } else {\n        pullStarted = false;\n        $el.removeClass('ptr-pull-up ptr-pull-down');\n        refresh = false;\n      }\n    }\n\n    function handleTouchEnd(e) {\n      if (e.type === 'touchend' && e.changedTouches && e.changedTouches.length > 0 && touchId) {\n        if (e.changedTouches[0].identifier !== touchId) {\n          isTouched = false;\n          isScrolling = false;\n          isMoved = false;\n          touchId = null;\n          return;\n        }\n      }\n\n      if (!isTouched || !isMoved) {\n        isTouched = false;\n        isMoved = false;\n        return;\n      }\n\n      if (translate) {\n        $el.addClass('ptr-transitioning');\n        translate = 0;\n      }\n\n      if (isMaterial) {\n        $preloaderEl.transform('').find('.ptr-arrow').transform('');\n      } else {\n        // eslint-disable-next-line\n        if (ptr.bottom) {\n          $el.children().transform('');\n        } else {\n          $el.transform('');\n        }\n      }\n\n      if (!useTranslate && ptr.bottom && !isMaterial) {\n        $el.css('-webkit-overflow-scrolling', '');\n      }\n\n      if (refresh) {\n        $el.addClass('ptr-refreshing');\n        $el.trigger('ptr:refresh', ptr.done);\n        ptr.emit('local::refresh ptrRefresh', $el[0], ptr.done);\n      } else {\n        $el.removeClass('ptr-pull-down');\n      }\n\n      isTouched = false;\n      isMoved = false;\n\n      if (pullStarted) {\n        $el.trigger('ptr:pullend');\n        ptr.emit('local::pullEnd ptrPullEnd', $el[0]);\n      }\n    }\n\n    let mousewheelTimeout;\n    let mousewheelMoved;\n    let mousewheelAllow = true;\n    let mousewheelTranslate = 0;\n\n    function handleMouseWheelRelease() {\n      mousewheelAllow = true;\n      mousewheelMoved = false;\n      mousewheelTranslate = 0;\n\n      if (translate) {\n        $el.addClass('ptr-transitioning');\n        translate = 0;\n      }\n\n      if (isMaterial) {\n        $preloaderEl.transform('').find('.ptr-arrow').transform('');\n      } else {\n        // eslint-disable-next-line\n        if (ptr.bottom) {\n          $el.children().transform('');\n        } else {\n          $el.transform('');\n        }\n      }\n\n      if (refresh) {\n        $el.addClass('ptr-refreshing');\n        $el.trigger('ptr:refresh', ptr.done);\n        ptr.emit('local::refresh ptrRefresh', $el[0], ptr.done);\n      } else {\n        $el.removeClass('ptr-pull-down');\n      }\n\n      if (pullStarted) {\n        $el.trigger('ptr:pullend');\n        ptr.emit('local::pullEnd ptrPullEnd', $el[0]);\n      }\n    }\n\n    function handleMouseWheel(e) {\n      if (!mousewheelAllow) return;\n      const {\n        deltaX,\n        deltaY\n      } = e;\n      if (Math.abs(deltaX) > Math.abs(deltaY)) return;\n\n      if ($el.hasClass('ptr-refreshing')) {\n        return;\n      }\n\n      if ($(e.target).closest('.sortable-handler, .ptr-ignore, .card-expandable.card-opened').length) return;\n      clearTimeout(mousewheelTimeout);\n      scrollTop = $el[0].scrollTop;\n\n      if (!mousewheelMoved) {\n        $el.removeClass('ptr-transitioning');\n        let targetIsScrollable;\n        scrollHeight = $el[0].scrollHeight;\n        offsetHeight = $el[0].offsetHeight;\n\n        if (ptr.bottom) {\n          maxScrollTop = scrollHeight - offsetHeight;\n        }\n\n        if (scrollTop > scrollHeight) {\n          mousewheelAllow = false;\n          return;\n        }\n\n        const $ptrWatchScrollable = $(e.target).closest('.ptr-watch-scroll');\n\n        if ($ptrWatchScrollable.length) {\n          $ptrWatchScrollable.each((ptrScrollableIndex, ptrScrollableEl) => {\n            if (ptrScrollableEl === el) return;\n\n            if (ptrScrollableEl.scrollHeight > ptrScrollableEl.offsetHeight && $(ptrScrollableEl).css('overflow') === 'auto' && (!ptr.bottom && ptrScrollableEl.scrollTop > 0 || ptr.bottom && ptrScrollableEl.scrollTop < ptrScrollableEl.scrollHeight - ptrScrollableEl.offsetHeight)) {\n              targetIsScrollable = true;\n            }\n          });\n        }\n\n        if (targetIsScrollable) {\n          mousewheelAllow = false;\n          return;\n        }\n\n        if (dynamicTriggerDistance) {\n          triggerDistance = $el.attr('data-ptr-distance');\n          if (triggerDistance.indexOf('%') >= 0) triggerDistance = scrollHeight * parseInt(triggerDistance, 10) / 100;\n        }\n      }\n\n      isMoved = true;\n      mousewheelTranslate -= deltaY;\n      touchesDiff = mousewheelTranslate; // pageY - touchesStart.y;\n\n      if (typeof wasScrolled === 'undefined' && (ptr.bottom ? scrollTop !== maxScrollTop : scrollTop !== 0)) wasScrolled = true;\n      const ptrStarted = ptr.bottom ? touchesDiff < 0 && scrollTop >= maxScrollTop || scrollTop > maxScrollTop : touchesDiff > 0 && scrollTop <= 0 || scrollTop < 0;\n\n      if (ptrStarted) {\n        if (e.cancelable) {\n          e.preventDefault();\n        }\n\n        translate = touchesDiff;\n\n        if (Math.abs(translate) > triggerDistance) {\n          translate = triggerDistance + (Math.abs(translate) - triggerDistance) ** 0.7;\n          if (ptr.bottom) translate = -translate;\n        }\n\n        if (isMaterial) {\n          $preloaderEl.transform(`translate3d(0,${translate}px,0)`).find('.ptr-arrow').transform(`rotate(${180 * (Math.abs(touchesDiff) / 66) + 100}deg)`);\n        } else {\n          // eslint-disable-next-line\n          if (ptr.bottom) {\n            $el.children().transform(`translate3d(0,${translate}px,0)`);\n          } else {\n            $el.transform(`translate3d(0,${translate}px,0)`);\n          }\n        }\n\n        if (Math.abs(translate) > triggerDistance) {\n          refresh = true;\n          $el.addClass('ptr-pull-up').removeClass('ptr-pull-down');\n        } else {\n          refresh = false;\n          $el.removeClass('ptr-pull-up').addClass('ptr-pull-down');\n        }\n\n        if (!pullStarted) {\n          $el.trigger('ptr:pullstart');\n          ptr.emit('local::pullStart ptrPullStart', $el[0]);\n          pullStarted = true;\n        }\n\n        $el.trigger('ptr:pullmove', {\n          event: e,\n          scrollTop,\n          translate,\n          touchesDiff\n        });\n        ptr.emit('local::pullMove ptrPullMove', $el[0], {\n          event: e,\n          scrollTop,\n          translate,\n          touchesDiff\n        });\n      } else {\n        pullStarted = false;\n        $el.removeClass('ptr-pull-up ptr-pull-down');\n        refresh = false;\n      }\n\n      mousewheelTimeout = setTimeout(handleMouseWheelRelease, 300);\n    }\n\n    if (!$pageEl.length || !$el.length) return ptr;\n    $el[0].f7PullToRefresh = ptr; // Events\n\n    ptr.attachEvents = function attachEvents() {\n      const passive = Support.passiveListener ? {\n        passive: true\n      } : false;\n      $el.on(app.touchEvents.start, handleTouchStart, passive);\n      app.on('touchmove:active', handleTouchMove);\n      app.on('touchend:passive', handleTouchEnd);\n\n      if (ptr.mousewheel && !ptr.bottom) {\n        $el.on('wheel', handleMouseWheel);\n      }\n    };\n\n    ptr.detachEvents = function detachEvents() {\n      const passive = Support.passiveListener ? {\n        passive: true\n      } : false;\n      $el.off(app.touchEvents.start, handleTouchStart, passive);\n      app.off('touchmove:active', handleTouchMove);\n      app.off('touchend:passive', handleTouchEnd);\n\n      if (ptr.mousewheel && !ptr.bottom) {\n        $el.off('wheel', handleMouseWheel);\n      }\n    }; // Install Modules\n\n\n    ptr.useModules(); // Init\n\n    ptr.init();\n    return ptr;\n  }\n\n  init() {\n    const ptr = this;\n    ptr.attachEvents();\n  }\n\n  destroy() {\n    let ptr = this;\n    ptr.emit('local::beforeDestroy ptrBeforeDestroy', ptr);\n    ptr.$el.trigger('ptr:beforedestroy');\n    delete ptr.el.f7PullToRefresh;\n    ptr.detachEvents();\n    Utils.deleteProps(ptr);\n    ptr = null;\n  }\n\n}\n\nexport default PullToRefresh;","map":null,"metadata":{},"sourceType":"module"}