{"ast":null,"code":"import { __assign, __awaiter, __generator, __read, __spreadArray } from \"tslib\";\nimport { useMemo, useState } from 'react';\nimport useEventListener from '../useEventListener';\nimport useMemoizedFn from '../useMemoizedFn';\nimport useRequest from '../useRequest';\nimport useUpdateEffect from '../useUpdateEffect';\nimport { getTargetElement } from '../utils/domTarget';\nimport { getClientHeight, getScrollHeight, getScrollTop } from '../utils/rect';\n\nvar useInfiniteScroll = function (service, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var target = options.target,\n      isNoMore = options.isNoMore,\n      _a = options.threshold,\n      threshold = _a === void 0 ? 100 : _a,\n      _b = options.reloadDeps,\n      reloadDeps = _b === void 0 ? [] : _b,\n      manual = options.manual,\n      onBefore = options.onBefore,\n      onSuccess = options.onSuccess,\n      onError = options.onError,\n      onFinally = options.onFinally;\n\n  var _c = __read(useState(), 2),\n      finalData = _c[0],\n      setFinalData = _c[1];\n\n  var _d = __read(useState(false), 2),\n      loadingMore = _d[0],\n      setLoadingMore = _d[1];\n\n  var noMore = useMemo(function () {\n    if (!isNoMore) return false;\n    return isNoMore(finalData);\n  }, [finalData]);\n\n  var _e = useRequest(function (lastData) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var currentData;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , service(lastData)];\n\n          case 1:\n            currentData = _a.sent();\n\n            if (!lastData) {\n              setFinalData(currentData);\n            } else {\n              setFinalData(__assign(__assign({}, currentData), {\n                // @ts-ignore\n                list: __spreadArray(__spreadArray([], __read(lastData.list), false), __read(currentData.list), false)\n              }));\n            }\n\n            return [2\n            /*return*/\n            , currentData];\n        }\n      });\n    });\n  }, {\n    manual: manual,\n    onFinally: function (_, d, e) {\n      setLoadingMore(false);\n      onFinally === null || onFinally === void 0 ? void 0 : onFinally(d, e);\n    },\n    onBefore: function () {\n      return onBefore === null || onBefore === void 0 ? void 0 : onBefore();\n    },\n    onSuccess: function (d) {\n      setTimeout(function () {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        scrollMethod();\n      });\n      onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess(d);\n    },\n    onError: function (e) {\n      return onError === null || onError === void 0 ? void 0 : onError(e);\n    }\n  }),\n      loading = _e.loading,\n      run = _e.run,\n      runAsync = _e.runAsync,\n      cancel = _e.cancel;\n\n  var loadMore = useMemoizedFn(function () {\n    if (noMore) return;\n    setLoadingMore(true);\n    run(finalData);\n  });\n  var loadMoreAsync = useMemoizedFn(function () {\n    if (noMore) return Promise.reject();\n    setLoadingMore(true);\n    return runAsync(finalData);\n  });\n\n  var reload = function () {\n    setLoadingMore(false);\n    return run();\n  };\n\n  var reloadAsync = function () {\n    setLoadingMore(false);\n    return runAsync();\n  };\n\n  var scrollMethod = function () {\n    var el = getTargetElement(target);\n\n    if (!el) {\n      return;\n    }\n\n    el = el === document ? document.documentElement : el;\n    var scrollTop = getScrollTop(el);\n    var scrollHeight = getScrollHeight(el);\n    var clientHeight = getClientHeight(el);\n\n    if (scrollHeight - scrollTop <= clientHeight + threshold) {\n      loadMore();\n    }\n  };\n\n  useEventListener('scroll', function () {\n    if (loading || loadingMore) {\n      return;\n    }\n\n    scrollMethod();\n  }, {\n    target: target\n  });\n  useUpdateEffect(function () {\n    run();\n  }, __spreadArray([], __read(reloadDeps), false));\n  return {\n    data: finalData,\n    loading: !loadingMore && loading,\n    loadingMore: loadingMore,\n    noMore: noMore,\n    loadMore: loadMore,\n    loadMoreAsync: loadMoreAsync,\n    reload: useMemoizedFn(reload),\n    reloadAsync: useMemoizedFn(reloadAsync),\n    mutate: setFinalData,\n    cancel: cancel\n  };\n};\n\nexport default useInfiniteScroll;","map":null,"metadata":{},"sourceType":"module"}