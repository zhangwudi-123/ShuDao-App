{"ast":null,"code":"import Utils from '../../utils/utils';\nimport Autocomplete from './autocomplete-class';\nimport ConstructorMethods from '../../utils/constructor-methods';\nexport default {\n  name: 'autocomplete',\n  params: {\n    autocomplete: {\n      openerEl: undefined,\n      inputEl: undefined,\n      view: undefined,\n      // DropDown\n      dropdownContainerEl: undefined,\n      dropdownPlaceholderText: undefined,\n      typeahead: false,\n      highlightMatches: true,\n      expandInput: false,\n      updateInputValueOnSelect: true,\n      inputEvents: 'input',\n      value: undefined,\n      multiple: false,\n      source: undefined,\n      limit: undefined,\n      valueProperty: 'id',\n      textProperty: 'text',\n      openIn: 'page',\n      // or 'popup' or 'dropdown'\n      pageBackLinkText: 'Back',\n      popupCloseLinkText: 'Close',\n      pageTitle: undefined,\n      searchbarPlaceholder: 'Search...',\n      searchbarDisableText: 'Cancel',\n      searchbarDisableButton: undefined,\n      popupPush: false,\n      popupSwipeToClose: undefined,\n      animate: true,\n      autoFocus: false,\n      closeOnSelect: false,\n      notFoundText: 'Nothing found',\n      requestSourceOnOpen: false,\n      // Preloader\n      preloaderColor: undefined,\n      preloader: false,\n      // Colors\n      formColorTheme: undefined,\n      navbarColorTheme: undefined,\n      // Routing\n      routableModals: true,\n      url: 'select/',\n      // Custom render functions\n      renderDropdown: undefined,\n      renderPage: undefined,\n      renderPopup: undefined,\n      renderItem: undefined,\n      renderSearchbar: undefined,\n      renderNavbar: undefined\n    }\n  },\n  static: {\n    Autocomplete\n  },\n\n  create() {\n    const app = this;\n    app.autocomplete = Utils.extend(ConstructorMethods({\n      defaultSelector: undefined,\n      constructor: Autocomplete,\n      app,\n      domProp: 'f7Autocomplete'\n    }), {\n      open(autocompleteEl) {\n        const ac = app.autocomplete.get(autocompleteEl);\n        if (ac && ac.open) return ac.open();\n        return undefined;\n      },\n\n      close(autocompleteEl) {\n        const ac = app.autocomplete.get(autocompleteEl);\n        if (ac && ac.close) return ac.close();\n        return undefined;\n      }\n\n    });\n  }\n\n};","map":null,"metadata":{},"sourceType":"module"}