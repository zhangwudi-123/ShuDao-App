{"ast":null,"code":"import { __read, __spreadArray } from \"tslib\";\nimport { useMemo, useRef } from 'react';\nimport { isFunction } from '../utils';\nimport useMemoizedFn from '../useMemoizedFn';\nimport useUpdate from '../useUpdate';\n\nfunction useControllableValue(props, options) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  var defaultValue = options.defaultValue,\n      _a = options.defaultValuePropName,\n      defaultValuePropName = _a === void 0 ? 'defaultValue' : _a,\n      _b = options.valuePropName,\n      valuePropName = _b === void 0 ? 'value' : _b,\n      _c = options.trigger,\n      trigger = _c === void 0 ? 'onChange' : _c;\n  var value = props[valuePropName];\n  var isControlled = props.hasOwnProperty(valuePropName);\n  var initialValue = useMemo(function () {\n    if (isControlled) {\n      return value;\n    }\n\n    if (props.hasOwnProperty(defaultValuePropName)) {\n      return props[defaultValuePropName];\n    }\n\n    return defaultValue;\n  }, []);\n  var stateRef = useRef(initialValue);\n\n  if (isControlled) {\n    stateRef.current = value;\n  }\n\n  var update = useUpdate();\n\n  function setState(v) {\n    var args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n\n    var r = isFunction(v) ? v(stateRef.current) : v;\n\n    if (!isControlled) {\n      stateRef.current = r;\n      update();\n    }\n\n    if (props[trigger]) {\n      props[trigger].apply(props, __spreadArray([r], __read(args), false));\n    }\n  }\n\n  return [stateRef.current, useMemoizedFn(setState)];\n}\n\nexport default useControllableValue;","map":null,"metadata":{},"sourceType":"module"}