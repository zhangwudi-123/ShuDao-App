{"ast":null,"code":"import classNames from 'classnames';\nimport React from 'react';\nimport { withNativeProps } from '../../utils/native-props';\nimport { mergeProps } from '../../utils/with-default-props';\nimport Space from '../space';\nimport Grid from '../grid';\nimport { usePropsValue } from '../../utils/use-props-value';\nimport { CheckMark } from './check-mark';\nimport { useConfig } from '../config-provider';\nconst classPrefix = `adm-selector`;\nconst defaultProps = {\n  multiple: false,\n  defaultValue: [],\n  showCheckMark: true\n};\nexport const Selector = p => {\n  const props = mergeProps(defaultProps, p);\n  const [value, setValue] = usePropsValue({\n    value: props.value,\n    defaultValue: props.defaultValue,\n    onChange: val => {\n      var _a;\n\n      const extend = {\n        get items() {\n          return props.options.filter(option => val.includes(option.value));\n        }\n\n      };\n      (_a = props.onChange) === null || _a === void 0 ? void 0 : _a.call(props, val, extend);\n    }\n  });\n  const {\n    locale\n  } = useConfig();\n  const items = props.options.map(option => {\n    const active = (value || []).includes(option.value);\n    const disabled = option.disabled || props.disabled;\n    const itemCls = classNames(`${classPrefix}-item`, {\n      [`${classPrefix}-item-active`]: active && !props.multiple,\n      [`${classPrefix}-item-multiple-active`]: active && props.multiple,\n      [`${classPrefix}-item-disabled`]: disabled\n    });\n    return React.createElement(\"div\", {\n      key: option.value,\n      className: itemCls,\n      onClick: () => {\n        if (disabled) {\n          return;\n        }\n\n        if (props.multiple) {\n          const val = active ? value.filter(v => v !== option.value) : [...value, option.value];\n          setValue(val);\n        } else {\n          const val = active ? [] : [option.value];\n          setValue(val);\n        }\n      },\n      role: 'option',\n      \"aria-selected\": active && !props.multiple || active && props.multiple\n    }, option.label, option.description && React.createElement(\"div\", {\n      className: `${classPrefix}-item-description`\n    }, option.description), active && props.showCheckMark && React.createElement(\"div\", {\n      className: `${classPrefix}-check-mark-wrapper`\n    }, React.createElement(CheckMark, null)));\n  });\n  return withNativeProps(props, React.createElement(\"div\", {\n    className: classPrefix,\n    role: 'listbox',\n    \"aria-label\": locale.Selector.name\n  }, !props.columns && React.createElement(Space, {\n    wrap: true\n  }, items), props.columns && React.createElement(Grid, {\n    columns: props.columns\n  }, items)));\n};","map":null,"metadata":{},"sourceType":"module"}