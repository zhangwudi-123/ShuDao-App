{"ast":null,"code":"\"use strict\";\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n/**\r\n * 建立索引\r\n * @param   {[string]|[Object]}\t data         数据\r\n * @param\t{string|[string]}    indexs       如果 data 为 [Object]，这里需要建立拼音索引 key\r\n * @param   {array}              dict         词典数据\r\n */\n\n\nvar Engine = /*#__PURE__*/function () {\n  function Engine(data) {\n    var indexs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var dict = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var prefix = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n\n    _classCallCheck(this, Engine);\n\n    this.indexs = [];\n    this.history = {\n      keyword: '',\n      indexs: [],\n      data: []\n    };\n    this.data = data;\n    this.dict = dict;\n    this.prefix = prefix; // 建立拼音关键词索引\n\n    indexs = typeof indexs === 'string' ? [indexs] : indexs;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var item = _step.value;\n        var keywords = '';\n\n        if (typeof item === 'string') {\n          keywords = Engine.participle(item, dict, prefix);\n        } else {\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n\n          try {\n            for (var _iterator2 = indexs[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              var key = _step2.value;\n              var words = item[key];\n\n              if (words) {\n                keywords += Engine.participle(words, dict, prefix);\n              }\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                _iterator2.return();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n        }\n\n        this.indexs.push(keywords.toLowerCase());\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  }\n  /**\r\n   * 查询\r\n   * @param   {string}    keyword     拼音或者关键字\r\n   * @return  {[string]|{Object}}\r\n   */\n\n\n  _createClass(Engine, [{\n    key: \"query\",\n    value: function query(keyword) {\n      keyword = keyword.replace(/\\s/g, '').toLowerCase();\n      var indexs = this.indexs;\n      var data = this.data;\n      var history = this.history;\n      var result = []; // 性能优化：在上一次搜索结果中查询\n\n      if (history.data.length && keyword.indexOf(history.keyword) === 0) {\n        indexs = history.indexs;\n        data = history.data;\n      }\n\n      history.keyword = keyword;\n      history.indexs = [];\n\n      for (var index = 0; index < indexs.length; index++) {\n        if (indexs[index].indexOf(this.prefix + keyword) !== -1) {\n          history.indexs.push(indexs[index]);\n          result.push(data[index]);\n        }\n      }\n\n      return result;\n    }\n    /**\r\n     * 将内容进行分词\r\n     * @param\t{string}\t\t  words        目标字符串\r\n     * @param   {Object}          dict         字典\r\n     * @return\t{string}\r\n     */\n\n  }], [{\n    key: \"participle\",\n    value: function participle(words, dict) {\n      var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n      words = words.replace(/\\s/g, '');\n      var result = \"\".concat(prefix).concat(words);\n      var keywords = [[], []];\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = words[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var char = _step3.value;\n          var pinyin = dict[char];\n\n          if (pinyin) {\n            keywords[0].push(pinyin);\n\n            if (words.length > 1) {\n              keywords[1].push(pinyin.map(function (p) {\n                return p.charAt(0);\n              }));\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      for (var _i = 0, _keywords = keywords; _i < _keywords.length; _i++) {\n        var list = _keywords[_i];\n        var current = list.shift();\n\n        while (list.length) {\n          var array = [];\n          var next = list.shift();\n          var _iteratorNormalCompletion4 = true;\n          var _didIteratorError4 = false;\n          var _iteratorError4 = undefined;\n\n          try {\n            for (var _iterator4 = current[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n              var c = _step4.value;\n              var _iteratorNormalCompletion5 = true;\n              var _didIteratorError5 = false;\n              var _iteratorError5 = undefined;\n\n              try {\n                for (var _iterator5 = next[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n                  var n = _step5.value;\n                  array.push(c + n);\n                }\n              } catch (err) {\n                _didIteratorError5 = true;\n                _iteratorError5 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n                    _iterator5.return();\n                  }\n                } finally {\n                  if (_didIteratorError5) {\n                    throw _iteratorError5;\n                  }\n                }\n              }\n            }\n          } catch (err) {\n            _didIteratorError4 = true;\n            _iteratorError4 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n                _iterator4.return();\n              }\n            } finally {\n              if (_didIteratorError4) {\n                throw _iteratorError4;\n              }\n            }\n          }\n\n          current = array;\n        }\n\n        if (current) {\n          result += \"\\x01\".concat(prefix).concat(current.join(\"\\x01\".concat(prefix)));\n        }\n      }\n\n      return result;\n    }\n  }]);\n\n  return Engine;\n}();\n\nmodule.exports = Engine;","map":null,"metadata":{},"sourceType":"script"}