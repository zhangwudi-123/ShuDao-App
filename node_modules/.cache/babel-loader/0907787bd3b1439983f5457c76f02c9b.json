{"ast":null,"code":"import PropTypes from 'prop-types';\nexport default ((component, props) => {\n  const propType = type => {\n    if (type === String) return PropTypes.string;\n    if (type === Boolean) return PropTypes.bool;\n    if (type === Function) return PropTypes.func;\n    if (type === Number) return PropTypes.number;\n    if (type === Object) return PropTypes.object;\n    if (type === Array) return PropTypes.array;\n    if (type === Symbol) return PropTypes.symbol;\n    if (type.constructor === Function || type === Date) return PropTypes.instanceOf(type);\n    return PropTypes.any;\n  };\n\n  component.propTypes = {};\n  Object.keys(props).forEach(propName => {\n    const prop = props[propName];\n    const required = typeof prop.required !== 'undefined';\n    const type = prop.type || prop;\n\n    if (Array.isArray(type)) {\n      if (required) {\n        component.propTypes[propName] = PropTypes.oneOfType(type.map(propType)).required;\n      } else {\n        component.propTypes[propName] = PropTypes.oneOfType(type.map(propType));\n      }\n    } else if (required) {\n      component.propTypes[propName] = propType(type).required;\n    } else {\n      component.propTypes[propName] = propType(type);\n    }\n\n    if (typeof prop.default !== 'undefined' || 'default' in prop && prop.default === undefined) {\n      const hasFunctionType = prop.type === Function || Array.isArray(prop.type) && prop.type.indexOf(Function) >= 0;\n      if (!component.defaultProps) component.defaultProps = {};\n\n      if (typeof prop.default === 'function' && !hasFunctionType) {\n        component.defaultProps[propName] = prop.default();\n      } else {\n        component.defaultProps[propName] = prop.default;\n      }\n    }\n  });\n});","map":null,"metadata":{},"sourceType":"module"}