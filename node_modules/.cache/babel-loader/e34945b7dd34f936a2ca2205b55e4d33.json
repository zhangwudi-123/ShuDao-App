{"ast":null,"code":"import React, { useRef } from 'react';\nimport classNames from 'classnames';\nimport { useSpring, animated } from '@react-spring/web';\nimport { withNativeProps } from '../../utils/native-props';\nimport { usePropsValue } from '../../utils/use-props-value';\nimport { bound } from '../../utils/bound';\nimport { useThrottleFn, useIsomorphicLayoutEffect } from 'ahooks';\nimport { useMutationEffect } from '../../utils/use-mutation-effect';\nimport { useResizeEffect } from '../../utils/use-resize-effect';\nimport { mergeProps } from '../../utils/with-default-props';\nimport { useIsomorphicUpdateLayoutEffect } from '../../utils/use-isomorphic-update-layout-effect';\nimport { ShouldRender } from '../../utils/should-render';\nimport { traverseReactNode } from '../../utils/traverse-react-node';\nconst classPrefix = `adm-tabs`;\nexport const Tab = () => {\n  return null;\n};\nconst defaultProps = {\n  activeLineMode: 'auto',\n  stretch: true\n};\nexport const Tabs = p => {\n  var _a;\n\n  const props = mergeProps(defaultProps, p);\n  const tabListContainerRef = useRef(null);\n  const activeLineRef = useRef(null);\n  const keyToIndexRecord = {};\n  let firstActiveKey = null;\n  const panes = [];\n  traverseReactNode(props.children, (child, index) => {\n    if (!React.isValidElement(child)) return;\n    const key = child.key;\n    if (typeof key !== 'string') return;\n\n    if (index === 0) {\n      firstActiveKey = key;\n    }\n\n    const length = panes.push(child);\n    keyToIndexRecord[key] = length - 1;\n  });\n  const [activeKey, setActiveKey] = usePropsValue({\n    value: props.activeKey,\n    defaultValue: (_a = props.defaultActiveKey) !== null && _a !== void 0 ? _a : firstActiveKey,\n    onChange: v => {\n      var _a;\n\n      if (v === null) return;\n      (_a = props.onChange) === null || _a === void 0 ? void 0 : _a.call(props, v);\n    }\n  });\n  const [{\n    x,\n    width\n  }, api] = useSpring(() => ({\n    x: 0,\n    width: 0,\n    config: {\n      tension: 300,\n      clamp: true\n    }\n  }));\n  const [{\n    scrollLeft\n  }, scrollApi] = useSpring(() => ({\n    scrollLeft: 0,\n    config: {\n      tension: 300,\n      clamp: true\n    }\n  }));\n  const [{\n    leftMaskOpacity,\n    rightMaskOpacity\n  }, maskApi] = useSpring(() => ({\n    leftMaskOpacity: 0,\n    rightMaskOpacity: 0,\n    config: {\n      clamp: true\n    }\n  }));\n\n  function animate() {\n    let immediate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const container = tabListContainerRef.current;\n    if (!container) return;\n    const activeIndex = keyToIndexRecord[activeKey];\n\n    if (activeIndex === undefined) {\n      api.start({\n        x: 0,\n        width: 0,\n        immediate: true\n      });\n      return;\n    }\n\n    const activeLine = activeLineRef.current;\n    if (!activeLine) return;\n    const activeTabWrapper = container.children.item(activeIndex + 1);\n    const activeTab = activeTabWrapper.children.item(0);\n    const activeTabLeft = activeTab.offsetLeft;\n    const activeTabWidth = activeTab.offsetWidth;\n    const activeTabWrapperLeft = activeTabWrapper.offsetLeft;\n    const activeTabWrapperWidth = activeTabWrapper.offsetWidth;\n    const containerWidth = container.offsetWidth;\n    const containerScrollWidth = container.scrollWidth;\n    const containerScrollLeft = container.scrollLeft;\n    const activeLineWidth = activeLine.offsetWidth;\n    let x = 0;\n    let width = 0;\n\n    if (props.activeLineMode === 'auto') {\n      x = activeTabLeft;\n      width = activeTabWidth;\n    } else if (props.activeLineMode === 'full') {\n      x = activeTabWrapperLeft;\n      width = activeTabWrapperWidth;\n    } else {\n      x = activeTabLeft + (activeTabWidth - activeLineWidth) / 2;\n    }\n\n    api.start({\n      x,\n      width,\n      immediate\n    });\n    const maxScrollDistance = containerScrollWidth - containerWidth;\n    if (maxScrollDistance <= 0) return;\n    const nextScrollLeft = bound(activeTabLeft - (containerWidth - activeTabWidth) / 2, 0, containerScrollWidth - containerWidth);\n    scrollApi.start({\n      scrollLeft: nextScrollLeft,\n      from: {\n        scrollLeft: containerScrollLeft\n      },\n      immediate\n    });\n  }\n\n  useIsomorphicLayoutEffect(() => {\n    animate(!x.isAnimating);\n  }, []);\n  useIsomorphicUpdateLayoutEffect(() => {\n    animate();\n  }, [activeKey]);\n  useResizeEffect(() => {\n    animate(!x.isAnimating);\n  }, tabListContainerRef);\n  useMutationEffect(() => {\n    animate(!x.isAnimating);\n  }, tabListContainerRef, {\n    subtree: true,\n    childList: true,\n    characterData: true\n  });\n  const {\n    run: updateMask\n  } = useThrottleFn(function () {\n    let immediate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const container = tabListContainerRef.current;\n    if (!container) return;\n    const scrollLeft = container.scrollLeft;\n    const showLeftMask = scrollLeft > 0;\n    const showRightMask = scrollLeft + container.offsetWidth < container.scrollWidth;\n    maskApi.start({\n      leftMaskOpacity: showLeftMask ? 1 : 0,\n      rightMaskOpacity: showRightMask ? 1 : 0,\n      immediate\n    });\n  }, {\n    wait: 100,\n    trailing: true,\n    leading: true\n  });\n  useIsomorphicLayoutEffect(() => {\n    updateMask(true);\n  }, []);\n  return withNativeProps(props, React.createElement(\"div\", {\n    className: classPrefix\n  }, React.createElement(\"div\", {\n    className: `${classPrefix}-header`\n  }, React.createElement(animated.div, {\n    className: classNames(`${classPrefix}-header-mask`, `${classPrefix}-header-mask-left`),\n    style: {\n      opacity: leftMaskOpacity\n    }\n  }), React.createElement(animated.div, {\n    className: classNames(`${classPrefix}-header-mask`, `${classPrefix}-header-mask-right`),\n    style: {\n      opacity: rightMaskOpacity\n    }\n  }), React.createElement(animated.div, {\n    className: `${classPrefix}-tab-list`,\n    ref: tabListContainerRef,\n    scrollLeft: scrollLeft,\n    onScroll: updateMask,\n    role: 'tablist'\n  }, React.createElement(animated.div, {\n    ref: activeLineRef,\n    className: `${classPrefix}-tab-line`,\n    style: {\n      width: props.activeLineMode === 'fixed' ? 'var(--fixed-active-line-width, 30px)' : width,\n      x\n    }\n  }), panes.map(pane => withNativeProps(pane.props, React.createElement(\"div\", {\n    key: pane.key,\n    className: classNames(`${classPrefix}-tab-wrapper`, {\n      [`${classPrefix}-tab-wrapper-stretch`]: props.stretch\n    })\n  }, React.createElement(\"div\", {\n    onClick: () => {\n      const {\n        key\n      } = pane;\n      if (pane.props.disabled) return;\n\n      if (key === undefined || key === null) {\n        return;\n      }\n\n      setActiveKey(key.toString());\n    },\n    className: classNames(`${classPrefix}-tab`, {\n      [`${classPrefix}-tab-active`]: pane.key === activeKey,\n      [`${classPrefix}-tab-disabled`]: pane.props.disabled\n    }),\n    role: 'tab',\n    \"aria-selected\": pane.key === activeKey\n  }, pane.props.title)))))), panes.map(pane => {\n    if (pane.props.children === undefined) {\n      return null;\n    }\n\n    const active = pane.key === activeKey;\n    return React.createElement(ShouldRender, {\n      key: pane.key,\n      active: active,\n      forceRender: pane.props.forceRender,\n      destroyOnClose: pane.props.destroyOnClose\n    }, React.createElement(\"div\", {\n      className: `${classPrefix}-content`,\n      style: {\n        display: active ? 'block' : 'none'\n      }\n    }, pane.props.children));\n  })));\n};","map":null,"metadata":{},"sourceType":"module"}