{"ast":null,"code":"import React, { useContext } from 'react';\nimport { withNativeProps } from '../../utils/native-props';\nimport classNames from 'classnames';\nimport { RadioGroupContext } from './group-context';\nimport { usePropsValue } from '../../utils/use-props-value';\nimport { mergeProps } from '../../utils/with-default-props';\nimport { CheckIcon } from '../checkbox/check-icon';\nimport { devWarning } from '../../utils/dev-log';\nimport { isDev } from '../../utils/is-dev';\nimport { NativeInput } from '../checkbox/native-input';\nconst classPrefix = `adm-radio`;\nconst defaultProps = {\n  defaultChecked: false\n};\nexport const Radio = p => {\n  const props = mergeProps(defaultProps, p);\n  const groupContext = useContext(RadioGroupContext);\n  let [checked, setChecked] = usePropsValue({\n    value: props.checked,\n    defaultValue: props.defaultChecked,\n    onChange: props.onChange\n  });\n  let disabled = props.disabled;\n  const {\n    value\n  } = props;\n\n  if (groupContext && value !== undefined) {\n    if (isDev) {\n      if (p.checked !== undefined) {\n        devWarning('Radio', 'When used within `Radio.Group`, the `checked` prop of `Radio` will not work.');\n      }\n\n      if (p.defaultChecked !== undefined) {\n        devWarning('Radio', 'When used within `Radio.Group`, the `defaultChecked` prop of `Radio` will not work.');\n      }\n    }\n\n    checked = groupContext.value.includes(value);\n\n    setChecked = innerChecked => {\n      var _a;\n\n      if (innerChecked) {\n        groupContext.check(value);\n      } else {\n        groupContext.uncheck(value);\n      }\n\n      (_a = props.onChange) === null || _a === void 0 ? void 0 : _a.call(props, innerChecked);\n    };\n\n    disabled = disabled || groupContext.disabled;\n  }\n\n  const renderIcon = () => {\n    if (props.icon) {\n      return React.createElement(\"div\", {\n        className: `${classPrefix}-custom-icon`\n      }, props.icon(checked));\n    }\n\n    return React.createElement(\"div\", {\n      className: `${classPrefix}-icon`\n    }, checked && React.createElement(CheckIcon, null));\n  };\n\n  return withNativeProps(props, React.createElement(\"label\", {\n    className: classNames(classPrefix, {\n      [`${classPrefix}-checked`]: checked,\n      [`${classPrefix}-disabled`]: disabled,\n      [`${classPrefix}-block`]: props.block\n    })\n  }, React.createElement(NativeInput, {\n    type: 'radio',\n    checked: checked,\n    onChange: setChecked,\n    disabled: disabled,\n    id: props.id\n  }), renderIcon(), props.children && React.createElement(\"div\", {\n    className: `${classPrefix}-content`\n  }, props.children)));\n};","map":null,"metadata":{},"sourceType":"module"}