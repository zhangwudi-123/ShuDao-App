{"ast":null,"code":"import $ from 'dom7';\nimport Utils from '../../utils/utils';\nimport Support from '../../utils/support';\nimport Modal from '../modal/modal-class';\n\nclass Sheet extends Modal {\n  constructor(app, params) {\n    const extendedParams = Utils.extend({\n      on: {}\n    }, app.params.sheet, params); // Extends with open/close Modal methods;\n\n    super(app, extendedParams);\n    const sheet = this;\n    sheet.params = extendedParams;\n\n    if (typeof sheet.params.backdrop === 'undefined') {\n      sheet.params.backdrop = app.theme !== 'ios';\n    } // Find Element\n\n\n    let $el;\n\n    if (!sheet.params.el) {\n      $el = $(sheet.params.content).filter((elIndex, node) => node.nodeType === 1).eq(0);\n    } else {\n      $el = $(sheet.params.el).eq(0);\n    }\n\n    if ($el && $el.length > 0 && $el[0].f7Modal) {\n      return $el[0].f7Modal;\n    }\n\n    if ($el.length === 0) {\n      return sheet.destroy();\n    }\n\n    let $backdropEl;\n\n    if (sheet.params.backdrop && sheet.params.backdropEl) {\n      $backdropEl = $(sheet.params.backdropEl);\n    } else if (sheet.params.backdrop) {\n      $backdropEl = app.root.children('.sheet-backdrop');\n\n      if ($backdropEl.length === 0) {\n        $backdropEl = $('<div class=\"sheet-backdrop\"></div>');\n        app.root.append($backdropEl);\n      }\n    }\n\n    Utils.extend(sheet, {\n      app,\n      push: $el.hasClass('sheet-modal-push') || sheet.params.push,\n      $el,\n      el: $el[0],\n      $backdropEl,\n      backdropEl: $backdropEl && $backdropEl[0],\n      type: 'sheet',\n      $htmlEl: $('html')\n    });\n\n    if (sheet.params.push) {\n      $el.addClass('sheet-modal-push');\n    }\n\n    let $pageContentEl;\n\n    function scrollToElementOnOpen() {\n      const $scrollEl = $(sheet.params.scrollToEl).eq(0);\n      if ($scrollEl.length === 0) return;\n      $pageContentEl = $scrollEl.parents('.page-content');\n      if ($pageContentEl.length === 0) return;\n      const paddingTop = parseInt($pageContentEl.css('padding-top'), 10);\n      const paddingBottom = parseInt($pageContentEl.css('padding-bottom'), 10);\n      const pageHeight = $pageContentEl[0].offsetHeight - paddingTop - $el.height();\n      const pageScrollHeight = $pageContentEl[0].scrollHeight - paddingTop - $el.height();\n      const pageScroll = $pageContentEl.scrollTop();\n      let newPaddingBottom;\n      const scrollElTop = $scrollEl.offset().top - paddingTop + $scrollEl[0].offsetHeight;\n\n      if (scrollElTop > pageHeight) {\n        const scrollTop = pageScroll + scrollElTop - pageHeight;\n\n        if (scrollTop + pageHeight > pageScrollHeight) {\n          newPaddingBottom = scrollTop + pageHeight - pageScrollHeight + paddingBottom;\n\n          if (pageHeight === pageScrollHeight) {\n            newPaddingBottom = $el.height();\n          }\n\n          $pageContentEl.css({\n            'padding-bottom': `${newPaddingBottom}px`\n          });\n        }\n\n        $pageContentEl.scrollTop(scrollTop, 300);\n      }\n    }\n\n    function scrollToElementOnClose() {\n      if ($pageContentEl && $pageContentEl.length > 0) {\n        $pageContentEl.css({\n          'padding-bottom': ''\n        });\n      }\n    }\n\n    function handleClick(e) {\n      const target = e.target;\n      const $target = $(target);\n      const keyboardOpened = !app.device.desktop && app.device.cordova && (window.Keyboard && window.Keyboard.isVisible || window.cordova.plugins && window.cordova.plugins.Keyboard && window.cordova.plugins.Keyboard.isVisible);\n      if (keyboardOpened) return;\n\n      if ($target.closest(sheet.el).length === 0) {\n        if (sheet.params.closeByBackdropClick && sheet.params.backdrop && sheet.backdropEl && sheet.backdropEl === target) {\n          sheet.close();\n        } else if (sheet.params.closeByOutsideClick) {\n          sheet.close();\n        }\n      }\n    }\n\n    function onKeyDown(e) {\n      const keyCode = e.keyCode;\n\n      if (keyCode === 27 && sheet.params.closeOnEscape) {\n        sheet.close();\n      }\n    }\n\n    let pushOffset;\n\n    function pushViewScale(offset) {\n      return (app.height - offset * 2) / app.height;\n    }\n\n    let isTouched = false;\n    let startTouch;\n    let currentTouch;\n    let isScrolling;\n    let touchStartTime;\n    let touchesDiff;\n    let isMoved = false;\n    let isTopSheetModal;\n    let swipeStepTranslate;\n    let startTranslate;\n    let currentTranslate;\n    let sheetElOffsetHeight;\n    let minTranslate;\n    let maxTranslate;\n    let $pushViewEl;\n    let pushBorderRadius;\n    let sheetPageContentEl;\n    let sheetPageContentScrollTop;\n    let sheetPageContentScrollHeight;\n    let sheetPageContentOffsetHeight;\n\n    function handleTouchStart(e) {\n      if (isTouched || !(sheet.params.swipeToClose || sheet.params.swipeToStep)) return;\n\n      if (sheet.params.swipeHandler && $(e.target).closest(sheet.params.swipeHandler).length === 0) {\n        return;\n      }\n\n      isTouched = true;\n      isMoved = false;\n      startTouch = {\n        x: e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX,\n        y: e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY\n      };\n      touchStartTime = Utils.now();\n      isScrolling = undefined;\n      isTopSheetModal = $el.hasClass('sheet-modal-top');\n\n      if (!sheet.params.swipeHandler && e.type === 'touchstart') {\n        sheetPageContentEl = $(e.target).closest('.page-content')[0];\n      }\n    }\n\n    function handleTouchMove(e) {\n      if (!isTouched) return;\n      currentTouch = {\n        x: e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX,\n        y: e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY\n      };\n\n      if (typeof isScrolling === 'undefined') {\n        isScrolling = !!(isScrolling || Math.abs(currentTouch.x - startTouch.x) > Math.abs(currentTouch.y - startTouch.y));\n      }\n\n      if (isScrolling) {\n        isTouched = false;\n        isMoved = false;\n        return;\n      }\n\n      touchesDiff = startTouch.y - currentTouch.y;\n      const direction = touchesDiff < 0 ? 'to-bottom' : 'to-top';\n\n      if (!isMoved) {\n        if (sheetPageContentEl && !$el.hasClass('modal-in-swipe-step')) {\n          sheetPageContentScrollTop = sheetPageContentEl.scrollTop;\n          sheetPageContentScrollHeight = sheetPageContentEl.scrollHeight;\n          sheetPageContentOffsetHeight = sheetPageContentEl.offsetHeight;\n\n          if (!(sheetPageContentScrollHeight === sheetPageContentOffsetHeight) && !(direction === 'to-bottom' && sheetPageContentScrollTop === 0) && !(direction === 'to-top' && sheetPageContentScrollTop === sheetPageContentScrollHeight - sheetPageContentOffsetHeight)) {\n            $el.transform('');\n            isTouched = false;\n            isMoved = false;\n            return;\n          }\n        }\n\n        if (sheet.push && pushOffset) {\n          $pushViewEl = app.root.children('.view, .views');\n        }\n\n        sheetElOffsetHeight = $el[0].offsetHeight;\n        startTranslate = Utils.getTranslate($el[0], 'y');\n\n        if (isTopSheetModal) {\n          minTranslate = sheet.params.swipeToClose ? -sheetElOffsetHeight : -swipeStepTranslate;\n          maxTranslate = 0;\n        } else {\n          minTranslate = 0;\n          maxTranslate = sheet.params.swipeToClose ? sheetElOffsetHeight : swipeStepTranslate;\n        }\n\n        isMoved = true;\n      }\n\n      currentTranslate = startTranslate - touchesDiff;\n      currentTranslate = Math.min(Math.max(currentTranslate, minTranslate), maxTranslate);\n      e.preventDefault();\n\n      if (sheet.push && pushOffset) {\n        let progress = (currentTranslate - startTranslate) / sheetElOffsetHeight;\n\n        if (sheet.params.swipeToStep) {\n          if (isTopSheetModal) {\n            progress = currentTranslate / swipeStepTranslate;\n          } else {\n            progress = 1 - (swipeStepTranslate - currentTranslate) / swipeStepTranslate;\n          }\n        }\n\n        progress = Math.abs(progress);\n        progress = Math.min(Math.max(progress, 0), 1);\n        const pushProgress = 1 - progress;\n        const scale = 1 - (1 - pushViewScale(pushOffset)) * pushProgress;\n        $pushViewEl.transition(0).transform(`translate3d(0,0,0) scale(${scale})`);\n\n        if (sheet.params.swipeToStep) {\n          $pushViewEl.css('border-radius', `${pushBorderRadius * pushProgress}px`);\n        }\n      }\n\n      $el.transition(0).transform(`translate3d(0,${currentTranslate}px,0)`);\n\n      if (sheet.params.swipeToStep) {\n        let progress;\n\n        if (isTopSheetModal) {\n          progress = 1 - currentTranslate / swipeStepTranslate;\n        } else {\n          progress = (swipeStepTranslate - currentTranslate) / swipeStepTranslate;\n        }\n\n        progress = Math.min(Math.max(progress, 0), 1);\n        $el.trigger('sheet:stepprogress', progress);\n        sheet.emit('local::stepProgress sheetStepProgress', sheet, progress);\n      }\n    }\n\n    function handleTouchEnd() {\n      isTouched = false;\n\n      if (!isMoved) {\n        return;\n      }\n\n      isMoved = false;\n      $el.transform('').transition('');\n\n      if (sheet.push && pushOffset) {\n        $pushViewEl.transition('').transform('');\n        $pushViewEl.css('border-radius', '');\n      }\n\n      const direction = touchesDiff < 0 ? 'to-bottom' : 'to-top';\n      const diff = Math.abs(touchesDiff);\n      if (diff === 0 || currentTranslate === startTranslate) return;\n      const timeDiff = new Date().getTime() - touchStartTime;\n\n      if (!sheet.params.swipeToStep) {\n        if (direction !== (isTopSheetModal ? 'to-top' : 'to-bottom')) {\n          return;\n        }\n\n        if (timeDiff < 300 && diff > 20 || timeDiff >= 300 && diff > sheetElOffsetHeight / 2) {\n          sheet.close();\n        }\n\n        return;\n      }\n\n      const openDirection = isTopSheetModal ? 'to-bottom' : 'to-top';\n      const closeDirection = isTopSheetModal ? 'to-top' : 'to-bottom';\n      const absCurrentTranslate = Math.abs(currentTranslate);\n      const absSwipeStepTranslate = Math.abs(swipeStepTranslate);\n\n      if (timeDiff < 300 && diff > 10) {\n        if (direction === openDirection && absCurrentTranslate < absSwipeStepTranslate) {\n          // open step\n          $el.removeClass('modal-in-swipe-step');\n          $el.trigger('sheet:stepprogress', 1);\n          sheet.emit('local::stepProgress sheetStepProgress', sheet, 1);\n          $el.trigger('sheet:stepopen');\n          sheet.emit('local::stepOpen sheetStepOpen', sheet);\n\n          if (sheet.push && pushOffset) {\n            sheet.$htmlEl[0].style.setProperty('--f7-sheet-push-scale', pushViewScale(pushOffset));\n            $pushViewEl.css('border-radius', '');\n          }\n        }\n\n        if (direction === closeDirection && absCurrentTranslate > absSwipeStepTranslate) {\n          // close sheet\n          if (sheet.params.swipeToClose) {\n            sheet.close();\n          } else {\n            // close step\n            $el.addClass('modal-in-swipe-step');\n            $el.trigger('sheet:stepprogress', 0);\n            sheet.emit('local::stepProgress sheetStepProgress', sheet, 0);\n            $el.trigger('sheet:stepclose');\n            sheet.emit('local::stepClose sheetStepClose', sheet);\n\n            if (sheet.push && pushOffset) {\n              sheet.$htmlEl[0].style.removeProperty('--f7-sheet-push-scale');\n              $pushViewEl.css('border-radius', '0px');\n            }\n          }\n        }\n\n        if (direction === closeDirection && absCurrentTranslate <= absSwipeStepTranslate) {\n          // close step\n          $el.addClass('modal-in-swipe-step');\n          $el.trigger('sheet:stepprogress', 0);\n          sheet.emit('local::stepProgress sheetStepProgress', sheet, 0);\n          $el.trigger('sheet:stepclose');\n          sheet.emit('local::stepClose sheetStepClose', sheet);\n\n          if (sheet.push && pushOffset) {\n            sheet.$htmlEl[0].style.removeProperty('--f7-sheet-push-scale');\n            $pushViewEl.css('border-radius', '0px');\n          }\n        }\n\n        return;\n      }\n\n      if (timeDiff >= 300) {\n        const stepOpened = !$el.hasClass('modal-in-swipe-step');\n\n        if (!stepOpened) {\n          if (absCurrentTranslate < absSwipeStepTranslate / 2) {\n            // open step\n            $el.removeClass('modal-in-swipe-step');\n            $el.trigger('sheet:stepprogress', 1);\n            sheet.emit('local::stepProgress sheetStepProgress', sheet, 1);\n            $el.trigger('sheet:stepopen');\n            sheet.emit('local::stepOpen sheetStepOpen', sheet);\n\n            if (sheet.push && pushOffset) {\n              sheet.$htmlEl[0].style.setProperty('--f7-sheet-push-scale', pushViewScale(pushOffset));\n              $pushViewEl.css('border-radius', '');\n            }\n          } else if (absCurrentTranslate - absSwipeStepTranslate > (sheetElOffsetHeight - absSwipeStepTranslate) / 2) {\n            // close sheet\n            if (sheet.params.swipeToClose) sheet.close();\n          }\n        } else if (stepOpened) {\n          if (absCurrentTranslate > absSwipeStepTranslate + (sheetElOffsetHeight - absSwipeStepTranslate) / 2) {\n            // close sheet\n            if (sheet.params.swipeToClose) sheet.close();\n          } else if (absCurrentTranslate > absSwipeStepTranslate / 2) {\n            // close step\n            $el.addClass('modal-in-swipe-step');\n            $el.trigger('sheet:stepprogress', 0);\n            sheet.emit('local::stepProgress sheetStepProgress', sheet, 0);\n            $el.trigger('sheet:stepclose');\n            sheet.emit('local::stepClose sheetStepClose', sheet);\n\n            if (sheet.push && pushOffset) {\n              sheet.$htmlEl[0].style.removeProperty('--f7-sheet-push-scale');\n              $pushViewEl.css('border-radius', '0px');\n            }\n          }\n        }\n      }\n    }\n\n    function setSwipeStep(byResize) {\n      const $swipeStepEl = $el.find('.sheet-modal-swipe-step').eq(0);\n      if (!$swipeStepEl.length) return;\n\n      if ($el.hasClass('sheet-modal-top')) {\n        swipeStepTranslate = -($swipeStepEl.offset().top - $el.offset().top + $swipeStepEl[0].offsetHeight);\n      } else {\n        swipeStepTranslate = $el[0].offsetHeight - ($swipeStepEl.offset().top - $el.offset().top + $swipeStepEl[0].offsetHeight);\n      }\n\n      $el[0].style.setProperty('--f7-sheet-swipe-step', `${swipeStepTranslate}px`);\n\n      if (!byResize) {\n        $el.addClass('modal-in-swipe-step');\n      }\n    }\n\n    function onResize() {\n      setSwipeStep(true);\n    }\n\n    const passive = Support.passiveListener ? {\n      passive: true\n    } : false;\n\n    if (sheet.params.swipeToClose || sheet.params.swipeToStep) {\n      $el.on(app.touchEvents.start, handleTouchStart, passive);\n      app.on('touchmove', handleTouchMove);\n      app.on('touchend:passive', handleTouchEnd);\n      sheet.once('sheetDestroy', () => {\n        $el.off(app.touchEvents.start, handleTouchStart, passive);\n        app.off('touchmove', handleTouchMove);\n        app.off('touchend:passive', handleTouchEnd);\n      });\n    }\n\n    sheet.on('open', () => {\n      if (sheet.params.closeOnEscape) {\n        $(document).on('keydown', onKeyDown);\n      }\n\n      if (sheet.params.swipeToStep) {\n        setSwipeStep();\n        app.on('resize', onResize);\n      }\n\n      if (sheet.params.scrollToEl) {\n        scrollToElementOnOpen();\n      }\n\n      if (sheet.push) {\n        pushOffset = parseInt($el.css('--f7-sheet-push-offset'), 10);\n        if (Number.isNaN(pushOffset)) pushOffset = 0;\n\n        if (pushOffset) {\n          $el.addClass('sheet-modal-push');\n          sheet.$htmlEl.addClass('with-modal-sheet-push');\n\n          if (!sheet.params.swipeToStep) {\n            sheet.$htmlEl[0].style.setProperty('--f7-sheet-push-scale', pushViewScale(pushOffset));\n          } else {\n            $pushViewEl = app.root.children('.view, .views');\n            pushBorderRadius = parseFloat($el.css(`border-${isTopSheetModal ? 'bottom' : 'top'}-left-radius`));\n            $pushViewEl.css('border-radius', '0px');\n          }\n        }\n      }\n    });\n    sheet.on('opened', () => {\n      if (sheet.params.closeByOutsideClick || sheet.params.closeByBackdropClick) {\n        app.on('click', handleClick);\n      }\n    });\n    sheet.on('close', () => {\n      if (sheet.params.swipeToStep) {\n        $el.removeClass('modal-in-swipe-step');\n        app.off('resize', onResize);\n      }\n\n      if (sheet.params.closeOnEscape) {\n        $(document).off('keydown', onKeyDown);\n      }\n\n      if (sheet.params.scrollToEl) {\n        scrollToElementOnClose();\n      }\n\n      if (sheet.params.closeByOutsideClick || sheet.params.closeByBackdropClick) {\n        app.off('click', handleClick);\n      }\n\n      if (sheet.push && pushOffset) {\n        sheet.$htmlEl.removeClass('with-modal-sheet-push');\n        sheet.$htmlEl.addClass('with-modal-sheet-push-closing');\n      }\n    });\n    sheet.on('closed', () => {\n      if (sheet.push && pushOffset) {\n        sheet.$htmlEl.removeClass('with-modal-sheet-push-closing');\n        sheet.$htmlEl[0].style.removeProperty('--f7-sheet-push-scale');\n      }\n    });\n\n    sheet.stepOpen = function stepOpen() {\n      $el.removeClass('modal-in-swipe-step');\n\n      if (sheet.push) {\n        if (!pushOffset) {\n          pushOffset = parseInt($el.css('--f7-sheet-push-offset'), 10);\n          if (Number.isNaN(pushOffset)) pushOffset = 0;\n        }\n\n        if (pushOffset) {\n          sheet.$htmlEl[0].style.setProperty('--f7-sheet-push-scale', pushViewScale(pushOffset));\n        }\n      }\n    };\n\n    sheet.stepClose = function stepClose() {\n      $el.addClass('modal-in-swipe-step');\n\n      if (sheet.push) {\n        sheet.$htmlEl[0].style.removeProperty('--f7-sheet-push-scale');\n      }\n    };\n\n    sheet.stepToggle = function stepToggle() {\n      $el.toggleClass('modal-in-swipe-step');\n    };\n\n    $el[0].f7Modal = sheet;\n    return sheet;\n  }\n\n}\n\nexport default Sheet;","map":null,"metadata":{},"sourceType":"module"}