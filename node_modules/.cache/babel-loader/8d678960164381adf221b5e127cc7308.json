{"ast":null,"code":"import React, { useContext } from 'react';\nimport List from '../list';\nimport { withNativeProps } from '../../utils/native-props';\nimport { CheckListContext } from './context';\nimport { devWarning } from '../../utils/dev-log';\nimport classNames from 'classnames';\nconst classPrefix = `adm-check-list-item`;\nexport const CheckListItem = props => {\n  const context = useContext(CheckListContext);\n\n  if (context === null) {\n    devWarning('CheckList.Item', 'CheckList.Item can only be used inside CheckList.');\n    return null;\n  }\n\n  const active = context.value.includes(props.value);\n  const readOnly = props.readOnly || context.readOnly;\n  const defaultExtra = active ? context.activeIcon : null;\n  const renderExtra = context.extra ? context.extra(active) : defaultExtra;\n  const extra = React.createElement(\"div\", {\n    className: `${classPrefix}-extra`\n  }, renderExtra);\n  return withNativeProps(props, React.createElement(List.Item, {\n    title: props.title,\n    className: classNames(classPrefix, readOnly && `${classPrefix}-readonly`, active && `${classPrefix}-active`),\n    description: props.description,\n    prefix: props.prefix,\n    onClick: e => {\n      var _a;\n\n      if (readOnly) return;\n\n      if (active) {\n        context.uncheck(props.value);\n      } else {\n        context.check(props.value);\n      }\n\n      (_a = props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);\n    },\n    arrow: false,\n    clickable: !readOnly,\n    extra: extra,\n    disabled: props.disabled || context.disabled\n  }, props.children));\n};","map":null,"metadata":{},"sourceType":"module"}