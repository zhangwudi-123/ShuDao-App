{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { withNativeProps } from '../../utils/native-props';\nimport { usePropsValue } from '../../utils/use-props-value';\nimport { mergeProps } from '../../utils/with-default-props';\nimport { SpinIcon } from './spin-icon';\nimport { useConfig } from '../config-provider';\nimport { isPromise } from '../../utils/validate';\nconst classPrefix = `adm-switch`;\nconst defaultProps = {\n  defaultChecked: false\n};\nexport const Switch = p => {\n  const props = mergeProps(defaultProps, p);\n  const disabled = props.disabled || props.loading || false;\n  const [changing, setChanging] = useState(false);\n  const {\n    locale\n  } = useConfig();\n  const [checked, setChecked] = usePropsValue({\n    value: props.checked,\n    defaultValue: props.defaultChecked,\n    onChange: props.onChange\n  });\n\n  function onClick() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (disabled || props.loading || changing) {\n        return;\n      }\n\n      const nextChecked = !checked;\n\n      if (props.beforeChange) {\n        setChanging(true);\n\n        try {\n          yield props.beforeChange(nextChecked);\n          setChanging(false);\n        } catch (e) {\n          setChanging(false);\n          throw e;\n        }\n      }\n\n      const result = setChecked(nextChecked);\n\n      if (isPromise(result)) {\n        setChanging(true);\n\n        try {\n          yield result;\n          setChanging(false);\n        } catch (e) {\n          setChanging(false);\n          throw e;\n        }\n      }\n    });\n  }\n\n  return withNativeProps(props, React.createElement(\"div\", {\n    onClick: onClick,\n    className: classNames(classPrefix, {\n      [`${classPrefix}-checked`]: checked,\n      [`${classPrefix}-disabled`]: disabled || changing\n    }),\n    role: 'switch',\n    \"aria-label\": locale.Switch.name,\n    \"aria-checked\": checked,\n    \"aria-disabled\": disabled\n  }, React.createElement(\"div\", {\n    className: `${classPrefix}-checkbox`\n  }, React.createElement(\"div\", {\n    className: `${classPrefix}-handle`\n  }, (props.loading || changing) && React.createElement(SpinIcon, {\n    className: `${classPrefix}-spin-icon`\n  })), React.createElement(\"div\", {\n    className: `${classPrefix}-inner`\n  }, checked ? props.checkedText : props.uncheckedText))));\n};","map":null,"metadata":{},"sourceType":"module"}