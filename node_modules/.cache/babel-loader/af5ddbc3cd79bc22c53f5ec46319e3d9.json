{"ast":null,"code":"import { useSpring } from '@react-spring/web';\nimport { useMutationEffect } from './use-mutation-effect';\nimport { bound } from './bound';\nimport { useIsomorphicLayoutEffect } from 'ahooks';\nimport { useIsomorphicUpdateLayoutEffect } from './use-isomorphic-update-layout-effect';\nexport const useTabListScroll = (targetRef, activeIndex) => {\n  const [{\n    scrollLeft\n  }, api] = useSpring(() => ({\n    scrollLeft: 0,\n    config: {\n      tension: 300,\n      clamp: true\n    }\n  }));\n\n  function animate() {\n    let immediate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const container = targetRef.current;\n    if (!container) return;\n    if (activeIndex === undefined) return;\n    const activeTabWrapper = container.children.item(activeIndex);\n    const activeTab = activeTabWrapper.children.item(0);\n    const activeTabLeft = activeTab.offsetLeft;\n    const activeTabWidth = activeTab.offsetWidth;\n    const containerWidth = container.offsetWidth;\n    const containerScrollWidth = container.scrollWidth;\n    const containerScrollLeft = container.scrollLeft;\n    const maxScrollDistance = containerScrollWidth - containerWidth;\n    if (maxScrollDistance <= 0) return;\n    const nextScrollLeft = bound(activeTabLeft - (containerWidth - activeTabWidth) / 2, 0, containerScrollWidth - containerWidth);\n    api.start({\n      scrollLeft: nextScrollLeft,\n      from: {\n        scrollLeft: containerScrollLeft\n      },\n      immediate: immediate && !scrollLeft.isAnimating\n    });\n  }\n\n  useIsomorphicLayoutEffect(() => {\n    animate(true);\n  }, []);\n  useIsomorphicUpdateLayoutEffect(() => {\n    animate();\n  }, [activeIndex]);\n  useMutationEffect(() => {\n    animate(true);\n  }, targetRef, {\n    subtree: true,\n    childList: true,\n    characterData: true\n  });\n  return {\n    scrollLeft,\n    animate\n  };\n};","map":null,"metadata":{},"sourceType":"module"}