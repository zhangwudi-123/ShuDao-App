{"ast":null,"code":"import React from 'react';\nimport classNames from 'classnames';\nimport Badge from '../badge';\nimport { withNativeProps } from '../../utils/native-props';\nimport { usePropsValue } from '../../utils/use-props-value';\nimport { Corner } from './corner';\nimport { traverseReactNode } from '../../utils/traverse-react-node';\nconst classPrefix = `adm-side-bar`;\n/* istanbul ignore next */\n\nexport const SideBarItem = () => {\n  return null;\n};\nexport const SideBar = props => {\n  var _a;\n\n  let firstActiveKey = null;\n  const items = [];\n  traverseReactNode(props.children, (child, index) => {\n    if (!React.isValidElement(child)) return;\n    const key = child.key;\n    if (typeof key !== 'string') return;\n\n    if (index === 0) {\n      firstActiveKey = key;\n    }\n\n    items.push(child);\n  });\n  const [activeKey, setActiveKey] = usePropsValue({\n    value: props.activeKey,\n    defaultValue: (_a = props.defaultActiveKey) !== null && _a !== void 0 ? _a : firstActiveKey,\n    onChange: v => {\n      var _a;\n\n      if (v === null) return;\n      (_a = props.onChange) === null || _a === void 0 ? void 0 : _a.call(props, v);\n    }\n  });\n  const lastItem = items[items.length - 1];\n  const isLastItemActive = lastItem && lastItem.key === activeKey;\n  return withNativeProps(props, React.createElement(\"div\", {\n    className: classPrefix\n  }, React.createElement(\"div\", {\n    className: `${classPrefix}-items`\n  }, items.map((item, index) => {\n    const active = item.key === activeKey;\n    const isActiveNextSibling = items[index - 1] && items[index - 1].key === activeKey;\n    const isActivePreviousSibling = items[index + 1] && items[index + 1].key === activeKey;\n    return withNativeProps(item.props, React.createElement(\"div\", {\n      key: item.key,\n      onClick: () => {\n        const {\n          key\n        } = item;\n        if (key === undefined || key === null || item.props.disabled) return;\n        setActiveKey(key.toString());\n      },\n      className: classNames(`${classPrefix}-item`, {\n        [`${classPrefix}-item-active`]: active,\n        [`${classPrefix}-item-disabled`]: item.props.disabled\n      })\n    }, React.createElement(React.Fragment, null, isActiveNextSibling && React.createElement(Corner, {\n      className: `${classPrefix}-item-corner ${classPrefix}-item-corner-top`\n    }), isActivePreviousSibling && React.createElement(Corner, {\n      className: `${classPrefix}-item-corner ${classPrefix}-item-corner-bottom`\n    })), React.createElement(Badge, {\n      content: item.props.badge,\n      className: `${classPrefix}-badge`\n    }, React.createElement(\"div\", {\n      className: `${classPrefix}-item-title`\n    }, active && React.createElement(\"div\", {\n      className: `${classPrefix}-item-highlight`\n    }), item.props.title))));\n  })), React.createElement(\"div\", {\n    className: classNames(`${classPrefix}-extra-space`, isLastItemActive && `${classPrefix}-item-active-next-sibling`)\n  }, isLastItemActive && React.createElement(Corner, {\n    className: `${classPrefix}-item-corner ${classPrefix}-item-corner-top`\n  }))));\n};","map":null,"metadata":{},"sourceType":"module"}