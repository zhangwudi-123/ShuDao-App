{"ast":null,"code":"import $ from 'dom7';\nimport Utils from '../../utils/utils';\nconst Progressbar = {\n  set() {\n    const app = this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    let [el, progress, duration] = args;\n\n    if (typeof args[0] === 'number') {\n      [progress, duration] = args;\n      el = app.root;\n    }\n\n    if (typeof progress === 'undefined' || progress === null) return el;\n    if (!progress) progress = 0;\n    const $el = $(el || app.root);\n\n    if ($el.length === 0) {\n      return el;\n    }\n\n    const progressNormalized = Math.min(Math.max(progress, 0), 100);\n    let $progressbarEl;\n    if ($el.hasClass('progressbar')) $progressbarEl = $el.eq(0);else {\n      $progressbarEl = $el.children('.progressbar');\n    }\n\n    if ($progressbarEl.length === 0 || $progressbarEl.hasClass('progressbar-infinite')) {\n      return $progressbarEl;\n    }\n\n    let $progressbarLine = $progressbarEl.children('span');\n\n    if ($progressbarLine.length === 0) {\n      $progressbarLine = $('<span></span>');\n      $progressbarEl.append($progressbarLine);\n    }\n\n    $progressbarLine.transition(typeof duration !== 'undefined' ? duration : '').transform(`translate3d(${-100 + progressNormalized}%,0,0)`);\n    return $progressbarEl[0];\n  },\n\n  show() {\n    const app = this; // '.page', 50, 'multi'\n\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    let [el, progress, color] = args;\n    let type = 'determined';\n\n    if (args.length === 2) {\n      if ((typeof args[0] === 'string' || typeof args[0] === 'object') && typeof args[1] === 'string') {\n        // '.page', 'multi'\n        [el, color, progress] = args;\n        type = 'infinite';\n      } else if (typeof args[0] === 'number' && typeof args[1] === 'string') {\n        // 50, 'multi'\n        [progress, color] = args;\n        el = app.root;\n      }\n    } else if (args.length === 1) {\n      if (typeof args[0] === 'number') {\n        el = app.root;\n        progress = args[0];\n      } else if (typeof args[0] === 'string') {\n        type = 'infinite';\n        el = app.root;\n        color = args[0];\n      }\n    } else if (args.length === 0) {\n      type = 'infinite';\n      el = app.root;\n    }\n\n    const $el = $(el);\n    if ($el.length === 0) return undefined;\n    let $progressbarEl;\n\n    if ($el.hasClass('progressbar') || $el.hasClass('progressbar-infinite')) {\n      $progressbarEl = $el;\n    } else {\n      $progressbarEl = $el.children('.progressbar:not(.progressbar-out), .progressbar-infinite:not(.progressbar-out)');\n\n      if ($progressbarEl.length === 0) {\n        $progressbarEl = $(`\n          <span class=\"progressbar${type === 'infinite' ? '-infinite' : ''}${color ? ` color-${color}` : ''} progressbar-in\">\n            ${type === 'infinite' ? '' : '<span></span>'}\n          </span>`);\n        $el.append($progressbarEl);\n      }\n    }\n\n    if (typeof progress !== 'undefined') {\n      app.progressbar.set($progressbarEl, progress);\n    }\n\n    return $progressbarEl[0];\n  },\n\n  hide(el) {\n    let removeAfterHide = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const app = this;\n    const $el = $(el || app.root);\n    if ($el.length === 0) return undefined;\n    let $progressbarEl;\n\n    if ($el.hasClass('progressbar') || $el.hasClass('progressbar-infinite')) {\n      $progressbarEl = $el;\n    } else {\n      $progressbarEl = $el.children('.progressbar, .progressbar-infinite');\n    }\n\n    if ($progressbarEl.length === 0 || !$progressbarEl.hasClass('progressbar-in') || $progressbarEl.hasClass('progressbar-out')) {\n      return $progressbarEl;\n    }\n\n    $progressbarEl.removeClass('progressbar-in').addClass('progressbar-out').animationEnd(() => {\n      if (removeAfterHide) {\n        $progressbarEl.remove();\n      }\n    });\n    return $progressbarEl;\n  }\n\n};\nexport default {\n  name: 'progressbar',\n\n  create() {\n    const app = this;\n    Utils.extend(app, {\n      progressbar: {\n        set: Progressbar.set.bind(app),\n        show: Progressbar.show.bind(app),\n        hide: Progressbar.hide.bind(app)\n      }\n    });\n  },\n\n  on: {\n    tabMounted(tabEl) {\n      const app = this;\n      $(tabEl).find('.progressbar').each((index, progressbarEl) => {\n        const $progressbarEl = $(progressbarEl);\n        app.progressbar.set($progressbarEl, $progressbarEl.attr('data-progress'));\n      });\n    },\n\n    pageInit(page) {\n      const app = this;\n      page.$el.find('.progressbar').each((index, progressbarEl) => {\n        const $progressbarEl = $(progressbarEl);\n        app.progressbar.set($progressbarEl, $progressbarEl.attr('data-progress'));\n      });\n    }\n\n  },\n  vnode: {\n    progressbar: {\n      insert(vnode) {\n        const app = this;\n        const el = vnode.elm;\n        app.progressbar.set(el, el.getAttribute('data-progress'));\n      },\n\n      update(vnode) {\n        const app = this;\n        const el = vnode.elm;\n        app.progressbar.set(el, el.getAttribute('data-progress'));\n      }\n\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}