{"ast":null,"code":"import React, { useRef } from 'react';\nimport { useSpring, animated } from '@react-spring/web';\nimport { useSize } from 'ahooks';\nimport { rubberbandIfOutOfBounds } from '../../utils/rubberband';\nimport { useDragAndPinch } from '../../utils/use-drag-and-pinch';\nimport { bound } from '../../utils/bound';\nimport * as mat from '../../utils/matrix';\nconst classPrefix = `adm-image-viewer`;\nexport const Slide = props => {\n  const {\n    dragLockRef,\n    maxZoom\n  } = props;\n  const controlRef = useRef(null);\n  const imgRef = useRef(null);\n  const [{\n    matrix\n  }, api] = useSpring(() => ({\n    matrix: mat.create(),\n    config: {\n      tension: 200\n    }\n  }));\n  const controlSize = useSize(controlRef);\n  const imgSize = useSize(imgRef);\n  const pinchLockRef = useRef(false);\n\n  const boundMatrix = function (nextMatrix, type) {\n    let last = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (!controlSize || !imgSize) return nextMatrix;\n    const controlLeft = -controlSize.width / 2;\n    const controlTop = -controlSize.height / 2;\n    const imgLeft = -imgSize.width / 2;\n    const imgTop = -imgSize.height / 2;\n    const zoom = mat.getScaleX(nextMatrix);\n    const scaledImgWidth = zoom * imgSize.width;\n    const scaledImgHeight = zoom * imgSize.height;\n    const [x, y] = mat.apply(nextMatrix, [imgLeft, imgTop]);\n\n    if (type === 'translate') {\n      let boundedX = x;\n      let boundedY = y;\n\n      if (scaledImgWidth > controlSize.width) {\n        const minX = controlLeft - (scaledImgWidth - controlSize.width);\n        const maxX = controlLeft;\n        boundedX = last ? bound(x, minX, maxX) : rubberbandIfOutOfBounds(x, minX, maxX, zoom * 50);\n      } else {\n        boundedX = -scaledImgWidth / 2;\n      }\n\n      if (scaledImgHeight > controlSize.height) {\n        const minY = controlTop - (scaledImgHeight - controlSize.height);\n        const maxY = controlTop;\n        boundedY = last ? bound(y, minY, maxY) : rubberbandIfOutOfBounds(y, minY, maxY, zoom * 50);\n      } else {\n        boundedY = -scaledImgHeight / 2;\n      }\n\n      return mat.translate(nextMatrix, boundedX - x, boundedY - y);\n    }\n\n    if (type === 'scale' && last) {\n      const [boundedX, boundedY] = [scaledImgWidth > controlSize.width ? bound(x, controlLeft - (scaledImgWidth - controlSize.width), controlLeft) : -scaledImgWidth / 2, scaledImgHeight > controlSize.height ? bound(y, controlTop - (scaledImgHeight - controlSize.height), controlTop) : -scaledImgHeight / 2];\n      return mat.translate(nextMatrix, boundedX - x, boundedY - y);\n    }\n\n    return nextMatrix;\n  };\n\n  useDragAndPinch({\n    onDrag: state => {\n      if (state.first) return;\n      if (state.pinching) return state.cancel();\n\n      if (state.tap && state.elapsedTime > 0 && state.elapsedTime < 1000) {\n        // 判断点击时间>0是为了过滤掉非正常操作，例如用户长按选择图片之后的取消操作（也是一次点击）\n        props.onTap();\n        return;\n      }\n\n      const currentZoom = mat.getScaleX(matrix.get());\n\n      if (dragLockRef) {\n        dragLockRef.current = currentZoom !== 1;\n      }\n\n      if (!pinchLockRef.current && currentZoom <= 1) {\n        api.start({\n          matrix: mat.create()\n        });\n      } else {\n        const currentMatrix = matrix.get();\n        const offset = [state.offset[0] - mat.getTranslateX(currentMatrix), state.offset[1] - mat.getTranslateY(currentMatrix)];\n        const nextMatrix = mat.translate(currentMatrix, ...(state.last ? [offset[0] + state.velocity[0] * state.direction[0] * 200, offset[1] + state.velocity[1] * state.direction[1] * 200] : offset));\n        api.start({\n          matrix: boundMatrix(nextMatrix, 'translate', state.last),\n          immediate: !state.last\n        });\n      }\n    },\n    onPinch: state => {\n      var _a;\n\n      pinchLockRef.current = !state.last;\n      const [d] = state.offset;\n      if (d < 0) return;\n      let mergedMaxZoom;\n\n      if (maxZoom === 'auto') {\n        mergedMaxZoom = controlSize && imgSize ? Math.max(controlSize.height / imgSize.height, controlSize.width / imgSize.width) : 1;\n      } else {\n        mergedMaxZoom = maxZoom;\n      }\n\n      const nextZoom = state.last ? bound(d, 1, mergedMaxZoom) : d;\n      (_a = props.onZoomChange) === null || _a === void 0 ? void 0 : _a.call(props, nextZoom);\n\n      if (state.last && nextZoom <= 1) {\n        api.start({\n          matrix: mat.create()\n        });\n\n        if (dragLockRef) {\n          dragLockRef.current = false;\n        }\n      } else {\n        if (!controlSize) return;\n        const currentMatrix = matrix.get();\n        const currentZoom = mat.getScaleX(currentMatrix);\n        const originOffsetX = state.origin[0] - controlSize.width / 2;\n        const originOffsetY = state.origin[1] - controlSize.height / 2;\n        let nextMatrix = mat.translate(currentMatrix, -originOffsetX, -originOffsetY);\n        nextMatrix = mat.scale(nextMatrix, nextZoom / currentZoom);\n        nextMatrix = mat.translate(nextMatrix, originOffsetX, originOffsetY);\n        api.start({\n          matrix: boundMatrix(nextMatrix, 'scale', state.last),\n          immediate: !state.last\n        });\n\n        if (dragLockRef) {\n          dragLockRef.current = true;\n        }\n      }\n    }\n  }, {\n    target: controlRef,\n    drag: {\n      // filterTaps: true,\n      from: () => [mat.getTranslateX(matrix.get()), mat.getTranslateY(matrix.get())],\n      pointer: {\n        touch: true\n      }\n    },\n    pinch: {\n      from: () => [mat.getScaleX(matrix.get()), 0],\n      pointer: {\n        touch: true\n      }\n    }\n  });\n  return React.createElement(\"div\", {\n    className: `${classPrefix}-slide`,\n    onPointerMove: e => {\n      if (mat.getScaleX(matrix.get()) !== 1) {\n        e.stopPropagation();\n      }\n    }\n  }, React.createElement(\"div\", {\n    className: `${classPrefix}-control`,\n    ref: controlRef\n  }, React.createElement(animated.div, {\n    className: `${classPrefix}-image-wrapper`,\n    style: {\n      matrix\n    }\n  }, React.createElement(\"img\", {\n    ref: imgRef,\n    src: props.image,\n    draggable: false,\n    alt: props.image\n  }))));\n};","map":null,"metadata":{},"sourceType":"module"}