{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport React from 'react';\nimport Utils from '../utils/utils';\nimport Mixins from '../utils/mixins';\nimport __reactComponentSlots from '../runtime-helpers/react-component-slots.js';\nimport __reactComponentSetProps from '../runtime-helpers/react-component-set-props.js';\n\nvar F7Messages = /*#__PURE__*/function (_React$Component) {\n  _inherits(F7Messages, _React$Component);\n\n  function F7Messages(props, context) {\n    var _this;\n\n    _classCallCheck(this, F7Messages);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(F7Messages).call(this, props, context));\n    _this.__reactRefs = {};\n    return _this;\n  }\n\n  _createClass(F7Messages, [{\n    key: \"renderMessages\",\n    value: function renderMessages(messagesToRender, method) {\n      if (!this.f7Messages) return undefined;\n      return this.f7Messages.renderMessages(messagesToRender, method);\n    }\n  }, {\n    key: \"layout\",\n    value: function layout() {\n      if (!this.f7Messages) return undefined;\n      return this.f7Messages.layout();\n    }\n  }, {\n    key: \"scroll\",\n    value: function scroll(duration, scrollTop) {\n      if (!this.f7Messages) return undefined;\n      return this.f7Messages.scroll(duration, scrollTop);\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      if (!this.f7Messages) return undefined;\n      return this.f7Messages.clear();\n    }\n  }, {\n    key: \"removeMessage\",\n    value: function removeMessage(messageToRemove, layout) {\n      if (!this.f7Messages) return undefined;\n      return this.f7Messages.removeMessage(messageToRemove, layout);\n    }\n  }, {\n    key: \"removeMessages\",\n    value: function removeMessages(messagesToRemove, layout) {\n      if (!this.f7Messages) return undefined;\n      return this.f7Messages.removeMessages(messagesToRemove, layout);\n    }\n  }, {\n    key: \"addMessage\",\n    value: function addMessage() {\n      var _this$f7Messages;\n\n      if (!this.f7Messages) return undefined;\n      return (_this$f7Messages = this.f7Messages).addMessage.apply(_this$f7Messages, arguments);\n    }\n  }, {\n    key: \"addMessages\",\n    value: function addMessages() {\n      var _this$f7Messages2;\n\n      if (!this.f7Messages) return undefined;\n      return (_this$f7Messages2 = this.f7Messages).addMessages.apply(_this$f7Messages2, arguments);\n    }\n  }, {\n    key: \"showTyping\",\n    value: function showTyping(message) {\n      if (!this.f7Messages) return undefined;\n      return this.f7Messages.showTyping(message);\n    }\n  }, {\n    key: \"hideTyping\",\n    value: function hideTyping() {\n      if (!this.f7Messages) return undefined;\n      return this.f7Messages.hideTyping();\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (!this.f7Messages) return undefined;\n      return this.f7Messages.destroy();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var self = this;\n      var props = self.props;\n      var id = props.id,\n          style = props.style,\n          className = props.className;\n      var classes = Utils.classNames(className, 'messages', Mixins.colorClasses(props));\n      return React.createElement('div', {\n        ref: function ref(__reactNode) {\n          _this2.__reactRefs['el'] = __reactNode;\n        },\n        id: id,\n        style: style,\n        className: classes\n      }, this.slots['default']);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.f7Messages && this.f7Messages.destroy) this.f7Messages.destroy();\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var self = this;\n      var _self$props = self.props,\n          init = _self$props.init,\n          autoLayout = _self$props.autoLayout,\n          messages = _self$props.messages,\n          newMessagesFirst = _self$props.newMessagesFirst,\n          scrollMessages = _self$props.scrollMessages,\n          scrollMessagesOnEdge = _self$props.scrollMessagesOnEdge,\n          firstMessageRule = _self$props.firstMessageRule,\n          lastMessageRule = _self$props.lastMessageRule,\n          tailMessageRule = _self$props.tailMessageRule,\n          sameNameMessageRule = _self$props.sameNameMessageRule,\n          sameHeaderMessageRule = _self$props.sameHeaderMessageRule,\n          sameFooterMessageRule = _self$props.sameFooterMessageRule,\n          sameAvatarMessageRule = _self$props.sameAvatarMessageRule,\n          customClassMessageRule = _self$props.customClassMessageRule,\n          renderMessage = _self$props.renderMessage;\n      if (!init) return;\n      self.$f7ready(function (f7) {\n        self.f7Messages = f7.messages.create(Utils.noUndefinedProps({\n          el: self.refs.el,\n          autoLayout: autoLayout,\n          messages: messages,\n          newMessagesFirst: newMessagesFirst,\n          scrollMessages: scrollMessages,\n          scrollMessagesOnEdge: scrollMessagesOnEdge,\n          firstMessageRule: firstMessageRule,\n          lastMessageRule: lastMessageRule,\n          tailMessageRule: tailMessageRule,\n          sameNameMessageRule: sameNameMessageRule,\n          sameHeaderMessageRule: sameHeaderMessageRule,\n          sameFooterMessageRule: sameFooterMessageRule,\n          sameAvatarMessageRule: sameAvatarMessageRule,\n          customClassMessageRule: customClassMessageRule,\n          renderMessage: renderMessage\n        }));\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var self = this;\n      var _self$props2 = self.props,\n          init = _self$props2.init,\n          autoLayout = _self$props2.autoLayout,\n          scrollMessages = _self$props2.scrollMessages;\n      if (!init) return;\n      var el = self.refs.el;\n      if (!el) return;\n      var children = el.children;\n      if (!children) return;\n\n      for (var i = 0; i < children.length; i += 1) {\n        if (!children[i].classList.contains('message-appeared')) {\n          children[i].classList.add('message-appear-from-bottom');\n        }\n      }\n\n      if (self.f7Messages && self.f7Messages.layout && autoLayout) {\n        self.f7Messages.layout();\n      }\n\n      if (self.f7Messages && self.f7Messages.scroll && scrollMessages) {\n        self.f7Messages.scroll();\n      }\n    }\n  }, {\n    key: \"componentWillUpdate\",\n    value: function componentWillUpdate() {\n      var self = this;\n      if (!self.props.init) return;\n      var el = self.refs.el;\n      if (!el) return;\n      var children = el.children;\n      if (!children) return;\n\n      for (var i = 0; i < children.length; i += 1) {\n        children[i].classList.add('message-appeared');\n      }\n    }\n  }, {\n    key: \"slots\",\n    get: function get() {\n      return __reactComponentSlots(this.props);\n    }\n  }, {\n    key: \"refs\",\n    get: function get() {\n      return this.__reactRefs;\n    },\n    set: function set(refs) {}\n  }]);\n\n  return F7Messages;\n}(React.Component);\n\n__reactComponentSetProps(F7Messages, Object.assign({\n  id: [String, Number],\n  className: String,\n  style: Object,\n  autoLayout: {\n    type: Boolean,\n    default: false\n  },\n  messages: {\n    type: Array,\n    default: function _default() {\n      return [];\n    }\n  },\n  newMessagesFirst: {\n    type: Boolean,\n    default: false\n  },\n  scrollMessages: {\n    type: Boolean,\n    default: true\n  },\n  scrollMessagesOnEdge: {\n    type: Boolean,\n    default: true\n  },\n  firstMessageRule: Function,\n  lastMessageRule: Function,\n  tailMessageRule: Function,\n  sameNameMessageRule: Function,\n  sameHeaderMessageRule: Function,\n  sameFooterMessageRule: Function,\n  sameAvatarMessageRule: Function,\n  customClassMessageRule: Function,\n  renderMessage: Function,\n  init: {\n    type: Boolean,\n    default: true\n  }\n}, Mixins.colorProps));\n\nF7Messages.displayName = 'f7-messages';\nexport default F7Messages;","map":null,"metadata":{},"sourceType":"module"}