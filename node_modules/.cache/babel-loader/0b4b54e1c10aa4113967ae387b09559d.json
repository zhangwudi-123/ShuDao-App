{"ast":null,"code":"import React, { forwardRef, useEffect, useImperativeHandle, useRef, useState } from 'react';\nimport { withNativeProps } from '../../utils/native-props';\nimport { mergeProps } from '../../utils/with-default-props';\nimport { usePropsValue } from '../../utils/use-props-value';\nimport classNames from 'classnames';\nimport { CloseCircleFill } from 'antd-mobile-icons';\nimport { useIsomorphicLayoutEffect } from 'ahooks';\nimport { useConfig } from '../config-provider';\nconst classPrefix = 'adm-virtual-input';\nconst defaultProps = {\n  defaultValue: ''\n};\nexport const VirtualInput = forwardRef((p, ref) => {\n  const props = mergeProps(defaultProps, p);\n  const [value, setValue] = usePropsValue(props);\n  const rootRef = useRef(null);\n  const contentRef = useRef(null);\n  const [hasFocus, setHasFocus] = useState(false);\n  const {\n    locale\n  } = useConfig();\n\n  function scrollToEnd() {\n    const root = rootRef.current;\n    if (!root) return;\n\n    if (document.activeElement !== root) {\n      return;\n    }\n\n    const content = contentRef.current;\n    if (!content) return;\n    content.scrollLeft = content.clientWidth;\n  }\n\n  useIsomorphicLayoutEffect(() => {\n    scrollToEnd();\n  }, [value]);\n  useEffect(() => {\n    if (hasFocus) {\n      scrollToEnd();\n    }\n  }, [hasFocus]);\n  useImperativeHandle(ref, () => ({\n    focus: () => {\n      var _a;\n\n      (_a = rootRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n    },\n    blur: () => {\n      var _a;\n\n      (_a = rootRef.current) === null || _a === void 0 ? void 0 : _a.blur();\n    }\n  }));\n\n  function onFocus() {\n    var _a;\n\n    setHasFocus(true);\n    (_a = props.onFocus) === null || _a === void 0 ? void 0 : _a.call(props);\n  }\n\n  function onBlur() {\n    var _a;\n\n    setHasFocus(false);\n    (_a = props.onBlur) === null || _a === void 0 ? void 0 : _a.call(props);\n  }\n\n  const keyboard = props.keyboard;\n  const keyboardElement = keyboard && React.cloneElement(keyboard, {\n    onInput: v => {\n      var _a, _b;\n\n      setValue(value + v);\n      (_b = (_a = keyboard.props).onInput) === null || _b === void 0 ? void 0 : _b.call(_a, v);\n    },\n    onDelete: () => {\n      var _a, _b;\n\n      setValue(value.slice(0, -1));\n      (_b = (_a = keyboard.props).onDelete) === null || _b === void 0 ? void 0 : _b.call(_a);\n    },\n    visible: hasFocus,\n    onClose: () => {\n      var _a, _b, _c;\n\n      (_a = rootRef.current) === null || _a === void 0 ? void 0 : _a.blur();\n      (_c = (_b = keyboard.props).onClose) === null || _c === void 0 ? void 0 : _c.call(_b);\n    },\n    getContainer: null\n  });\n  return withNativeProps(props, React.createElement(\"div\", {\n    ref: rootRef,\n    className: classNames(classPrefix, {\n      [`${classPrefix}-disabled`]: props.disabled\n    }),\n    tabIndex: props.disabled ? undefined : 0,\n    role: 'option',\n    onFocus: onFocus,\n    onBlur: onBlur,\n    onClick: props.onClick\n  }, React.createElement(\"div\", {\n    className: `${classPrefix}-content`,\n    ref: contentRef,\n    \"aria-disabled\": props.disabled,\n    \"aria-label\": props.placeholder\n  }, value, React.createElement(\"div\", {\n    className: `${classPrefix}-caret-container`\n  }, hasFocus && React.createElement(\"div\", {\n    className: `${classPrefix}-caret`\n  }))), props.clearable && !!value && hasFocus && React.createElement(\"div\", {\n    className: `${classPrefix}-clear`,\n    onClick: e => {\n      var _a;\n\n      e.stopPropagation();\n      setValue('');\n      (_a = props.onClear) === null || _a === void 0 ? void 0 : _a.call(props);\n    },\n    role: 'button',\n    \"aria-label\": locale.Input.clear\n  }, React.createElement(CloseCircleFill, null)), !value && React.createElement(\"div\", {\n    className: `${classPrefix}-placeholder`\n  }, props.placeholder), keyboardElement));\n});","map":null,"metadata":{},"sourceType":"module"}