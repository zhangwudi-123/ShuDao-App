{"ast":null,"code":"import Utils from '../../utils/utils';\nimport Dialog from './dialog-class';\nimport ModalMethods from '../../utils/modal-methods';\nexport default {\n  name: 'dialog',\n  params: {\n    dialog: {\n      title: undefined,\n      buttonOk: 'OK',\n      buttonCancel: 'Cancel',\n      usernamePlaceholder: 'Username',\n      passwordPlaceholder: 'Password',\n      preloaderTitle: 'Loading... ',\n      progressTitle: 'Loading... ',\n      closeByBackdropClick: false,\n      destroyPredefinedDialogs: true,\n      keyboardActions: true\n    }\n  },\n  static: {\n    Dialog\n  },\n\n  create() {\n    const app = this;\n\n    function defaultDialogTitle() {\n      return app.params.dialog.title || app.name;\n    }\n\n    const destroyOnClose = app.params.dialog.destroyPredefinedDialogs;\n    const keyboardActions = app.params.dialog.keyboardActions;\n    app.dialog = Utils.extend(ModalMethods({\n      app,\n      constructor: Dialog,\n      defaultSelector: '.dialog.modal-in'\n    }), {\n      // Shortcuts\n      alert() {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        let [text, title, callbackOk] = args;\n\n        if (args.length === 2 && typeof args[1] === 'function') {\n          [text, callbackOk, title] = args;\n        }\n\n        return new Dialog(app, {\n          title: typeof title === 'undefined' ? defaultDialogTitle() : title,\n          text,\n          buttons: [{\n            text: app.params.dialog.buttonOk,\n            bold: true,\n            onClick: callbackOk,\n            keyCodes: keyboardActions ? [13, 27] : null\n          }],\n          destroyOnClose\n        }).open();\n      },\n\n      prompt() {\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        let [text, title, callbackOk, callbackCancel, defaultValue] = args;\n\n        if (typeof args[1] === 'function') {\n          [text, callbackOk, callbackCancel, defaultValue, title] = args;\n        }\n\n        defaultValue = typeof defaultValue === 'undefined' || defaultValue === null ? '' : defaultValue;\n        return new Dialog(app, {\n          title: typeof title === 'undefined' ? defaultDialogTitle() : title,\n          text,\n          content: `<div class=\"dialog-input-field input\"><input type=\"text\" class=\"dialog-input\" value=\"${defaultValue}\"></div>`,\n          buttons: [{\n            text: app.params.dialog.buttonCancel,\n            keyCodes: keyboardActions ? [27] : null,\n            color: app.theme === 'aurora' ? 'gray' : null\n          }, {\n            text: app.params.dialog.buttonOk,\n            bold: true,\n            keyCodes: keyboardActions ? [13] : null\n          }],\n\n          onClick(dialog, index) {\n            const inputValue = dialog.$el.find('.dialog-input').val();\n            if (index === 0 && callbackCancel) callbackCancel(inputValue);\n            if (index === 1 && callbackOk) callbackOk(inputValue);\n          },\n\n          destroyOnClose\n        }).open();\n      },\n\n      confirm() {\n        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          args[_key3] = arguments[_key3];\n        }\n\n        let [text, title, callbackOk, callbackCancel] = args;\n\n        if (typeof args[1] === 'function') {\n          [text, callbackOk, callbackCancel, title] = args;\n        }\n\n        return new Dialog(app, {\n          title: typeof title === 'undefined' ? defaultDialogTitle() : title,\n          text,\n          buttons: [{\n            text: app.params.dialog.buttonCancel,\n            onClick: callbackCancel,\n            keyCodes: keyboardActions ? [27] : null,\n            color: app.theme === 'aurora' ? 'gray' : null\n          }, {\n            text: app.params.dialog.buttonOk,\n            bold: true,\n            onClick: callbackOk,\n            keyCodes: keyboardActions ? [13] : null\n          }],\n          destroyOnClose\n        }).open();\n      },\n\n      login() {\n        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n          args[_key4] = arguments[_key4];\n        }\n\n        let [text, title, callbackOk, callbackCancel] = args;\n\n        if (typeof args[1] === 'function') {\n          [text, callbackOk, callbackCancel, title] = args;\n        }\n\n        return new Dialog(app, {\n          title: typeof title === 'undefined' ? defaultDialogTitle() : title,\n          text,\n          content: `\n              <div class=\"dialog-input-field dialog-input-double input\">\n                <input type=\"text\" name=\"dialog-username\" placeholder=\"${app.params.dialog.usernamePlaceholder}\" class=\"dialog-input\">\n              </div>\n              <div class=\"dialog-input-field dialog-input-double input\">\n                <input type=\"password\" name=\"dialog-password\" placeholder=\"${app.params.dialog.passwordPlaceholder}\" class=\"dialog-input\">\n              </div>`,\n          buttons: [{\n            text: app.params.dialog.buttonCancel,\n            keyCodes: keyboardActions ? [27] : null,\n            color: app.theme === 'aurora' ? 'gray' : null\n          }, {\n            text: app.params.dialog.buttonOk,\n            bold: true,\n            keyCodes: keyboardActions ? [13] : null\n          }],\n\n          onClick(dialog, index) {\n            const username = dialog.$el.find('[name=\"dialog-username\"]').val();\n            const password = dialog.$el.find('[name=\"dialog-password\"]').val();\n            if (index === 0 && callbackCancel) callbackCancel(username, password);\n            if (index === 1 && callbackOk) callbackOk(username, password);\n          },\n\n          destroyOnClose\n        }).open();\n      },\n\n      password() {\n        for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n          args[_key5] = arguments[_key5];\n        }\n\n        let [text, title, callbackOk, callbackCancel] = args;\n\n        if (typeof args[1] === 'function') {\n          [text, callbackOk, callbackCancel, title] = args;\n        }\n\n        return new Dialog(app, {\n          title: typeof title === 'undefined' ? defaultDialogTitle() : title,\n          text,\n          content: `\n              <div class=\"dialog-input-field input\">\n                <input type=\"password\" name=\"dialog-password\" placeholder=\"${app.params.dialog.passwordPlaceholder}\" class=\"dialog-input\">\n              </div>`,\n          buttons: [{\n            text: app.params.dialog.buttonCancel,\n            keyCodes: keyboardActions ? [27] : null,\n            color: app.theme === 'aurora' ? 'gray' : null\n          }, {\n            text: app.params.dialog.buttonOk,\n            bold: true,\n            keyCodes: keyboardActions ? [13] : null\n          }],\n\n          onClick(dialog, index) {\n            const password = dialog.$el.find('[name=\"dialog-password\"]').val();\n            if (index === 0 && callbackCancel) callbackCancel(password);\n            if (index === 1 && callbackOk) callbackOk(password);\n          },\n\n          destroyOnClose\n        }).open();\n      },\n\n      preloader(title, color) {\n        const preloaderInner = Utils[`${app.theme}PreloaderContent`] || '';\n        return new Dialog(app, {\n          title: typeof title === 'undefined' || title === null ? app.params.dialog.preloaderTitle : title,\n          content: `<div class=\"preloader${color ? ` color-${color}` : ''}\">${preloaderInner}</div>`,\n          cssClass: 'dialog-preloader',\n          destroyOnClose\n        }).open();\n      },\n\n      progress() {\n        for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n          args[_key6] = arguments[_key6];\n        }\n\n        let [title, progress, color] = args;\n\n        if (args.length === 2) {\n          if (typeof args[0] === 'number') {\n            [progress, color, title] = args;\n          } else if (typeof args[0] === 'string' && typeof args[1] === 'string') {\n            [title, color, progress] = args;\n          }\n        } else if (args.length === 1) {\n          if (typeof args[0] === 'number') {\n            [progress, title, color] = args;\n          }\n        }\n\n        const infinite = typeof progress === 'undefined';\n        const dialog = new Dialog(app, {\n          title: typeof title === 'undefined' ? app.params.dialog.progressTitle : title,\n          cssClass: 'dialog-progress',\n          content: `\n              <div class=\"progressbar${infinite ? '-infinite' : ''}${color ? ` color-${color}` : ''}\">\n                ${!infinite ? '<span></span>' : ''}\n              </div>\n            `,\n          destroyOnClose\n        });\n        if (!infinite) dialog.setProgress(progress);\n        return dialog.open();\n      }\n\n    });\n  }\n\n};","map":null,"metadata":{},"sourceType":"module"}