{"ast":null,"code":"import React, { forwardRef, useCallback, useMemo } from 'react';\nimport { useMemoizedFn } from 'ahooks';\nimport Picker from '../picker';\nimport { withNativeProps } from '../../utils/native-props';\nimport { mergeProps } from '../../utils/with-default-props';\nimport { usePropsValue } from '../../utils/use-props-value';\nimport { convertDateToStringArray, convertStringArrayToDate, generateDatePickerColumns } from './date-picker-utils';\nimport { bound } from '../../utils/bound';\nimport useRenderLabel from '../date-picker-view/useRenderLabel';\nimport { TILL_NOW } from './util';\nconst thisYear = new Date().getFullYear();\nconst defaultProps = {\n  min: new Date(new Date().setFullYear(thisYear - 10)),\n  max: new Date(new Date().setFullYear(thisYear + 10)),\n  precision: 'day',\n  defaultValue: null\n};\nexport const DatePicker = forwardRef((p, ref) => {\n  const props = mergeProps(defaultProps, p);\n  const {\n    renderLabel\n  } = props;\n  const [value, setValue] = usePropsValue({\n    value: props.value,\n    defaultValue: props.defaultValue,\n    onChange: v => {\n      var _a;\n\n      if (v === null) return;\n      (_a = props.onConfirm) === null || _a === void 0 ? void 0 : _a.call(props, v);\n    }\n  });\n  const now = useMemo(() => new Date(), []);\n  const mergedRenderLabel = useRenderLabel(renderLabel);\n  const pickerValue = useMemo(() => {\n    let date = value !== null && value !== void 0 ? value : now;\n\n    if (date.tillNow) {\n      return [TILL_NOW];\n    }\n\n    date = new Date(bound(date.getTime(), props.min.getTime(), props.max.getTime()));\n    return convertDateToStringArray(date, props.precision);\n  }, [value, props.precision, props.min, props.max]);\n  const onConfirm = useCallback(val => {\n    const date = convertStringArrayToDate(val, props.precision);\n    setValue(date, true);\n  }, [setValue, props.precision]);\n  const onSelect = useMemoizedFn(val => {\n    var _a;\n\n    const date = convertStringArrayToDate(val, props.precision);\n    (_a = props.onSelect) === null || _a === void 0 ? void 0 : _a.call(props, date);\n  });\n  const columns = useCallback(selected => generateDatePickerColumns(selected, props.min, props.max, props.precision, mergedRenderLabel, props.filter, props.tillNow), [props.min, props.max, props.precision, mergedRenderLabel, props.tillNow]);\n  return withNativeProps(props, React.createElement(Picker, {\n    ref: ref,\n    columns: columns,\n    value: pickerValue,\n    onCancel: props.onCancel,\n    onClose: props.onClose,\n    closeOnMaskClick: props.closeOnMaskClick,\n    visible: props.visible,\n    confirmText: props.confirmText,\n    cancelText: props.cancelText,\n    onConfirm: onConfirm,\n    onSelect: onSelect,\n    getContainer: props.getContainer,\n    loading: props.loading,\n    loadingContent: props.loadingContent,\n    afterShow: props.afterShow,\n    afterClose: props.afterClose,\n    onClick: props.onClick,\n    title: props.title,\n    stopPropagation: props.stopPropagation,\n    mouseWheel: props.mouseWheel,\n    destroyOnClose: props.destroyOnClose,\n    forceRender: props.forceRender\n  }, (_, actions) => {\n    var _a;\n\n    return (_a = props.children) === null || _a === void 0 ? void 0 : _a.call(props, value, actions);\n  }));\n});","map":null,"metadata":{},"sourceType":"module"}