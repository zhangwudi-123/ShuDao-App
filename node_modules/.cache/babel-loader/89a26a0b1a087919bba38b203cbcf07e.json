{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport React, { forwardRef, useImperativeHandle, useRef, useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport { usePropsValue } from '../../utils/use-props-value';\nimport { mergeProps } from '../../utils/with-default-props';\nimport { withNativeProps } from '../../utils/native-props';\nimport { withStopPropagation } from '../../utils/with-stop-propagation';\nimport { Arrow } from './arrow';\nimport { renderToContainer } from '../../utils/render-to-container';\nimport { arrow, computePosition, flip, offset, autoUpdate, hide, shift, limitShift } from '@floating-ui/dom';\nimport { Wrapper } from './wrapper';\nimport { useShouldRender } from '../../utils/should-render';\nimport { useClickAway, useIsomorphicLayoutEffect } from 'ahooks';\nimport { normalizePlacement } from './normalize-placement';\nimport { convertPx } from '../../utils/convert-px';\nconst classPrefix = `adm-popover`;\nconst defaultProps = {\n  placement: 'top',\n  defaultVisible: false,\n  stopPropagation: ['click'],\n  getContainer: () => document.body\n};\nexport const Popover = forwardRef((p, ref) => {\n  const props = mergeProps(defaultProps, p);\n  const {\n    mode = 'light'\n  } = props;\n  const placement = normalizePlacement(props.placement);\n  const [visible, setVisible] = usePropsValue({\n    value: props.visible,\n    defaultValue: props.defaultVisible,\n    onChange: props.onVisibleChange\n  });\n  useImperativeHandle(ref, () => {\n    return {\n      show: () => setVisible(true),\n      hide: () => setVisible(false),\n      visible\n    };\n  }, [visible]);\n  const targetRef = useRef(null);\n  const floatingRef = useRef(null);\n  const arrowRef = useRef(null);\n  const floating = withStopPropagation(props.stopPropagation, withNativeProps(props, React.createElement(\"div\", {\n    className: classNames(classPrefix, `${classPrefix}-${mode}`, !visible && `${classPrefix}-hidden`),\n    ref: floatingRef\n  }, React.createElement(\"div\", {\n    className: `${classPrefix}-arrow`,\n    ref: arrowRef\n  }, React.createElement(Arrow, {\n    className: `${classPrefix}-arrow-icon`\n  })), React.createElement(\"div\", {\n    className: `${classPrefix}-inner`\n  }, React.createElement(\"div\", {\n    className: `${classPrefix}-inner-content`\n  }, props.content)))));\n  const [targetElement, setTargetElement] = useState(null);\n\n  function update() {\n    var _a, _b, _c;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      const target = (_b = (_a = targetRef.current) === null || _a === void 0 ? void 0 : _a.element) !== null && _b !== void 0 ? _b : null;\n      const floating = floatingRef.current;\n      const arrowElement = arrowRef.current;\n      setTargetElement(target);\n      if (!target || !floating || !arrowElement) return;\n      const {\n        x,\n        y,\n        placement: realPlacement,\n        middlewareData\n      } = yield computePosition(target, floating, {\n        placement,\n        middleware: [offset(convertPx(12)), shift({\n          padding: convertPx(4),\n          crossAxis: false,\n          limiter: limitShift()\n        }), flip(), hide(), arrow({\n          element: arrowElement,\n          padding: convertPx(12)\n        })]\n      });\n      Object.assign(floating.style, {\n        left: `${x}px`,\n        top: `${y}px`\n      });\n      const side = realPlacement.split('-')[0];\n      const arrowSide = {\n        top: 'bottom',\n        right: 'left',\n        bottom: 'top',\n        left: 'right'\n      }[side];\n      const {\n        x: arrowX,\n        y: arrowY\n      } = (_c = middlewareData.arrow) !== null && _c !== void 0 ? _c : {};\n      Object.assign(arrowElement.style, {\n        left: arrowX != null ? `${arrowX}px` : '',\n        top: arrowY != null ? `${arrowY}px` : '',\n        right: '',\n        bottom: '',\n        [arrowSide]: 'calc(var(--arrow-size) * -1)'\n      });\n      const arrowRotate = {\n        top: '0deg',\n        bottom: '180deg',\n        left: '270deg',\n        right: '90deg'\n      }[side];\n      arrowElement.style.setProperty('--arrow-icon-rotate', arrowRotate);\n    });\n  }\n\n  useIsomorphicLayoutEffect(() => {\n    update();\n  });\n  useEffect(() => {\n    if (!targetElement) return;\n    if (!props.trigger) return;\n\n    function handleClick() {\n      setVisible(v => !v);\n    }\n\n    targetElement.addEventListener('click', handleClick);\n    return () => {\n      targetElement.removeEventListener('click', handleClick);\n    };\n  }, [targetElement, props.trigger]);\n  useEffect(() => {\n    const floatingElement = floatingRef.current;\n    if (!targetElement || !floatingElement) return;\n    return autoUpdate(targetElement, floatingElement, update, {\n      elementResize: typeof ResizeObserver !== 'undefined'\n    });\n  }, [targetElement]);\n  useClickAway(() => {\n    if (!props.trigger) return;\n    setVisible(false);\n  }, [() => {\n    var _a;\n\n    return (_a = targetRef.current) === null || _a === void 0 ? void 0 : _a.element;\n  }, floatingRef], ['click', 'touchmove']);\n  const shouldRender = useShouldRender(visible, false, props.destroyOnHide);\n  return React.createElement(React.Fragment, null, React.createElement(Wrapper, {\n    ref: targetRef\n  }, props.children), shouldRender && renderToContainer(props.getContainer, floating));\n});","map":null,"metadata":{},"sourceType":"module"}