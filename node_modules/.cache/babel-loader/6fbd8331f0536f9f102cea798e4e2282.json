{"ast":null,"code":"import React, { forwardRef, useRef, useState, useImperativeHandle } from 'react';\nimport classNames from 'classnames';\nimport { withNativeProps } from '../../utils/native-props';\nimport { useThrottleFn } from 'ahooks';\nimport { mergeProps } from '../../utils/with-default-props';\nimport { Sidebar } from './sidebar';\nimport { convertPx } from '../../utils/convert-px';\nimport { Panel } from './panel';\nimport { devWarning } from '../../utils/dev-log';\nimport { traverseReactNode } from '../../utils/traverse-react-node';\nconst classPrefix = `adm-index-bar`;\nconst defaultProps = {\n  sticky: true\n};\nexport const IndexBar = forwardRef((p, ref) => {\n  const props = mergeProps(defaultProps, p);\n  const titleHeight = convertPx(35);\n  const bodyRef = useRef(null);\n  const indexItems = [];\n  const panels = [];\n  traverseReactNode(props.children, child => {\n    var _a;\n\n    if (!React.isValidElement(child)) return;\n\n    if (child.type !== Panel) {\n      devWarning('IndexBar', 'The children of `IndexBar` must be `IndexBar.Panel` components.');\n      return;\n    }\n\n    indexItems.push({\n      index: child.props.index,\n      brief: (_a = child.props.brief) !== null && _a !== void 0 ? _a : child.props.index.charAt(0)\n    });\n    panels.push(withNativeProps(child.props, React.createElement(\"div\", {\n      key: child.props.index,\n      \"data-index\": child.props.index,\n      className: `${classPrefix}-anchor`\n    }, React.createElement(\"div\", {\n      className: `${classPrefix}-anchor-title`\n    }, child.props.title || child.props.index), child.props.children)));\n  });\n  const [activeIndex, setActiveIndex] = useState(() => {\n    const firstItem = indexItems[0];\n    return firstItem ? firstItem.index : null;\n  });\n  useImperativeHandle(ref, () => ({\n    scrollTo\n  }));\n\n  function scrollTo(index) {\n    var _a;\n\n    const body = bodyRef.current;\n    if (!body) return;\n    const children = body.children;\n\n    for (let i = 0; i < children.length; i++) {\n      const panel = children.item(i);\n      if (!panel) continue;\n      const panelIndex = panel.dataset['index'];\n\n      if (panelIndex === index) {\n        body.scrollTop = panel.offsetTop;\n        setActiveIndex(index);\n        activeIndex !== index && ((_a = props.onIndexChange) === null || _a === void 0 ? void 0 : _a.call(props, index));\n        return;\n      }\n    }\n  }\n\n  const {\n    run: checkActiveIndex\n  } = useThrottleFn(() => {\n    var _a;\n\n    const body = bodyRef.current;\n    if (!body) return;\n    const scrollTop = body.scrollTop;\n    const elements = body.getElementsByClassName(`${classPrefix}-anchor`);\n\n    for (let i = 0; i < elements.length; i++) {\n      const panel = elements.item(i);\n      if (!panel) continue;\n      const panelIndex = panel.dataset['index'];\n      if (!panelIndex) continue;\n\n      if (panel.offsetTop + panel.clientHeight - titleHeight > scrollTop) {\n        setActiveIndex(panelIndex);\n        activeIndex !== panelIndex && ((_a = props.onIndexChange) === null || _a === void 0 ? void 0 : _a.call(props, panelIndex));\n        return;\n      }\n    }\n  }, {\n    wait: 50,\n    trailing: true,\n    leading: true\n  });\n  return withNativeProps(props, React.createElement(\"div\", {\n    className: classNames(`${classPrefix}`, {\n      [`${classPrefix}-sticky`]: props.sticky\n    })\n  }, React.createElement(Sidebar, {\n    indexItems: indexItems,\n    activeIndex: activeIndex,\n    onActive: index => {\n      scrollTo(index);\n    }\n  }), React.createElement(\"div\", {\n    className: `${classPrefix}-body`,\n    ref: bodyRef,\n    onScroll: checkActiveIndex\n  }, panels)));\n});","map":null,"metadata":{},"sourceType":"module"}