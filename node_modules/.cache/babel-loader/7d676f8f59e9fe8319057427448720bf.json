{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport React from 'react';\nimport { mergeProps } from '../../utils/with-default-props';\nimport classNames from 'classnames';\nimport { DialogActionButton } from './dialog-action-button';\nimport Image from '../image';\nimport AutoCenter from '../auto-center';\nimport CenterPopup from '../center-popup';\nconst defaultProps = {\n  actions: [],\n  closeOnAction: false,\n  closeOnMaskClick: false,\n  getContainer: null\n};\nexport const Dialog = p => {\n  const props = mergeProps(defaultProps, p);\n  const element = React.createElement(React.Fragment, null, !!props.image && React.createElement(\"div\", {\n    className: cls('image-container')\n  }, React.createElement(Image, {\n    src: props.image,\n    alt: 'dialog header image',\n    width: '100%'\n  })), !!props.header && React.createElement(\"div\", {\n    className: cls('header')\n  }, React.createElement(AutoCenter, null, props.header)), !!props.title && React.createElement(\"div\", {\n    className: cls('title')\n  }, props.title), React.createElement(\"div\", {\n    className: classNames(cls('content'), !props.content && cls('content-empty'))\n  }, typeof props.content === 'string' ? React.createElement(AutoCenter, null, props.content) : props.content), React.createElement(\"div\", {\n    className: cls('footer')\n  }, props.actions.map((row, index) => {\n    const actions = Array.isArray(row) ? row : [row];\n    return React.createElement(\"div\", {\n      className: cls('action-row'),\n      key: index\n    }, actions.map((action, index) => React.createElement(DialogActionButton, {\n      key: action.key,\n      action: action,\n      onAction: () => __awaiter(void 0, void 0, void 0, function* () {\n        var _a, _b, _c;\n\n        yield Promise.all([(_a = action.onClick) === null || _a === void 0 ? void 0 : _a.call(action), (_b = props.onAction) === null || _b === void 0 ? void 0 : _b.call(props, action, index)]);\n\n        if (props.closeOnAction) {\n          (_c = props.onClose) === null || _c === void 0 ? void 0 : _c.call(props);\n        }\n      })\n    })));\n  })));\n  return React.createElement(CenterPopup, {\n    className: classNames(cls(), props.className),\n    style: props.style,\n    afterClose: props.afterClose,\n    afterShow: props.afterShow,\n    onMaskClick: props.closeOnMaskClick ? () => {\n      var _a;\n\n      (_a = props.onClose) === null || _a === void 0 ? void 0 : _a.call(props);\n    } : undefined,\n    visible: props.visible,\n    getContainer: props.getContainer,\n    bodyStyle: props.bodyStyle,\n    bodyClassName: classNames(cls('body'), props.image && cls('with-image'), props.bodyClassName),\n    maskStyle: props.maskStyle,\n    maskClassName: props.maskClassName,\n    stopPropagation: props.stopPropagation,\n    disableBodyScroll: props.disableBodyScroll,\n    destroyOnClose: props.destroyOnClose,\n    forceRender: props.forceRender,\n    role: 'dialog',\n    \"aria-label\": props['aria-label']\n  }, element);\n};\n\nfunction cls() {\n  let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return 'adm-dialog' + (name && '-') + name;\n}","map":null,"metadata":{},"sourceType":"module"}