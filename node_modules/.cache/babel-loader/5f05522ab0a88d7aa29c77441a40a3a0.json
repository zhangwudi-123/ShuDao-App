{"ast":null,"code":"import Utils from '../../utils/utils';\nimport History from '../../utils/history';\nimport asyncComponent from './async-component';\n\nfunction modalLoad(modalType, route) {\n  let loadOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const router = this;\n  const app = router.app;\n  const isPanel = modalType === 'panel';\n  const modalOrPanel = isPanel ? 'panel' : 'modal';\n  const options = Utils.extend({\n    animate: router.params.animate,\n    pushState: true,\n    history: true,\n    on: {}\n  }, loadOptions);\n  const modalParams = Utils.extend({}, route.route[modalType]);\n  const modalRoute = route.route;\n\n  function onModalLoaded() {\n    // Create Modal\n    const modal = app[modalType].create(modalParams);\n    modalRoute.modalInstance = modal;\n    const hasEl = modal.el;\n\n    function closeOnSwipeBack() {\n      modal.close();\n    }\n\n    modal.on(`${modalOrPanel}Open`, () => {\n      if (!hasEl) {\n        // Remove theme elements\n        router.removeThemeElements(modal.el); // Emit events\n\n        modal.$el.trigger(`${modalType.toLowerCase()}:init ${modalType.toLowerCase()}:mounted`, route, modal);\n        router.emit(`${!isPanel ? 'modalInit' : ''} ${modalType}Init ${modalType}Mounted`, modal.el, route, modal);\n      }\n\n      router.once('swipeBackMove', closeOnSwipeBack);\n    });\n    modal.on(`${modalOrPanel}Close`, () => {\n      router.off('swipeBackMove', closeOnSwipeBack);\n\n      if (!modal.closeByRouter) {\n        router.back();\n      }\n    });\n    modal.on(`${modalOrPanel}Closed`, () => {\n      modal.$el.trigger(`${modalType.toLowerCase()}:beforeremove`, route, modal);\n      modal.emit(`${!isPanel ? 'modalBeforeRemove ' : ''}${modalType}BeforeRemove`, modal.el, route, modal);\n      const modalComponent = modal.el.f7Component;\n\n      if (modalComponent) {\n        modalComponent.$destroy();\n      }\n\n      Utils.nextTick(() => {\n        if (modalComponent || modalParams.component) {\n          router.removeModal(modal.el);\n        }\n\n        modal.destroy();\n        delete modal.route;\n        delete modalRoute.modalInstance;\n      });\n    });\n\n    if (options.route) {\n      // Update Browser History\n      if (router.params.pushState && options.pushState) {\n        History.push(router.view.id, {\n          url: options.route.url,\n          modal: modalType\n        }, (router.params.pushStateRoot || '') + router.params.pushStateSeparator + options.route.url);\n      } // Set Route\n\n\n      if (options.route !== router.currentRoute) {\n        modal.route = Utils.extend(options.route, {\n          modal\n        });\n        router.currentRoute = modal.route;\n      } // Update Router History\n\n\n      if (options.history) {\n        router.history.push(options.route.url);\n        router.saveHistory();\n      }\n    }\n\n    if (hasEl) {\n      // Remove theme elements\n      router.removeThemeElements(modal.el); // Emit events\n\n      modal.$el.trigger(`${modalType.toLowerCase()}:init ${modalType.toLowerCase()}:mounted`, route, modal);\n      router.emit(`${modalOrPanel}Init ${modalType}Init ${modalType}Mounted`, modal.el, route, modal);\n    } // Open\n\n\n    modal.open();\n  } // Load Modal Content\n\n\n  function loadModal(loadModalParams, loadModalOptions) {\n    // Load Modal Props\n    const {\n      url,\n      content,\n      template,\n      templateUrl,\n      component,\n      componentUrl\n    } = loadModalParams; // Component/Template Callbacks\n\n    function resolve(contentEl) {\n      if (contentEl) {\n        if (typeof contentEl === 'string') {\n          modalParams.content = contentEl;\n        } else if (contentEl.f7Component) {\n          contentEl.f7Component.$mount(componentEl => {\n            modalParams.el = componentEl;\n            app.root.append(componentEl);\n          });\n        } else {\n          modalParams.el = contentEl;\n        }\n\n        onModalLoaded();\n      }\n    }\n\n    function reject() {\n      router.allowPageChange = true;\n      return router;\n    }\n\n    if (content) {\n      resolve(content);\n    } else if (template || templateUrl) {\n      try {\n        router.modalTemplateLoader(template, templateUrl, loadModalOptions, resolve, reject);\n      } catch (err) {\n        router.allowPageChange = true;\n        throw err;\n      }\n    } else if (component || componentUrl) {\n      // Load from component (F7/Vue/React/...)\n      try {\n        router.modalComponentLoader(app.root[0], component, componentUrl, loadModalOptions, resolve, reject);\n      } catch (err) {\n        router.allowPageChange = true;\n        throw err;\n      }\n    } else if (url) {\n      // Load using XHR\n      if (router.xhr) {\n        router.xhr.abort();\n        router.xhr = false;\n      }\n\n      router.xhrRequest(url, loadModalOptions).then(modalContent => {\n        modalParams.content = modalContent;\n        onModalLoaded();\n      }).catch(() => {\n        router.allowPageChange = true;\n      });\n    } else {\n      onModalLoaded();\n    }\n  }\n\n  let foundLoadProp;\n  'url content component el componentUrl template templateUrl'.split(' ').forEach(modalLoadProp => {\n    if (modalParams[modalLoadProp] && !foundLoadProp) {\n      foundLoadProp = true;\n      loadModal({\n        [modalLoadProp]: modalParams[modalLoadProp]\n      }, options);\n    }\n  });\n\n  if (!foundLoadProp && modalType === 'actions') {\n    onModalLoaded();\n  } // Async\n\n\n  function asyncResolve(resolveParams, resolveOptions) {\n    loadModal(resolveParams, Utils.extend(options, resolveOptions));\n  }\n\n  function asyncReject() {\n    router.allowPageChange = true;\n  }\n\n  if (modalParams.async) {\n    modalParams.async.call(router, options.route, router.currentRoute, asyncResolve, asyncReject);\n  }\n\n  if (modalParams.asyncComponent) {\n    asyncComponent(router, modalParams.asyncComponent, asyncResolve, asyncReject);\n  }\n\n  return router;\n}\n\nfunction modalRemove(modal) {\n  Utils.extend(modal, {\n    closeByRouter: true\n  });\n  modal.close();\n}\n\nexport { modalLoad, modalRemove };","map":null,"metadata":{},"sourceType":"module"}