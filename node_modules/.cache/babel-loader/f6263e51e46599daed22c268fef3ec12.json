{"ast":null,"code":"/* eslint indent: [\"off\"] */\nimport $ from 'dom7';\nimport Utils from '../../utils/utils';\nimport Modal from '../modal/modal-class';\n\nclass Actions extends Modal {\n  constructor(app, params) {\n    const extendedParams = Utils.extend({\n      on: {}\n    }, app.params.actions, params); // Extends with open/close Modal methods;\n\n    super(app, extendedParams);\n    const actions = this;\n    actions.params = extendedParams; // Buttons\n\n    let groups;\n\n    if (actions.params.buttons) {\n      groups = actions.params.buttons;\n      if (!Array.isArray(groups[0])) groups = [groups];\n    }\n\n    actions.groups = groups; // Find Element\n\n    let $el;\n\n    if (actions.params.el) {\n      $el = $(actions.params.el).eq(0);\n    } else if (actions.params.content) {\n      $el = $(actions.params.content).filter((elIndex, node) => node.nodeType === 1).eq(0);\n    } else if (actions.params.buttons) {\n      if (actions.params.convertToPopover) {\n        actions.popoverHtml = actions.renderPopover();\n      }\n\n      actions.actionsHtml = actions.render();\n    }\n\n    if ($el && $el.length > 0 && $el[0].f7Modal) {\n      return $el[0].f7Modal;\n    }\n\n    if ($el && $el.length === 0 && !(actions.actionsHtml || actions.popoverHtml)) {\n      return actions.destroy();\n    } // Backdrop\n\n\n    let $backdropEl;\n\n    if (actions.params.backdrop && actions.params.backdropEl) {\n      $backdropEl = $(actions.params.backdropEl);\n    } else if (actions.params.backdrop) {\n      $backdropEl = app.root.children('.actions-backdrop');\n\n      if ($backdropEl.length === 0) {\n        $backdropEl = $('<div class=\"actions-backdrop\"></div>');\n        app.root.append($backdropEl);\n      }\n    }\n\n    const originalOpen = actions.open;\n    const originalClose = actions.close;\n    let popover;\n\n    function buttonOnClick(e) {\n      const $buttonEl = $(this);\n      let buttonIndex;\n      let groupIndex;\n\n      if ($buttonEl.hasClass('list-button') || $buttonEl.hasClass('item-link')) {\n        buttonIndex = $buttonEl.parents('li').index();\n        groupIndex = $buttonEl.parents('.list').index();\n      } else {\n        buttonIndex = $buttonEl.index();\n        groupIndex = $buttonEl.parents('.actions-group').index();\n      }\n\n      if (typeof groups !== 'undefined') {\n        const button = groups[groupIndex][buttonIndex];\n        if (button.onClick) button.onClick(actions, e);\n        if (actions.params.onClick) actions.params.onClick(actions, e);\n        if (button.close !== false) actions.close();\n      }\n    }\n\n    actions.open = function open(animate) {\n      let convertToPopover = false;\n      const {\n        targetEl,\n        targetX,\n        targetY,\n        targetWidth,\n        targetHeight\n      } = actions.params;\n\n      if (actions.params.convertToPopover && (targetEl || targetX !== undefined && targetY !== undefined)) {\n        // Popover\n        if (actions.params.forceToPopover || app.device.ios && app.device.ipad || app.width >= 768 || app.device.desktop && app.theme === 'aurora') {\n          convertToPopover = true;\n        }\n      }\n\n      if (convertToPopover && actions.popoverHtml) {\n        popover = app.popover.create({\n          content: actions.popoverHtml,\n          backdrop: actions.params.backdrop,\n          targetEl,\n          targetX,\n          targetY,\n          targetWidth,\n          targetHeight\n        });\n        popover.open(animate);\n        popover.once('popoverOpened', () => {\n          popover.$el.find('.list-button, .item-link').each((groupIndex, buttonEl) => {\n            $(buttonEl).on('click', buttonOnClick);\n          });\n        });\n        popover.once('popoverClosed', () => {\n          popover.$el.find('.list-button, .item-link').each((groupIndex, buttonEl) => {\n            $(buttonEl).off('click', buttonOnClick);\n          });\n          Utils.nextTick(() => {\n            popover.destroy();\n            popover = undefined;\n          });\n        });\n      } else {\n        actions.$el = actions.actionsHtml ? $(actions.actionsHtml) : actions.$el;\n        actions.$el[0].f7Modal = actions;\n\n        if (actions.groups) {\n          actions.$el.find('.actions-button').each((groupIndex, buttonEl) => {\n            $(buttonEl).on('click', buttonOnClick);\n          });\n          actions.once('actionsClosed', () => {\n            actions.$el.find('.actions-button').each((groupIndex, buttonEl) => {\n              $(buttonEl).off('click', buttonOnClick);\n            });\n          });\n        }\n\n        actions.el = actions.$el[0];\n        originalOpen.call(actions, animate);\n      }\n\n      return actions;\n    };\n\n    actions.close = function close(animate) {\n      if (popover) {\n        popover.close(animate);\n      } else {\n        originalClose.call(actions, animate);\n      }\n\n      return actions;\n    };\n\n    Utils.extend(actions, {\n      app,\n      $el,\n      el: $el ? $el[0] : undefined,\n      $backdropEl,\n      backdropEl: $backdropEl && $backdropEl[0],\n      type: 'actions'\n    });\n\n    function handleClick(e) {\n      const target = e.target;\n      const $target = $(target);\n      const keyboardOpened = !app.device.desktop && app.device.cordova && (window.Keyboard && window.Keyboard.isVisible || window.cordova.plugins && window.cordova.plugins.Keyboard && window.cordova.plugins.Keyboard.isVisible);\n      if (keyboardOpened) return;\n\n      if ($target.closest(actions.el).length === 0) {\n        if (actions.params.closeByBackdropClick && actions.params.backdrop && actions.backdropEl && actions.backdropEl === target) {\n          actions.close();\n        } else if (actions.params.closeByOutsideClick) {\n          actions.close();\n        }\n      }\n    }\n\n    function onKeyDown(e) {\n      const keyCode = e.keyCode;\n\n      if (keyCode === 27 && actions.params.closeOnEscape) {\n        actions.close();\n      }\n    }\n\n    if (actions.params.closeOnEscape) {\n      actions.on('open', () => {\n        $(document).on('keydown', onKeyDown);\n      });\n      actions.on('close', () => {\n        $(document).off('keydown', onKeyDown);\n      });\n    }\n\n    actions.on('opened', () => {\n      if (actions.params.closeByBackdropClick || actions.params.closeByOutsideClick) {\n        app.on('click', handleClick);\n      }\n    });\n    actions.on('close', () => {\n      if (actions.params.closeByBackdropClick || actions.params.closeByOutsideClick) {\n        app.off('click', handleClick);\n      }\n    });\n\n    if ($el) {\n      $el[0].f7Modal = actions;\n    }\n\n    return actions;\n  }\n\n  render() {\n    const actions = this;\n    if (actions.params.render) return actions.params.render.call(actions, actions);\n    const {\n      groups\n    } = actions;\n    return `\n      <div class=\"actions-modal${actions.params.grid ? ' actions-grid' : ''}\">\n        ${groups.map(group => `<div class=\"actions-group\">\n            ${group.map(button => {\n      const buttonClasses = [`actions-${button.label ? 'label' : 'button'}`];\n      const {\n        color,\n        bg,\n        bold,\n        disabled,\n        label,\n        text,\n        icon\n      } = button;\n      if (color) buttonClasses.push(`color-${color}`);\n      if (bg) buttonClasses.push(`bg-color-${bg}`);\n      if (bold) buttonClasses.push('actions-button-bold');\n      if (disabled) buttonClasses.push('disabled');\n\n      if (label) {\n        return `<div class=\"${buttonClasses.join(' ')}\">${text}</div>`;\n      }\n\n      return `\n                <div class=\"${buttonClasses.join(' ')}\">\n                  ${icon ? `<div class=\"actions-button-media\">${icon}</div>` : ''}\n                  <div class=\"actions-button-text\">${text}</div>\n                </div>`.trim();\n    }).join('')}\n          </div>`).join('')}\n      </div>\n    `.trim();\n  }\n\n  renderPopover() {\n    const actions = this;\n    if (actions.params.renderPopover) return actions.params.renderPopover.call(actions, actions);\n    const {\n      groups\n    } = actions;\n    return `\n      <div class=\"popover popover-from-actions\">\n        <div class=\"popover-inner\">\n          ${groups.map(group => `\n            <div class=\"list\">\n              <ul>\n                ${group.map(button => {\n      const itemClasses = [];\n      const {\n        color,\n        bg,\n        bold,\n        disabled,\n        label,\n        text,\n        icon\n      } = button;\n      if (color) itemClasses.push(`color-${color}`);\n      if (bg) itemClasses.push(`bg-color-${bg}`);\n      if (bold) itemClasses.push('popover-from-actions-bold');\n      if (disabled) itemClasses.push('disabled');\n\n      if (label) {\n        itemClasses.push('popover-from-actions-label');\n        return `<li class=\"${itemClasses.join(' ')}\">${text}</li>`;\n      }\n\n      if (icon) {\n        itemClasses.push('item-link item-content');\n        return `\n                      <li>\n                        <a class=\"${itemClasses.join(' ')}\">\n                          <div class=\"item-media\">\n                            ${icon}\n                          </div>\n                          <div class=\"item-inner\">\n                            <div class=\"item-title\">\n                              ${text}\n                            </div>\n                          </div>\n                        </a>\n                      </li>\n                    `;\n      }\n\n      itemClasses.push('list-button');\n      return `\n                    <li>\n                      <a class=\"${itemClasses.join(' ')}\">${text}</a>\n                    </li>\n                  `;\n    }).join('')}\n              </ul>\n            </div>\n          `).join('')}\n        </div>\n      </div>\n    `.trim();\n  }\n\n}\n\nexport default Actions;","map":null,"metadata":{},"sourceType":"module"}