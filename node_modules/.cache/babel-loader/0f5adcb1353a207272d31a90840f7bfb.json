{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport React from 'react';\nimport Utils from '../utils/utils';\nimport Mixins from '../utils/mixins';\nimport F7NavLeft from './nav-left';\nimport F7NavTitle from './nav-title';\nimport F7NavRight from './nav-right';\nimport __reactComponentDispatchEvent from '../runtime-helpers/react-component-dispatch-event.js';\nimport __reactComponentSlots from '../runtime-helpers/react-component-slots.js';\nimport __reactComponentSetProps from '../runtime-helpers/react-component-set-props.js';\n\nvar F7Navbar = /*#__PURE__*/function (_React$Component) {\n  _inherits(F7Navbar, _React$Component);\n\n  function F7Navbar(props, context) {\n    var _this;\n\n    _classCallCheck(this, F7Navbar);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(F7Navbar).call(this, props, context));\n    _this.__reactRefs = {};\n\n    _this.state = function () {\n      var self = _assertThisInitialized(_this);\n\n      var $f7 = self.$f7;\n\n      if (!$f7) {\n        self.$f7ready(function () {\n          self.setState({\n            _theme: self.$theme\n          });\n        });\n      }\n\n      return {\n        _theme: $f7 ? self.$theme : null\n      };\n    }();\n\n    (function () {\n      Utils.bindMethods(_assertThisInitialized(_this), ['onBackClick', 'onHide', 'onShow', 'onExpand', 'onCollapse']);\n    })();\n\n    return _this;\n  }\n\n  _createClass(F7Navbar, [{\n    key: \"onHide\",\n    value: function onHide(navbarEl) {\n      if (this.eventTargetEl !== navbarEl) return;\n      this.dispatchEvent('navbar:hide navbarHide');\n    }\n  }, {\n    key: \"onShow\",\n    value: function onShow(navbarEl) {\n      if (this.eventTargetEl !== navbarEl) return;\n      this.dispatchEvent('navbar:show navbarShow');\n    }\n  }, {\n    key: \"onExpand\",\n    value: function onExpand(navbarEl) {\n      if (this.eventTargetEl !== navbarEl) return;\n      this.dispatchEvent('navbar:expand navbarExpand');\n    }\n  }, {\n    key: \"onCollapse\",\n    value: function onCollapse(navbarEl) {\n      if (this.eventTargetEl !== navbarEl) return;\n      this.dispatchEvent('navbar:collapse navbarCollapse');\n    }\n  }, {\n    key: \"hide\",\n    value: function hide(animate) {\n      var self = this;\n      if (!self.$f7) return;\n      self.$f7.navbar.hide(self.refs.el, animate);\n    }\n  }, {\n    key: \"show\",\n    value: function show(animate) {\n      var self = this;\n      if (!self.$f7) return;\n      self.$f7.navbar.show(self.refs.el, animate);\n    }\n  }, {\n    key: \"size\",\n    value: function size() {\n      var self = this;\n      if (!self.$f7) return;\n      self.$f7.navbar.size(self.refs.el);\n    }\n  }, {\n    key: \"onBackClick\",\n    value: function onBackClick(event) {\n      this.dispatchEvent('back-click backClick click:back clickBack', event);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var self = this;\n      var props = self.props;\n      var backLink = props.backLink,\n          backLinkUrl = props.backLinkUrl,\n          backLinkForce = props.backLinkForce,\n          backLinkShowText = props.backLinkShowText,\n          sliding = props.sliding,\n          title = props.title,\n          subtitle = props.subtitle,\n          innerClass = props.innerClass,\n          innerClassName = props.innerClassName,\n          className = props.className,\n          id = props.id,\n          style = props.style,\n          hidden = props.hidden,\n          noShadow = props.noShadow,\n          noHairline = props.noHairline,\n          large = props.large,\n          largeTransparent = props.largeTransparent,\n          titleLarge = props.titleLarge;\n      var theme = self.state.theme;\n      var leftEl;\n      var titleEl;\n      var rightEl;\n      var titleLargeEl;\n      var addLeftTitleClass = theme && theme.ios && self.$f7 && !self.$f7.params.navbar.iosCenterTitle;\n      var addCenterTitleClass = theme && theme.md && self.$f7 && self.$f7.params.navbar.mdCenterTitle || theme && theme.aurora && self.$f7 && self.$f7.params.navbar.auroraCenterTitle;\n      var slots = self.slots;\n      var classes = Utils.classNames(className, 'navbar', {\n        'navbar-hidden': hidden,\n        'navbar-large': large,\n        'navbar-large-transparent': largeTransparent\n      }, Mixins.colorClasses(props));\n\n      if (backLink || slots['nav-left'] || slots.left) {\n        leftEl = React.createElement(F7NavLeft, {\n          backLink: backLink,\n          backLinkUrl: backLinkUrl,\n          backLinkForce: backLinkForce,\n          backLinkShowText: backLinkShowText,\n          onBackClick: self.onBackClick\n        }, slots['nav-left'], slots.left);\n      }\n\n      if (title || subtitle || slots.title) {\n        titleEl = React.createElement(F7NavTitle, {\n          title: title,\n          subtitle: subtitle\n        }, slots.title);\n      }\n\n      if (slots['nav-right'] || slots.right) {\n        rightEl = React.createElement(F7NavRight, null, slots['nav-right'], slots.right);\n      }\n\n      var largeTitle = titleLarge;\n      if (!largeTitle && large && title) largeTitle = title;\n\n      if (largeTitle || slots['title-large']) {\n        titleLargeEl = React.createElement('div', {\n          className: 'title-large'\n        }, React.createElement('div', {\n          className: 'title-large-text'\n        }, largeTitle || '', this.slots['title-large']));\n      }\n\n      var innerEl = React.createElement('div', {\n        className: Utils.classNames('navbar-inner', innerClass, innerClassName, {\n          sliding: sliding,\n          'no-shadow': noShadow,\n          'no-hairline': noHairline,\n          'navbar-inner-left-title': addLeftTitleClass,\n          'navbar-inner-centered-title': addCenterTitleClass\n        })\n      }, leftEl, titleEl, rightEl, titleLargeEl, this.slots['default']);\n      return React.createElement('div', {\n        ref: function ref(__reactNode) {\n          _this2.__reactRefs['el'] = __reactNode;\n        },\n        id: id,\n        style: style,\n        className: classes\n      }, React.createElement('div', {\n        className: 'navbar-bg'\n      }), this.slots['before-inner'], innerEl, this.slots['after-inner']);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var self = this;\n      var el = self.refs.el;\n      if (!el || !self.$f7) return;\n      var f7 = self.$f7;\n      f7.off('navbarShow', self.onShow);\n      f7.off('navbarHide', self.onHide);\n      f7.off('navbarCollapse', self.onCollapse);\n      f7.off('navbarExpand', self.onExpand);\n      self.eventTargetEl = null;\n      delete self.eventTargetEl;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var self = this;\n      if (!self.$f7) return;\n      var el = self.refs.el;\n      self.$f7.navbar.size(el);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var self = this;\n      var el = self.refs.el;\n      if (!el) return;\n      self.$f7ready(function (f7) {\n        self.eventTargetEl = el;\n        f7.on('navbarShow', self.onShow);\n        f7.on('navbarHide', self.onHide);\n        f7.on('navbarCollapse', self.onCollapse);\n        f7.on('navbarExpand', self.onExpand);\n      });\n    }\n  }, {\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(events) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return __reactComponentDispatchEvent.apply(void 0, [this, events].concat(args));\n    }\n  }, {\n    key: \"slots\",\n    get: function get() {\n      return __reactComponentSlots(this.props);\n    }\n  }, {\n    key: \"refs\",\n    get: function get() {\n      return this.__reactRefs;\n    },\n    set: function set(refs) {}\n  }]);\n\n  return F7Navbar;\n}(React.Component);\n\n__reactComponentSetProps(F7Navbar, Object.assign({\n  id: [String, Number],\n  className: String,\n  style: Object,\n  backLink: [Boolean, String],\n  backLinkUrl: String,\n  backLinkForce: Boolean,\n  backLinkShowText: {\n    type: Boolean,\n    default: undefined\n  },\n  sliding: {\n    type: Boolean,\n    default: true\n  },\n  title: String,\n  subtitle: String,\n  hidden: Boolean,\n  noShadow: Boolean,\n  noHairline: Boolean,\n  innerClass: String,\n  innerClassName: String,\n  large: Boolean,\n  largeTransparent: Boolean,\n  titleLarge: String\n}, Mixins.colorProps));\n\nF7Navbar.displayName = 'f7-navbar';\nexport default F7Navbar;","map":null,"metadata":{},"sourceType":"module"}