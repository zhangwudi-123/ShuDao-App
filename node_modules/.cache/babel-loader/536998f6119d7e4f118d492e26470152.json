{"ast":null,"code":"import React from 'react';\nimport { withNativeProps } from '../../utils/native-props';\nimport { mergeProps } from '../../utils/with-default-props';\nimport classNames from 'classnames';\nimport Popup from '../popup';\nimport SafeArea from '../safe-area';\nimport { renderImperatively } from '../../utils/render-imperatively';\nconst classPrefix = `adm-action-sheet`;\nconst defaultProps = {\n  visible: false,\n  actions: [],\n  cancelText: '',\n  closeOnAction: false,\n  closeOnMaskClick: true,\n  safeArea: true,\n  destroyOnClose: false,\n  forceRender: false\n};\nexport const ActionSheet = p => {\n  const props = mergeProps(defaultProps, p);\n  return React.createElement(Popup, {\n    visible: props.visible,\n    onMaskClick: () => {\n      var _a, _b;\n\n      (_a = props.onMaskClick) === null || _a === void 0 ? void 0 : _a.call(props);\n\n      if (props.closeOnMaskClick) {\n        (_b = props.onClose) === null || _b === void 0 ? void 0 : _b.call(props);\n      }\n    },\n    afterClose: props.afterClose,\n    className: classNames(`${classPrefix}-popup`, props.popupClassName),\n    style: props.popupStyle,\n    getContainer: props.getContainer,\n    destroyOnClose: props.destroyOnClose,\n    forceRender: props.forceRender\n  }, withNativeProps(props, React.createElement(\"div\", {\n    className: classPrefix\n  }, props.extra && React.createElement(\"div\", {\n    className: `${classPrefix}-extra`\n  }, props.extra), React.createElement(\"div\", {\n    className: `${classPrefix}-button-list`\n  }, props.actions.map((action, index) => React.createElement(\"div\", {\n    key: action.key,\n    className: `${classPrefix}-button-item-wrapper`\n  }, React.createElement(\"a\", {\n    className: classNames('adm-plain-anchor', `${classPrefix}-button-item`, {\n      [`${classPrefix}-button-item-danger`]: action.danger,\n      [`${classPrefix}-button-item-disabled`]: action.disabled,\n      [`${classPrefix}-button-item-bold`]: action.bold\n    }),\n    onClick: () => {\n      var _a, _b, _c;\n\n      (_a = action.onClick) === null || _a === void 0 ? void 0 : _a.call(action);\n      (_b = props.onAction) === null || _b === void 0 ? void 0 : _b.call(props, action, index);\n\n      if (props.closeOnAction) {\n        (_c = props.onClose) === null || _c === void 0 ? void 0 : _c.call(props);\n      }\n    },\n    role: 'option',\n    \"aria-disabled\": action.disabled\n  }, React.createElement(\"div\", {\n    className: `${classPrefix}-button-item-name`\n  }, action.text), action.description && React.createElement(\"div\", {\n    className: `${classPrefix}-button-item-description`\n  }, action.description))))), props.cancelText && React.createElement(\"div\", {\n    className: `${classPrefix}-cancel`,\n    role: 'option',\n    \"aria-label\": props.cancelText\n  }, React.createElement(\"div\", {\n    className: `${classPrefix}-button-item-wrapper`\n  }, React.createElement(\"a\", {\n    className: classNames('adm-plain-anchor', `${classPrefix}-button-item`),\n    onClick: () => {\n      var _a;\n\n      (_a = props.onClose) === null || _a === void 0 ? void 0 : _a.call(props);\n    }\n  }, React.createElement(\"div\", {\n    className: `${classPrefix}-button-item-name`\n  }, props.cancelText)))), props.safeArea && React.createElement(SafeArea, {\n    position: 'bottom'\n  }))));\n};\nexport function showActionSheet(props) {\n  return renderImperatively(React.createElement(ActionSheet, Object.assign({}, props)));\n}","map":null,"metadata":{},"sourceType":"module"}