{"ast":null,"code":"import React, { useRef, useEffect, useState } from 'react';\nimport { useSpring, animated, to } from '@react-spring/web';\nimport { useDrag } from '@use-gesture/react';\nimport { mergeProps } from '../../utils/with-default-props';\nimport { withNativeProps } from '../../utils/native-props';\nconst classPrefix = `adm-floating-bubble`;\nconst defaultProps = {\n  axis: 'y',\n  defaultOffset: {\n    x: 0,\n    y: 0\n  }\n};\nexport const FloatingBubble = p => {\n  const props = mergeProps(defaultProps, p);\n  const boundaryRef = useRef(null);\n  const buttonRef = useRef(null);\n  const [innerValue, setInnerValue] = useState(props.offset === undefined ? props.defaultOffset : props.offset);\n  useEffect(() => {\n    if (props.offset === undefined) return;\n    api.start({\n      x: props.offset.x,\n      y: props.offset.y\n    });\n  }, [props.offset]);\n  /**\n   * memoize the `to` function\n   * inside a component that renders frequently\n   * to prevent an unintended restart\n   */\n\n  const [{\n    x,\n    y,\n    opacity\n  }, api] = useSpring(() => ({\n    x: innerValue.x,\n    y: innerValue.y,\n    opacity: 1\n  }));\n  const bind = useDrag(state => {\n    var _a;\n\n    let nextX = state.offset[0];\n    let nextY = state.offset[1];\n\n    if (state.last && props.magnetic) {\n      const boundary = boundaryRef.current;\n      const button = buttonRef.current;\n      if (!boundary || !button) return;\n      const boundaryRect = boundary.getBoundingClientRect();\n      const buttonRect = button.getBoundingClientRect();\n\n      if (props.magnetic === 'x') {\n        const compensation = x.goal - x.get();\n        const leftDistance = buttonRect.left + compensation - boundaryRect.left;\n        const rightDistance = boundaryRect.right - (buttonRect.right + compensation);\n\n        if (rightDistance <= leftDistance) {\n          nextX += rightDistance;\n        } else {\n          nextX -= leftDistance;\n        }\n      } else if (props.magnetic === 'y') {\n        const compensation = y.goal - y.get();\n        const topDistance = buttonRect.top + compensation - boundaryRect.top;\n        const bottomDistance = boundaryRect.bottom - (buttonRect.bottom + compensation);\n\n        if (bottomDistance <= topDistance) {\n          nextY += bottomDistance;\n        } else {\n          nextY -= topDistance;\n        }\n      }\n    }\n\n    const nextOffest = {\n      x: nextX,\n      y: nextY\n    };\n\n    if (props.offset === undefined) {\n      // Uncontrolled mode\n      api.start(nextOffest);\n    } else {\n      setInnerValue(nextOffest);\n    }\n\n    (_a = props.onOffsetChange) === null || _a === void 0 ? void 0 : _a.call(props, nextOffest); // active status\n\n    api.start({\n      opacity: state.active ? 0.8 : 1\n    });\n  }, {\n    axis: props.axis === 'xy' ? undefined : props.axis,\n    pointer: {\n      touch: true\n    },\n    // the component won't trigger drag logic if the user just clicked on the component.\n    filterTaps: true,\n    // set constraints to the user gesture\n    bounds: boundaryRef,\n    from: () => [x.get(), y.get()]\n  });\n  return withNativeProps(props, React.createElement(\"div\", {\n    className: classPrefix\n  }, React.createElement(\"div\", {\n    className: `${classPrefix}-boundary-outer`\n  }, React.createElement(\"div\", {\n    className: `${classPrefix}-boundary`,\n    ref: boundaryRef\n  })), React.createElement(animated.div, Object.assign({}, bind(), {\n    style: {\n      opacity,\n      transform: to([x, y], (x, y) => `translate(${x}px, ${y}px)`)\n    },\n    onClick: props.onClick,\n    className: `${classPrefix}-button`,\n    ref: buttonRef\n  }), props.children)));\n};","map":null,"metadata":{},"sourceType":"module"}