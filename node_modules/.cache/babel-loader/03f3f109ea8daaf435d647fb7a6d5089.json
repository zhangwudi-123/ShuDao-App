{"ast":null,"code":"import { __assign, __read, __values } from \"tslib\";\nimport 'intersection-observer';\nimport { useState } from 'react';\nimport { getTargetElement } from '../utils/domTarget';\nimport useEffectWithTarget from '../utils/useEffectWithTarget';\n\nfunction useInViewport(target, options) {\n  var _a = __read(useState(), 2),\n      state = _a[0],\n      setState = _a[1];\n\n  var _b = __read(useState(), 2),\n      ratio = _b[0],\n      setRatio = _b[1];\n\n  useEffectWithTarget(function () {\n    var el = getTargetElement(target);\n\n    if (!el) {\n      return;\n    }\n\n    var observer = new IntersectionObserver(function (entries) {\n      var e_1, _a;\n\n      try {\n        for (var entries_1 = __values(entries), entries_1_1 = entries_1.next(); !entries_1_1.done; entries_1_1 = entries_1.next()) {\n          var entry = entries_1_1.value;\n          setRatio(entry.intersectionRatio);\n          setState(entry.isIntersecting);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (entries_1_1 && !entries_1_1.done && (_a = entries_1.return)) _a.call(entries_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }, __assign(__assign({}, options), {\n      root: getTargetElement(options === null || options === void 0 ? void 0 : options.root)\n    }));\n    observer.observe(el);\n    return function () {\n      observer.disconnect();\n    };\n  }, [options === null || options === void 0 ? void 0 : options.rootMargin, options === null || options === void 0 ? void 0 : options.threshold], target);\n  return [state, ratio];\n}\n\nexport default useInViewport;","map":null,"metadata":{},"sourceType":"module"}