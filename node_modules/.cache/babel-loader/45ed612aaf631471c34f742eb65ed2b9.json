{"ast":null,"code":"import { __read, __spreadArray } from \"tslib\";\nimport throttle from 'lodash/throttle';\nimport { useEffect, useRef } from 'react';\n\nvar useThrottlePlugin = function (fetchInstance, _a) {\n  var throttleWait = _a.throttleWait,\n      throttleLeading = _a.throttleLeading,\n      throttleTrailing = _a.throttleTrailing;\n  var throttledRef = useRef();\n  var options = {};\n\n  if (throttleLeading !== undefined) {\n    options.leading = throttleLeading;\n  }\n\n  if (throttleTrailing !== undefined) {\n    options.trailing = throttleTrailing;\n  }\n\n  useEffect(function () {\n    if (throttleWait) {\n      var _originRunAsync_1 = fetchInstance.runAsync.bind(fetchInstance);\n\n      throttledRef.current = throttle(function (callback) {\n        callback();\n      }, throttleWait, options); // throttle runAsync should be promise\n      // https://github.com/lodash/lodash/issues/4400#issuecomment-834800398\n\n      fetchInstance.runAsync = function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        return new Promise(function (resolve, reject) {\n          var _a;\n\n          (_a = throttledRef.current) === null || _a === void 0 ? void 0 : _a.call(throttledRef, function () {\n            _originRunAsync_1.apply(void 0, __spreadArray([], __read(args), false)).then(resolve).catch(reject);\n          });\n        });\n      };\n\n      return function () {\n        var _a;\n\n        fetchInstance.runAsync = _originRunAsync_1;\n        (_a = throttledRef.current) === null || _a === void 0 ? void 0 : _a.cancel();\n      };\n    }\n  }, [throttleWait, throttleLeading, throttleTrailing]);\n\n  if (!throttleWait) {\n    return {};\n  }\n\n  return {\n    onCancel: function () {\n      var _a;\n\n      (_a = throttledRef.current) === null || _a === void 0 ? void 0 : _a.cancel();\n    }\n  };\n};\n\nexport default useThrottlePlugin;","map":null,"metadata":{},"sourceType":"module"}