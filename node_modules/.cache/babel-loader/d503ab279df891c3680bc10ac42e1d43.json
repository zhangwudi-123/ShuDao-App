{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport React from 'react';\nimport Utils from '../utils/utils';\nimport Mixins from '../utils/mixins';\nimport F7Badge from './badge';\nimport F7Icon from './icon';\nimport __reactComponentWatch from '../runtime-helpers/react-component-watch.js';\nimport __reactComponentDispatchEvent from '../runtime-helpers/react-component-dispatch-event.js';\nimport __reactComponentSlots from '../runtime-helpers/react-component-slots.js';\nimport __reactComponentSetProps from '../runtime-helpers/react-component-set-props.js';\n\nvar F7Link = /*#__PURE__*/function (_React$Component) {\n  _inherits(F7Link, _React$Component);\n\n  function F7Link(props, context) {\n    var _this;\n\n    _classCallCheck(this, F7Link);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(F7Link).call(this, props, context));\n    _this.__reactRefs = {};\n\n    _this.state = function () {\n      return {\n        isTabbarLabel: props.tabbarLabel\n      };\n    }();\n\n    (function () {\n      Utils.bindMethods(_assertThisInitialized(_this), ['onClick']);\n    })();\n\n    return _this;\n  }\n\n  _createClass(F7Link, [{\n    key: \"onClick\",\n    value: function onClick(event) {\n      this.dispatchEvent('click', event);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var self = this;\n      var props = self.props;\n      var text = props.text,\n          badge = props.badge,\n          badgeColor = props.badgeColor,\n          iconOnly = props.iconOnly,\n          iconBadge = props.iconBadge,\n          icon = props.icon,\n          iconColor = props.iconColor,\n          iconSize = props.iconSize,\n          iconMaterial = props.iconMaterial,\n          iconF7 = props.iconF7,\n          iconMd = props.iconMd,\n          iconIos = props.iconIos,\n          iconAurora = props.iconAurora,\n          id = props.id,\n          style = props.style;\n      var defaultSlots = self.slots.default;\n      var iconEl;\n      var textEl;\n      var badgeEl;\n      var iconBadgeEl;\n\n      if (text) {\n        if (badge) badgeEl = React.createElement(F7Badge, {\n          color: badgeColor\n        }, badge);\n        textEl = React.createElement('span', {\n          className: self.state.isTabbarLabel ? 'tabbar-label' : ''\n        }, text, badgeEl);\n      }\n\n      if (icon || iconMaterial || iconF7 || iconMd || iconIos || iconAurora) {\n        if (iconBadge) {\n          iconBadgeEl = React.createElement(F7Badge, {\n            color: badgeColor\n          }, iconBadge);\n        }\n\n        iconEl = React.createElement(F7Icon, {\n          material: iconMaterial,\n          f7: iconF7,\n          icon: icon,\n          md: iconMd,\n          ios: iconIos,\n          aurora: iconAurora,\n          color: iconColor,\n          size: iconSize\n        }, iconBadgeEl);\n      }\n\n      if (iconOnly || !text && defaultSlots && defaultSlots.length === 0 || !text && !defaultSlots) {\n        self.iconOnlyComputed = true;\n      } else {\n        self.iconOnlyComputed = false;\n      }\n\n      return React.createElement('a', Object.assign({\n        ref: function ref(__reactNode) {\n          _this2.__reactRefs['el'] = __reactNode;\n        },\n        id: id,\n        style: style,\n        className: self.classes\n      }, self.attrs), iconEl, textEl, defaultSlots);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var self = this;\n      var el = self.refs.el;\n      el.removeEventListener('click', self.onClick);\n      delete el.f7RouteProps;\n\n      if (self.f7SmartSelect && self.f7SmartSelect.destroy) {\n        self.f7SmartSelect.destroy();\n      }\n\n      if (self.f7Tooltip && self.f7Tooltip.destroy) {\n        self.f7Tooltip.destroy();\n        self.f7Tooltip = null;\n        delete self.f7Tooltip;\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this3 = this;\n\n      __reactComponentWatch(this, 'props.tooltip', prevProps, prevState, function (newText) {\n        var self = _this3;\n\n        if (!newText && self.f7Tooltip) {\n          self.f7Tooltip.destroy();\n          self.f7Tooltip = null;\n          delete self.f7Tooltip;\n          return;\n        }\n\n        if (newText && !self.f7Tooltip && self.$f7) {\n          self.f7Tooltip = self.$f7.tooltip.create({\n            targetEl: self.refs.el,\n            text: newText\n          });\n          return;\n        }\n\n        if (!newText || !self.f7Tooltip) return;\n        self.f7Tooltip.setText(newText);\n      });\n\n      var self = this;\n      var el = self.refs.el;\n      var routeProps = self.props.routeProps;\n\n      if (routeProps) {\n        el.f7RouteProps = routeProps;\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var self = this;\n      var el = self.refs.el;\n      el.addEventListener('click', self.onClick);\n      var _self$props = self.props,\n          tabbarLabel = _self$props.tabbarLabel,\n          tabLink = _self$props.tabLink,\n          tooltip = _self$props.tooltip,\n          smartSelect = _self$props.smartSelect,\n          smartSelectParams = _self$props.smartSelectParams,\n          routeProps = _self$props.routeProps;\n      var isTabbarLabel = false;\n\n      if (tabbarLabel || (tabLink || tabLink === '') && self.$$(el).parents('.tabbar-labels').length) {\n        isTabbarLabel = true;\n      }\n\n      self.setState({\n        isTabbarLabel: isTabbarLabel\n      });\n      if (routeProps) el.f7RouteProps = routeProps;\n      self.$f7ready(function (f7) {\n        if (smartSelect) {\n          var ssParams = Utils.extend({\n            el: el\n          }, smartSelectParams || {});\n          self.f7SmartSelect = f7.smartSelect.create(ssParams);\n        }\n\n        if (tooltip) {\n          self.f7Tooltip = f7.tooltip.create({\n            targetEl: el,\n            text: tooltip\n          });\n        }\n      });\n    }\n  }, {\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(events) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return __reactComponentDispatchEvent.apply(void 0, [this, events].concat(args));\n    }\n  }, {\n    key: \"attrs\",\n    get: function get() {\n      var self = this;\n      var props = self.props;\n      var href = props.href,\n          target = props.target,\n          tabLink = props.tabLink;\n      var hrefComputed = href;\n      if (href === true) hrefComputed = '#';\n      if (href === false) hrefComputed = undefined;\n      return Utils.extend({\n        href: hrefComputed,\n        target: target,\n        'data-tab': Utils.isStringProp(tabLink) && tabLink || undefined\n      }, Mixins.linkRouterAttrs(props), Mixins.linkActionsAttrs(props));\n    }\n  }, {\n    key: \"classes\",\n    get: function get() {\n      var self = this;\n      var props = self.props;\n      var tabLink = props.tabLink,\n          tabLinkActive = props.tabLinkActive,\n          noLinkClass = props.noLinkClass,\n          smartSelect = props.smartSelect,\n          className = props.className;\n      return Utils.classNames(className, {\n        link: !(noLinkClass || self.state.isTabbarLabel),\n        'icon-only': self.iconOnlyComputed,\n        'tab-link': tabLink || tabLink === '',\n        'tab-link-active': tabLinkActive,\n        'smart-select': smartSelect\n      }, Mixins.colorClasses(props), Mixins.linkRouterClasses(props), Mixins.linkActionsClasses(props));\n    }\n  }, {\n    key: \"slots\",\n    get: function get() {\n      return __reactComponentSlots(this.props);\n    }\n  }, {\n    key: \"refs\",\n    get: function get() {\n      return this.__reactRefs;\n    },\n    set: function set(refs) {}\n  }]);\n\n  return F7Link;\n}(React.Component);\n\n__reactComponentSetProps(F7Link, Object.assign({\n  id: [String, Number],\n  className: String,\n  style: Object,\n  noLinkClass: Boolean,\n  text: String,\n  tabLink: [Boolean, String],\n  tabLinkActive: Boolean,\n  tabbarLabel: Boolean,\n  iconOnly: Boolean,\n  badge: [String, Number],\n  badgeColor: [String],\n  iconBadge: [String, Number],\n  href: {\n    type: [String, Boolean],\n    default: '#'\n  },\n  target: String,\n  tooltip: String,\n  smartSelect: Boolean,\n  smartSelectParams: Object\n}, Mixins.colorProps, {}, Mixins.linkIconProps, {}, Mixins.linkRouterProps, {}, Mixins.linkActionsProps));\n\nF7Link.displayName = 'f7-link';\nexport default F7Link;","map":null,"metadata":{},"sourceType":"module"}