{"ast":null,"code":"/* eslint-disable no-nested-ternary */\nimport { window, document } from 'ssr-window';\nimport $ from 'dom7';\nimport Support from '../../utils/support';\nimport Device from '../../utils/device';\n\nfunction initTouch() {\n  const app = this;\n  const params = app.params.touch;\n  const useRipple = params[`${app.theme}TouchRipple`];\n\n  if (Device.ios && Device.webView) {\n    // Strange hack required for iOS 8 webview to work on inputs\n    window.addEventListener('touchstart', () => {});\n  }\n\n  let touchStartX;\n  let touchStartY;\n  let targetElement;\n  let isMoved;\n  let tapHoldFired;\n  let tapHoldTimeout;\n  let preventClick;\n  let activableElement;\n  let activeTimeout;\n  let rippleWave;\n  let rippleTarget;\n  let rippleTimeout;\n\n  function findActivableElement(el) {\n    const target = $(el);\n    const parents = target.parents(params.activeStateElements);\n\n    if (target.closest('.no-active-state').length) {\n      return null;\n    }\n\n    let activable;\n\n    if (target.is(params.activeStateElements)) {\n      activable = target;\n    }\n\n    if (parents.length > 0) {\n      activable = activable ? activable.add(parents) : parents;\n    }\n\n    if (activable && activable.length > 1) {\n      const newActivable = [];\n      let preventPropagation;\n\n      for (let i = 0; i < activable.length; i += 1) {\n        if (!preventPropagation) {\n          newActivable.push(activable[i]);\n\n          if (activable.eq(i).hasClass('prevent-active-state-propagation') || activable.eq(i).hasClass('no-active-state-propagation')) {\n            preventPropagation = true;\n          }\n        }\n      }\n\n      activable = $(newActivable);\n    }\n\n    return activable || target;\n  }\n\n  function isInsideScrollableView(el) {\n    const pageContent = el.parents('.page-content');\n    return pageContent.length > 0;\n  }\n\n  function addActive() {\n    if (!activableElement) return;\n    activableElement.addClass('active-state');\n  }\n\n  function removeActive() {\n    if (!activableElement) return;\n    activableElement.removeClass('active-state');\n    activableElement = null;\n  } // Ripple handlers\n\n\n  function findRippleElement(el) {\n    const rippleElements = params.touchRippleElements;\n    const $el = $(el);\n\n    if ($el.is(rippleElements)) {\n      if ($el.hasClass('no-ripple')) {\n        return false;\n      }\n\n      return $el;\n    }\n\n    if ($el.parents(rippleElements).length > 0) {\n      const rippleParent = $el.parents(rippleElements).eq(0);\n\n      if (rippleParent.hasClass('no-ripple')) {\n        return false;\n      }\n\n      return rippleParent;\n    }\n\n    return false;\n  }\n\n  function createRipple($el, x, y) {\n    if (!$el) return;\n    rippleWave = app.touchRipple.create($el, x, y);\n  }\n\n  function removeRipple() {\n    if (!rippleWave) return;\n    rippleWave.remove();\n    rippleWave = undefined;\n    rippleTarget = undefined;\n  }\n\n  function rippleTouchStart(el) {\n    rippleTarget = findRippleElement(el);\n\n    if (!rippleTarget || rippleTarget.length === 0) {\n      rippleTarget = undefined;\n      return;\n    }\n\n    const inScrollable = isInsideScrollableView(rippleTarget);\n\n    if (!inScrollable) {\n      removeRipple();\n      createRipple(rippleTarget, touchStartX, touchStartY);\n    } else {\n      clearTimeout(rippleTimeout);\n      rippleTimeout = setTimeout(() => {\n        removeRipple();\n        createRipple(rippleTarget, touchStartX, touchStartY);\n      }, 80);\n    }\n  }\n\n  function rippleTouchMove() {\n    clearTimeout(rippleTimeout);\n    removeRipple();\n  }\n\n  function rippleTouchEnd() {\n    if (!rippleWave && rippleTarget && !isMoved) {\n      clearTimeout(rippleTimeout);\n      createRipple(rippleTarget, touchStartX, touchStartY);\n      setTimeout(removeRipple, 0);\n    } else {\n      removeRipple();\n    }\n  } // Mouse Handlers\n\n\n  function handleMouseDown(e) {\n    const $activableEl = findActivableElement(e.target);\n\n    if ($activableEl) {\n      $activableEl.addClass('active-state');\n\n      if ('which' in e && e.which === 3) {\n        setTimeout(() => {\n          $('.active-state').removeClass('active-state');\n        }, 0);\n      }\n    }\n\n    if (useRipple) {\n      touchStartX = e.pageX;\n      touchStartY = e.pageY;\n      rippleTouchStart(e.target, e.pageX, e.pageY);\n    }\n  }\n\n  function handleMouseMove() {\n    $('.active-state').removeClass('active-state');\n\n    if (useRipple) {\n      rippleTouchMove();\n    }\n  }\n\n  function handleMouseUp() {\n    $('.active-state').removeClass('active-state');\n\n    if (useRipple) {\n      rippleTouchEnd();\n    }\n  }\n\n  function handleTouchCancel() {\n    targetElement = null; // Remove Active State\n\n    clearTimeout(activeTimeout);\n    clearTimeout(tapHoldTimeout);\n\n    if (params.activeState) {\n      removeActive();\n    } // Remove Ripple\n\n\n    if (useRipple) {\n      rippleTouchEnd();\n    }\n  }\n\n  function handleTouchStart(e) {\n    isMoved = false;\n    tapHoldFired = false;\n    preventClick = false;\n\n    if (e.targetTouches.length > 1) {\n      if (activableElement) removeActive();\n      return true;\n    }\n\n    if (e.touches.length > 1 && activableElement) {\n      removeActive();\n    }\n\n    if (params.tapHold) {\n      if (tapHoldTimeout) clearTimeout(tapHoldTimeout);\n      tapHoldTimeout = setTimeout(() => {\n        if (e && e.touches && e.touches.length > 1) return;\n        tapHoldFired = true;\n        e.preventDefault();\n        preventClick = true;\n        $(e.target).trigger('taphold', e);\n        app.emit('taphold', e);\n      }, params.tapHoldDelay);\n    }\n\n    targetElement = e.target;\n    touchStartX = e.targetTouches[0].pageX;\n    touchStartY = e.targetTouches[0].pageY;\n\n    if (params.activeState) {\n      activableElement = findActivableElement(targetElement);\n\n      if (activableElement && !isInsideScrollableView(activableElement)) {\n        addActive();\n      } else if (activableElement) {\n        activeTimeout = setTimeout(addActive, 80);\n      }\n    }\n\n    if (useRipple) {\n      rippleTouchStart(targetElement, touchStartX, touchStartY);\n    }\n\n    return true;\n  }\n\n  function handleTouchMove(e) {\n    let touch;\n    let distance;\n\n    if (e.type === 'touchmove') {\n      touch = e.targetTouches[0];\n      distance = params.touchClicksDistanceThreshold;\n    }\n\n    if (distance && touch) {\n      const pageX = touch.pageX;\n      const pageY = touch.pageY;\n\n      if (Math.abs(pageX - touchStartX) > distance || Math.abs(pageY - touchStartY) > distance) {\n        isMoved = true;\n      }\n    } else {\n      isMoved = true;\n    }\n\n    if (isMoved) {\n      preventClick = true;\n\n      if (params.tapHold) {\n        clearTimeout(tapHoldTimeout);\n      }\n\n      if (params.activeState) {\n        clearTimeout(activeTimeout);\n        removeActive();\n      }\n\n      if (useRipple) {\n        rippleTouchMove();\n      }\n    }\n  }\n\n  function handleTouchEnd(e) {\n    clearTimeout(activeTimeout);\n    clearTimeout(tapHoldTimeout);\n\n    if (document.activeElement === e.target) {\n      if (params.activeState) removeActive();\n\n      if (useRipple) {\n        rippleTouchEnd();\n      }\n\n      return true;\n    }\n\n    if (params.activeState) {\n      addActive();\n      setTimeout(removeActive, 0);\n    }\n\n    if (useRipple) {\n      rippleTouchEnd();\n    }\n\n    if (params.tapHoldPreventClicks && tapHoldFired || preventClick) {\n      if (e.cancelable) e.preventDefault();\n      preventClick = true;\n      return false;\n    }\n\n    return true;\n  }\n\n  function handleClick(e) {\n    const isOverswipe = e && e.detail && e.detail === 'f7Overswipe';\n    let localPreventClick = preventClick;\n\n    if (targetElement && e.target !== targetElement) {\n      if (isOverswipe) {\n        localPreventClick = false;\n      } else {\n        localPreventClick = true;\n      }\n    }\n\n    if (params.tapHold && params.tapHoldPreventClicks && tapHoldFired) {\n      localPreventClick = true;\n    }\n\n    if (localPreventClick) {\n      e.stopImmediatePropagation();\n      e.stopPropagation();\n      e.preventDefault();\n    }\n\n    if (params.tapHold) {\n      tapHoldTimeout = setTimeout(() => {\n        tapHoldFired = false;\n      }, Device.ios || Device.androidChrome ? 100 : 400);\n    }\n\n    preventClick = false;\n    targetElement = null;\n    return !localPreventClick;\n  }\n\n  function emitAppTouchEvent(name, e) {\n    app.emit({\n      events: name,\n      data: [e]\n    });\n  }\n\n  function appClick(e) {\n    emitAppTouchEvent('click', e);\n  }\n\n  function appTouchStartActive(e) {\n    emitAppTouchEvent('touchstart touchstart:active', e);\n  }\n\n  function appTouchMoveActive(e) {\n    emitAppTouchEvent('touchmove touchmove:active', e);\n  }\n\n  function appTouchEndActive(e) {\n    emitAppTouchEvent('touchend touchend:active', e);\n  }\n\n  function appTouchStartPassive(e) {\n    emitAppTouchEvent('touchstart:passive', e);\n  }\n\n  function appTouchMovePassive(e) {\n    emitAppTouchEvent('touchmove:passive', e);\n  }\n\n  function appTouchEndPassive(e) {\n    emitAppTouchEvent('touchend:passive', e);\n  }\n\n  function appGestureActive(e) {\n    emitAppTouchEvent(`${e.type} ${e.type}:active`, e);\n  }\n\n  function appGesturePassive(e) {\n    emitAppTouchEvent(`${e.type}:passive`, e);\n  }\n\n  const passiveListener = Support.passiveListener ? {\n    passive: true\n  } : false;\n  const activeListener = Support.passiveListener ? {\n    passive: false\n  } : false;\n  document.addEventListener('click', appClick, true);\n\n  if (Support.passiveListener) {\n    document.addEventListener(app.touchEvents.start, appTouchStartActive, activeListener);\n    document.addEventListener(app.touchEvents.move, appTouchMoveActive, activeListener);\n    document.addEventListener(app.touchEvents.end, appTouchEndActive, activeListener);\n    document.addEventListener(app.touchEvents.start, appTouchStartPassive, passiveListener);\n    document.addEventListener(app.touchEvents.move, appTouchMovePassive, passiveListener);\n    document.addEventListener(app.touchEvents.end, appTouchEndPassive, passiveListener);\n\n    if (Support.touch && Support.gestures) {\n      document.addEventListener('gesturestart', appGestureActive, activeListener);\n      document.addEventListener('gesturechange', appGestureActive, activeListener);\n      document.addEventListener('gestureend', appGestureActive, activeListener);\n      document.addEventListener('gesturestart', appGesturePassive, passiveListener);\n      document.addEventListener('gesturechange', appGesturePassive, passiveListener);\n      document.addEventListener('gestureend', appGesturePassive, passiveListener);\n    }\n  } else {\n    document.addEventListener(app.touchEvents.start, e => {\n      appTouchStartActive(e);\n      appTouchStartPassive(e);\n    }, false);\n    document.addEventListener(app.touchEvents.move, e => {\n      appTouchMoveActive(e);\n      appTouchMovePassive(e);\n    }, false);\n    document.addEventListener(app.touchEvents.end, e => {\n      appTouchEndActive(e);\n      appTouchEndPassive(e);\n    }, false);\n\n    if (Support.touch && Support.gestures) {\n      document.addEventListener('gesturestart', e => {\n        appGestureActive(e);\n        appGesturePassive(e);\n      }, false);\n      document.addEventListener('gesturechange', e => {\n        appGestureActive(e);\n        appGesturePassive(e);\n      }, false);\n      document.addEventListener('gestureend', e => {\n        appGestureActive(e);\n        appGesturePassive(e);\n      }, false);\n    }\n  }\n\n  if (Support.touch) {\n    app.on('click', handleClick);\n    app.on('touchstart', handleTouchStart);\n    app.on('touchmove', handleTouchMove);\n    app.on('touchend', handleTouchEnd);\n    document.addEventListener('touchcancel', handleTouchCancel, {\n      passive: true\n    });\n  } else if (params.activeState) {\n    app.on('touchstart', handleMouseDown);\n    app.on('touchmove', handleMouseMove);\n    app.on('touchend', handleMouseUp);\n  }\n\n  document.addEventListener('contextmenu', e => {\n    if (params.disableContextMenu && (Device.ios || Device.android || Device.cordova)) {\n      e.preventDefault();\n    }\n\n    if (useRipple) {\n      if (activableElement) removeActive();\n      rippleTouchEnd();\n    }\n  });\n}\n\nexport default {\n  name: 'touch',\n  params: {\n    touch: {\n      // Clicks\n      touchClicksDistanceThreshold: 5,\n      // ContextMenu\n      disableContextMenu: false,\n      // Tap Hold\n      tapHold: false,\n      tapHoldDelay: 750,\n      tapHoldPreventClicks: true,\n      // Active State\n      activeState: true,\n      activeStateElements: 'a, button, label, span, .actions-button, .stepper-button, .stepper-button-plus, .stepper-button-minus, .card-expandable, .menu-item, .link, .item-link',\n      mdTouchRipple: true,\n      iosTouchRipple: false,\n      auroraTouchRipple: false,\n      touchRippleElements: '.ripple, .link, .item-link, .list-button, .links-list a, .button, button, .input-clear-button, .dialog-button, .tab-link, .item-radio, .item-checkbox, .actions-button, .searchbar-disable-button, .fab a, .checkbox, .radio, .data-table .sortable-cell:not(.input-cell), .notification-close-button, .stepper-button, .stepper-button-minus, .stepper-button-plus, .menu-item-content'\n    }\n  },\n  instance: {\n    touchEvents: {\n      start: Support.touch ? 'touchstart' : Support.pointerEvents ? 'pointerdown' : 'mousedown',\n      move: Support.touch ? 'touchmove' : Support.pointerEvents ? 'pointermove' : 'mousemove',\n      end: Support.touch ? 'touchend' : Support.pointerEvents ? 'pointerup' : 'mouseup'\n    }\n  },\n  on: {\n    init: initTouch\n  }\n};","map":null,"metadata":{},"sourceType":"module"}