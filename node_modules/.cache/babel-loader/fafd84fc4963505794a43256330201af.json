{"ast":null,"code":"import { __rest } from \"tslib\";\nimport React, { useContext, useCallback, useState, useRef } from 'react';\nimport classNames from 'classnames';\nimport { withNativeProps } from '../../utils/native-props';\nimport { Field } from 'rc-field-form';\nimport FieldContext from 'rc-field-form/lib/FieldContext';\nimport { devWarning } from '../../utils/dev-log';\nimport { FormContext, NoStyleItemContext } from './context';\nimport { toArray, isSafeSetRefComponent } from './utils';\nimport List from '../list';\nimport Popover from '../popover';\nimport { QuestionCircleOutline } from 'antd-mobile-icons';\nimport { useConfig } from '../config-provider';\nimport { undefinedFallback } from '../../utils/undefined-fallback';\nconst NAME_SPLIT = '__SPLIT__';\nconst classPrefix = `adm-form-item`;\nconst MemoInput = React.memo(_ref => {\n  let {\n    children\n  } = _ref;\n  return children;\n}, (prev, next) => prev.value === next.value && prev.update === next.update);\n\nconst FormItemLayout = props => {\n  var _a;\n\n  const {\n    className,\n    style,\n    extra,\n    label,\n    help,\n    required,\n    children,\n    htmlFor,\n    hidden,\n    arrow,\n    childElementPosition = 'normal'\n  } = props;\n  const context = useContext(FormContext);\n  const {\n    locale\n  } = useConfig();\n  const hasFeedback = props.hasFeedback !== undefined ? props.hasFeedback : context.hasFeedback;\n  const layout = props.layout || context.layout;\n  const disabled = (_a = props.disabled) !== null && _a !== void 0 ? _a : context.disabled;\n\n  const requiredMark = (() => {\n    const {\n      requiredMarkStyle\n    } = context;\n\n    switch (requiredMarkStyle) {\n      case 'asterisk':\n        return required && React.createElement(\"span\", {\n          className: `${classPrefix}-required-asterisk`\n        }, \"*\");\n\n      case 'text-required':\n        return required && React.createElement(\"span\", {\n          className: `${classPrefix}-required-text`\n        }, \"(\", locale.Form.required, \")\");\n\n      case 'text-optional':\n        return !required && React.createElement(\"span\", {\n          className: `${classPrefix}-required-text`\n        }, \"(\", locale.Form.optional, \")\");\n\n      case 'none':\n        return null;\n\n      default:\n        return null;\n    }\n  })();\n\n  const labelElement = label ? React.createElement(\"label\", {\n    className: `${classPrefix}-label`,\n    htmlFor: htmlFor\n  }, label, requiredMark, help && React.createElement(Popover, {\n    content: help,\n    mode: 'dark',\n    trigger: 'click'\n  }, React.createElement(\"span\", {\n    className: `${classPrefix}-label-help`,\n    onClick: e => {\n      e.preventDefault();\n    }\n  }, React.createElement(QuestionCircleOutline, null)))) : null;\n  const description = props.description || hasFeedback ? React.createElement(React.Fragment, null, props.description, hasFeedback && React.createElement(React.Fragment, null, props.errors.map((error, index) => React.createElement(\"div\", {\n    key: `error-${index}`,\n    className: `${classPrefix}-feedback-error`\n  }, error)), props.warnings.map((warning, index) => React.createElement(\"div\", {\n    key: `warning-${index}`,\n    className: `${classPrefix}-feedback-warning`\n  }, warning)))) : null;\n  return withNativeProps(props, React.createElement(List.Item, {\n    style: style,\n    title: layout === 'vertical' && labelElement,\n    prefix: layout === 'horizontal' && labelElement,\n    extra: extra,\n    description: description,\n    className: classNames(classPrefix, className, `${classPrefix}-${layout}`, {\n      [`${classPrefix}-hidden`]: hidden,\n      [`${classPrefix}-has-error`]: props.errors.length\n    }),\n    disabled: disabled,\n    onClick: props.onClick,\n    clickable: props.clickable,\n    arrow: arrow\n  }, React.createElement(\"div\", {\n    className: classNames(`${classPrefix}-child`, `${classPrefix}-child-position-${childElementPosition}`)\n  }, React.createElement(\"div\", {\n    className: classNames(`${classPrefix}-child-inner`)\n  }, children))));\n};\n\nexport const FormItem = props => {\n  const {\n    // 样式相关\n    className,\n    style,\n    // FormItem 相关\n    label,\n    help,\n    extra,\n    hasFeedback,\n    name,\n    required,\n    noStyle,\n    hidden,\n    layout,\n    childElementPosition,\n    description,\n    // Field 相关\n    disabled,\n    rules,\n    children,\n    messageVariables,\n    trigger = 'onChange',\n    validateTrigger = trigger,\n    onClick,\n    shouldUpdate,\n    dependencies,\n    clickable,\n    arrow\n  } = props,\n        fieldProps = __rest(props, [\"className\", \"style\", \"label\", \"help\", \"extra\", \"hasFeedback\", \"name\", \"required\", \"noStyle\", \"hidden\", \"layout\", \"childElementPosition\", \"description\", \"disabled\", \"rules\", \"children\", \"messageVariables\", \"trigger\", \"validateTrigger\", \"onClick\", \"shouldUpdate\", \"dependencies\", \"clickable\", \"arrow\"]);\n\n  const {\n    name: formName\n  } = useContext(FormContext);\n  const {\n    validateTrigger: contextValidateTrigger\n  } = useContext(FieldContext);\n  const mergedValidateTrigger = undefinedFallback(validateTrigger, contextValidateTrigger, trigger);\n  const widgetRef = useRef(null);\n  const updateRef = useRef(0);\n  updateRef.current += 1;\n  const [subMetas, setSubMetas] = useState({});\n  const onSubMetaChange = useCallback((subMeta, namePath) => {\n    setSubMetas(prevSubMetas => {\n      const nextSubMetas = Object.assign({}, prevSubMetas);\n      const nameKey = namePath.join(NAME_SPLIT);\n\n      if (subMeta.destroy) {\n        delete nextSubMetas[nameKey];\n      } else {\n        nextSubMetas[nameKey] = subMeta;\n      }\n\n      return nextSubMetas;\n    });\n  }, [setSubMetas]);\n\n  function renderLayout(baseChildren, fieldId, meta, isRequired) {\n    var _a, _b;\n\n    if (noStyle && !hidden) {\n      return baseChildren;\n    }\n\n    const curErrors = (_a = meta === null || meta === void 0 ? void 0 : meta.errors) !== null && _a !== void 0 ? _a : [];\n    const errors = Object.keys(subMetas).reduce((subErrors, key) => {\n      var _a, _b;\n\n      const errors = (_b = (_a = subMetas[key]) === null || _a === void 0 ? void 0 : _a.errors) !== null && _b !== void 0 ? _b : [];\n\n      if (errors.length) {\n        subErrors = [...subErrors, ...errors];\n      }\n\n      return subErrors;\n    }, curErrors);\n    const curWarnings = (_b = meta === null || meta === void 0 ? void 0 : meta.warnings) !== null && _b !== void 0 ? _b : [];\n    const warnings = Object.keys(subMetas).reduce((subWarnings, key) => {\n      var _a, _b;\n\n      const warnings = (_b = (_a = subMetas[key]) === null || _a === void 0 ? void 0 : _a.warnings) !== null && _b !== void 0 ? _b : [];\n\n      if (warnings.length) {\n        subWarnings = [...subWarnings, ...warnings];\n      }\n\n      return subWarnings;\n    }, curWarnings);\n    return withNativeProps(props, React.createElement(FormItemLayout, {\n      className: className,\n      style: style,\n      label: label,\n      extra: extra,\n      help: help,\n      description: description,\n      required: isRequired,\n      disabled: disabled,\n      hasFeedback: hasFeedback,\n      htmlFor: fieldId,\n      errors: errors,\n      warnings: warnings,\n      onClick: onClick && (e => onClick(e, widgetRef)),\n      hidden: hidden,\n      layout: layout,\n      childElementPosition: childElementPosition,\n      clickable: clickable,\n      arrow: arrow\n    }, React.createElement(NoStyleItemContext.Provider, {\n      value: onSubMetaChange\n    }, baseChildren)));\n  }\n\n  const isRenderProps = typeof children === 'function';\n\n  if (!name && !isRenderProps && !props.dependencies) {\n    return renderLayout(children);\n  }\n\n  let Variables = {};\n  Variables.label = typeof label === 'string' ? label : '';\n\n  if (messageVariables) {\n    Variables = Object.assign(Object.assign({}, Variables), messageVariables);\n  }\n\n  const notifyParentMetaChange = useContext(NoStyleItemContext);\n\n  const onMetaChange = meta => {\n    if (noStyle && notifyParentMetaChange) {\n      const namePath = meta.name;\n      notifyParentMetaChange(meta, namePath);\n    }\n  };\n\n  return React.createElement(Field, Object.assign({}, fieldProps, {\n    name: name,\n    shouldUpdate: shouldUpdate,\n    dependencies: dependencies,\n    rules: rules,\n    trigger: trigger,\n    validateTrigger: mergedValidateTrigger,\n    onMetaChange: onMetaChange,\n    messageVariables: Variables\n  }), (control, meta, context) => {\n    let childNode = null;\n    const isRequired = required !== undefined ? required : rules && rules.some(rule => !!(rule && typeof rule === 'object' && rule.required));\n    const nameList = toArray(name).length && meta ? meta.name : [];\n    const fieldId = (nameList.length > 0 && formName ? [formName, ...nameList] : nameList).join('_');\n\n    if (shouldUpdate && dependencies) {\n      devWarning('Form.Item', \"`shouldUpdate` and `dependencies` shouldn't be used together.\");\n    }\n\n    if (isRenderProps) {\n      if ((shouldUpdate || dependencies) && !name) {\n        childNode = children(context);\n      } else {\n        if (!(shouldUpdate || dependencies)) {\n          devWarning('Form.Item', '`children` of render props only work with `shouldUpdate` or `dependencies`.');\n        }\n\n        if (name) {\n          devWarning('Form.Item', \"Do not use `name` with `children` of render props since it's not a field.\");\n        }\n      } // not render props\n\n    } else if (dependencies && !name) {\n      devWarning('Form.Item', 'Must set `name` or use render props when `dependencies` is set.');\n    } else if (React.isValidElement(children)) {\n      if (children.props.defaultValue) {\n        devWarning('Form.Item', '`defaultValue` will not work on controlled Field. You should use `initialValues` of Form instead.');\n      }\n\n      const childProps = Object.assign(Object.assign({}, children.props), control);\n\n      if (isSafeSetRefComponent(children)) {\n        childProps.ref = instance => {\n          const originRef = children.ref;\n\n          if (originRef) {\n            if (typeof originRef === 'function') {\n              originRef(instance);\n            }\n\n            if ('current' in originRef) {\n              originRef.current = instance;\n            }\n          }\n\n          widgetRef.current = instance;\n        };\n      }\n\n      if (!childProps.id) {\n        childProps.id = fieldId;\n      } // We should keep user origin event handler\n\n\n      const triggers = new Set([...toArray(trigger), ...toArray(mergedValidateTrigger)]);\n      triggers.forEach(eventName => {\n        childProps[eventName] = function () {\n          var _a, _b, _c;\n\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          (_a = control[eventName]) === null || _a === void 0 ? void 0 : _a.call(control, ...args);\n          (_c = (_b = children.props)[eventName]) === null || _c === void 0 ? void 0 : _c.call(_b, ...args);\n        };\n      });\n      childNode = React.createElement(MemoInput, {\n        value: control[props.valuePropName || 'value'],\n        update: updateRef.current\n      }, React.cloneElement(children, childProps));\n    } else {\n      if (name) {\n        devWarning('Form.Item', '`name` is only used for validate React element. If you are using Form.Item as layout display, please remove `name` instead.');\n      }\n\n      childNode = children;\n    }\n\n    return renderLayout(childNode, fieldId, meta, isRequired);\n  });\n};","map":null,"metadata":{},"sourceType":"module"}