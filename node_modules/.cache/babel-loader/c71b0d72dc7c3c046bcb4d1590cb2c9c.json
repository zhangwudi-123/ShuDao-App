{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useLayoutUpdateEffect = exports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _canUseDom = _interopRequireDefault(require(\"../Dom/canUseDom\"));\n/**\n * Wrap `React.useLayoutEffect` which will not throw warning message in test env\n */\n\n\nvar useLayoutEffect = process.env.NODE_ENV !== 'test' && (0, _canUseDom.default)() ? React.useLayoutEffect : React.useEffect;\nvar _default = useLayoutEffect;\nexports.default = _default;\n\nvar useLayoutUpdateEffect = function useLayoutUpdateEffect(callback, deps) {\n  var firstMountRef = React.useRef(true);\n  useLayoutEffect(function () {\n    if (!firstMountRef.current) {\n      return callback();\n    }\n  }, deps); // We tell react that first mount has passed\n\n  useLayoutEffect(function () {\n    firstMountRef.current = false;\n    return function () {\n      firstMountRef.current = true;\n    };\n  }, []);\n};\n\nexports.useLayoutUpdateEffect = useLayoutUpdateEffect;","map":null,"metadata":{},"sourceType":"script"}