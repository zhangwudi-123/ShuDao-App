{"ast":null,"code":"import $ from 'dom7';\nimport Utils from '../../utils/utils';\nconst Fab = {\n  morphOpen(fabEl, targetEl) {\n    const app = this;\n    const $fabEl = $(fabEl);\n    const $targetEl = $(targetEl);\n    if ($targetEl.length === 0) return;\n    $targetEl.transition(0).addClass('fab-morph-target-visible');\n    const target = {\n      width: $targetEl[0].offsetWidth,\n      height: $targetEl[0].offsetHeight,\n      offset: $targetEl.offset(),\n      borderRadius: $targetEl.css('border-radius'),\n      zIndex: $targetEl.css('z-index')\n    };\n    const fab = {\n      width: $fabEl[0].offsetWidth,\n      height: $fabEl[0].offsetHeight,\n      offset: $fabEl.offset(),\n      translateX: Utils.getTranslate($fabEl[0], 'x'),\n      translateY: Utils.getTranslate($fabEl[0], 'y')\n    };\n    $fabEl[0].f7FabMorphData = {\n      $targetEl,\n      target,\n      fab\n    };\n    const diffX = fab.offset.left + fab.width / 2 - (target.offset.left + target.width / 2) - fab.translateX;\n    const diffY = fab.offset.top + fab.height / 2 - (target.offset.top + target.height / 2) - fab.translateY;\n    const scaleX = target.width / fab.width;\n    const scaleY = target.height / fab.height;\n    let borderRadius = Math.ceil(parseInt(target.borderRadius, 10) / Math.max(scaleX, scaleY));\n    if (borderRadius > 0) borderRadius += 2;\n\n    $fabEl[0].f7FabMorphResizeHandler = function resizeHandler() {\n      $fabEl.transition(0).transform('');\n      $targetEl.transition(0);\n      target.width = $targetEl[0].offsetWidth;\n      target.height = $targetEl[0].offsetHeight;\n      target.offset = $targetEl.offset();\n      fab.offset = $fabEl.offset();\n      const diffXNew = fab.offset.left + fab.width / 2 - (target.offset.left + target.width / 2) - fab.translateX;\n      const diffYNew = fab.offset.top + fab.height / 2 - (target.offset.top + target.height / 2) - fab.translateY;\n      const scaleXNew = target.width / fab.width;\n      const scaleYNew = target.height / fab.height;\n      $fabEl.transform(`translate3d(${-diffXNew}px, ${-diffYNew}px, 0) scale(${scaleXNew}, ${scaleYNew})`);\n    };\n\n    $targetEl.css('opacity', 0).transform(`scale(${1 / scaleX}, ${1 / scaleY})`);\n    $fabEl.addClass('fab-opened').css('z-index', target.zIndex - 1).transform(`translate3d(${-diffX}px, ${-diffY}px, 0)`);\n    $fabEl.transitionEnd(() => {\n      $targetEl.transition('');\n      Utils.nextFrame(() => {\n        $targetEl.css('opacity', 1).transform('scale(1,1)');\n        $fabEl.transform(`translate3d(${-diffX}px, ${-diffY}px, 0) scale(${scaleX}, ${scaleY})`).css('border-radius', `${borderRadius}px`).css('box-shadow', 'none').css('opacity', '0');\n      });\n      app.on('resize', $fabEl[0].f7FabMorphResizeHandler);\n\n      if ($targetEl.parents('.page-content').length > 0) {\n        $targetEl.parents('.page-content').on('scroll', $fabEl[0].f7FabMorphResizeHandler);\n      }\n    });\n  },\n\n  morphClose(fabEl) {\n    const app = this;\n    const $fabEl = $(fabEl);\n    const morphData = $fabEl[0].f7FabMorphData;\n    if (!morphData) return;\n    const {\n      $targetEl,\n      target,\n      fab\n    } = morphData;\n    if ($targetEl.length === 0) return;\n    const diffX = fab.offset.left + fab.width / 2 - (target.offset.left + target.width / 2) - fab.translateX;\n    const diffY = fab.offset.top + fab.height / 2 - (target.offset.top + target.height / 2) - fab.translateY;\n    const scaleX = target.width / fab.width;\n    const scaleY = target.height / fab.height;\n    app.off('resize', $fabEl[0].f7FabMorphResizeHandler);\n\n    if ($targetEl.parents('.page-content').length > 0) {\n      $targetEl.parents('.page-content').off('scroll', $fabEl[0].f7FabMorphResizeHandler);\n    }\n\n    $targetEl.css('opacity', 0).transform(`scale(${1 / scaleX}, ${1 / scaleY})`);\n    $fabEl.transition('').css('box-shadow', '').css('border-radius', '').css('opacity', '1').transform(`translate3d(${-diffX}px, ${-diffY}px, 0)`);\n    $fabEl.transitionEnd(() => {\n      $fabEl.css('z-index', '').removeClass('fab-opened').transform('');\n      Utils.nextFrame(() => {\n        $fabEl.transitionEnd(() => {\n          $targetEl.removeClass('fab-morph-target-visible').css('opacity', '').transform('').transition('');\n        });\n      });\n    });\n  },\n\n  open(fabEl, targetEl) {\n    const app = this;\n    const $fabEl = $(fabEl).eq(0);\n    const $buttonsEl = $fabEl.find('.fab-buttons');\n    if (!$fabEl.length) return;\n    if ($fabEl.hasClass('fab-opened')) return;\n    if (!$buttonsEl.length && !$fabEl.hasClass('fab-morph')) return;\n\n    if (app.fab.openedEl) {\n      if (app.fab.openedEl === $fabEl[0]) return;\n      app.fab.close(app.fab.openedEl);\n    }\n\n    app.fab.openedEl = $fabEl[0];\n\n    if ($fabEl.hasClass('fab-morph')) {\n      app.fab.morphOpen($fabEl, targetEl || $fabEl.attr('data-morph-to'));\n    } else {\n      $fabEl.addClass('fab-opened');\n    }\n\n    $fabEl.trigger('fab:open');\n  },\n\n  close() {\n    let fabEl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '.fab-opened';\n    const app = this;\n    const $fabEl = $(fabEl).eq(0);\n    const $buttonsEl = $fabEl.find('.fab-buttons');\n    if (!$fabEl.length) return;\n    if (!$fabEl.hasClass('fab-opened')) return;\n    if (!$buttonsEl.length && !$fabEl.hasClass('fab-morph')) return;\n    app.fab.openedEl = null;\n\n    if ($fabEl.hasClass('fab-morph')) {\n      app.fab.morphClose($fabEl);\n    } else {\n      $fabEl.removeClass('fab-opened');\n    }\n\n    $fabEl.trigger('fab:close');\n  },\n\n  toggle(fabEl) {\n    const app = this;\n    const $fabEl = $(fabEl);\n    if (!$fabEl.hasClass('fab-opened')) app.fab.open(fabEl);else app.fab.close(fabEl);\n  }\n\n};\nexport default {\n  name: 'fab',\n\n  create() {\n    const app = this;\n    Utils.extend(app, {\n      fab: {\n        openedEl: null,\n        morphOpen: Fab.morphOpen.bind(app),\n        morphClose: Fab.morphClose.bind(app),\n        open: Fab.open.bind(app),\n        close: Fab.close.bind(app),\n        toggle: Fab.toggle.bind(app)\n      }\n    });\n  },\n\n  clicks: {\n    '.fab > a': function open($clickedEl) {\n      const app = this;\n      app.fab.toggle($clickedEl.parents('.fab'));\n    },\n    '.fab-open': function open($clickedEl) {\n      let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      const app = this;\n      app.fab.open(data.fab);\n    },\n    '.fab-close': function close($clickedEl) {\n      let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      const app = this;\n      app.fab.close(data.fab);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}