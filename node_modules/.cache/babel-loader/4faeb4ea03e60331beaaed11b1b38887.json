{"ast":null,"code":"import { window, document } from 'ssr-window';\nimport Template7 from 'template7';\nimport $ from 'dom7';\nimport Utils from '../../utils/utils';\n\nfunction parseComponent(componentString) {\n  const id = Utils.id();\n  const callbackCreateName = `f7_component_create_callback_${id}`;\n  const callbackRenderName = `f7_component_render_callback_${id}`; // Template\n\n  let template;\n  const hasTemplate = componentString.match(/<template([ ]?)([a-z0-9-]*)>/);\n  const templateType = hasTemplate[2] || 't7';\n\n  if (hasTemplate) {\n    template = componentString.split(/<template[ ]?[a-z0-9-]*>/).filter((item, index) => index > 0).join('<template>').split('</template>').filter((item, index, arr) => index < arr.length - 1).join('</template>').replace(/{{#raw}}([ \\n]*)<template/g, '{{#raw}}<template').replace(/\\/template>([ \\n]*){{\\/raw}}/g, '/template>{{/raw}}').replace(/([ \\n])<template/g, '$1{{#raw}}<template').replace(/\\/template>([ \\n])/g, '/template>{{/raw}}$1');\n  } // Parse Styles\n\n\n  let style = null;\n  let styleScoped = false;\n\n  if (componentString.indexOf('<style>') >= 0) {\n    style = componentString.split('<style>')[1].split('</style>')[0];\n  } else if (componentString.indexOf('<style scoped>') >= 0) {\n    styleScoped = true;\n    style = componentString.split('<style scoped>')[1].split('</style>')[0];\n    style = style.replace(/{{this}}/g, `[data-f7-${id}]`).replace(/[\\n]?([^{^}]*){/ig, (string, rules) => {\n      // eslint-disable-next-line\n      rules = rules.split(',').map(rule => {\n        if (rule.indexOf(`[data-f7-${id}]`) >= 0) return rule;\n        return `[data-f7-${id}] ${rule.trim()}`;\n      }).join(', ');\n      return `\\n${rules} {`;\n    });\n  } // Parse Script\n\n\n  let scriptContent;\n  let scriptEl;\n\n  if (componentString.indexOf('<script>') >= 0) {\n    const scripts = componentString.split('<script>');\n    scriptContent = scripts[scripts.length - 1].split('</script>')[0].trim();\n  } else {\n    scriptContent = 'return {}';\n  }\n\n  if (!scriptContent || !scriptContent.trim()) scriptContent = 'return {}';\n  scriptContent = `window.${callbackCreateName} = function () {${scriptContent}}`; // Insert Script El\n\n  scriptEl = document.createElement('script');\n  scriptEl.innerHTML = scriptContent;\n  $('head').append(scriptEl);\n  const component = window[callbackCreateName]();\n  const isClassComponent = typeof component === 'function'; // Remove Script El\n\n  $(scriptEl).remove();\n  window[callbackCreateName] = null;\n  delete window[callbackCreateName]; // Assign Template\n\n  if (!component.template && !component.render) {\n    component.template = template;\n    component.templateType = templateType;\n  }\n\n  if (component.template) {\n    if (component.templateType === 't7') {\n      if (isClassComponent) {\n        const templateFunction = Template7.compile(component.template);\n\n        component.prototype.render = function render() {\n          return templateFunction(this);\n        };\n      } else {\n        component.template = Template7.compile(component.template);\n      }\n    }\n\n    if (component.templateType === 'es') {\n      const renderContent = `window.${callbackRenderName} = function () {\n        return function render() {\n          return \\`${component.template}\\`;\n        }\n      }`;\n      scriptEl = document.createElement('script');\n      scriptEl.innerHTML = renderContent;\n      $('head').append(scriptEl);\n\n      if (isClassComponent) {\n        component.prototype.render = component.template;\n      } else {\n        component.render = window[callbackRenderName]();\n      } // Remove Script El\n\n\n      $(scriptEl).remove();\n      window[callbackRenderName] = null;\n      delete window[callbackRenderName];\n    }\n  }\n\n  if (isClassComponent) {\n    delete component.template;\n    delete component.templateType;\n  } // Assign Style\n\n\n  if (style) {\n    component.style = style;\n    component.styleScoped = styleScoped;\n  } // Component ID\n\n\n  component.id = id;\n  return component;\n}\n\nexport default parseComponent;","map":null,"metadata":{},"sourceType":"module"}