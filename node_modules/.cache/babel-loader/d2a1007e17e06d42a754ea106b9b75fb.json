{"ast":null,"code":"import { withNativeProps } from '../../utils/native-props';\nimport React, { useMemo, useRef, useState } from 'react';\nimport { useUnmountedRef } from 'ahooks';\nimport { useLockScroll } from '../../utils/use-lock-scroll';\nimport { useSpring, animated } from '@react-spring/web';\nimport { renderToContainer } from '../../utils/render-to-container';\nimport { mergeProps } from '../../utils/with-default-props';\nimport { useConfig } from '../config-provider';\nimport { ShouldRender } from '../../utils/should-render';\nimport { withStopPropagation } from '../../utils/with-stop-propagation';\nconst classPrefix = `adm-mask`;\nconst opacityRecord = {\n  default: 0.55,\n  thin: 0.35,\n  thick: 0.75\n};\nconst colorRecord = {\n  black: '0, 0, 0',\n  white: '255, 255, 255'\n};\nconst defaultProps = {\n  visible: true,\n  destroyOnClose: false,\n  forceRender: false,\n  color: 'black',\n  opacity: 'default',\n  disableBodyScroll: true,\n  getContainer: null,\n  stopPropagation: ['click']\n};\nexport const Mask = p => {\n  const props = mergeProps(defaultProps, p);\n  const {\n    locale\n  } = useConfig();\n  const ref = useRef(null);\n  useLockScroll(ref, props.visible && props.disableBodyScroll);\n  const background = useMemo(() => {\n    var _a;\n\n    const opacity = (_a = opacityRecord[props.opacity]) !== null && _a !== void 0 ? _a : props.opacity;\n    const rgb = colorRecord[props.color];\n    return rgb ? `rgba(${rgb}, ${opacity})` : props.color;\n  }, [props.color, props.opacity]);\n  const [active, setActive] = useState(props.visible);\n  const unmountedRef = useUnmountedRef();\n  const {\n    opacity\n  } = useSpring({\n    opacity: props.visible ? 1 : 0,\n    config: {\n      precision: 0.01,\n      mass: 1,\n      tension: 250,\n      friction: 30,\n      clamp: true\n    },\n    onStart: () => {\n      setActive(true);\n    },\n    onRest: () => {\n      var _a, _b;\n\n      if (unmountedRef.current) return;\n      setActive(props.visible);\n\n      if (props.visible) {\n        (_a = props.afterShow) === null || _a === void 0 ? void 0 : _a.call(props);\n      } else {\n        (_b = props.afterClose) === null || _b === void 0 ? void 0 : _b.call(props);\n      }\n    }\n  });\n  const node = withStopPropagation(props.stopPropagation, withNativeProps(props, React.createElement(animated.div, {\n    className: classPrefix,\n    ref: ref,\n    style: Object.assign(Object.assign({}, props.style), {\n      background,\n      opacity,\n      display: active ? undefined : 'none'\n    }),\n    onClick: e => {\n      var _a;\n\n      if (e.target === e.currentTarget) {\n        (_a = props.onMaskClick) === null || _a === void 0 ? void 0 : _a.call(props, e);\n      }\n    }\n  }, props.onMaskClick && React.createElement(\"div\", {\n    className: `${classPrefix}-aria-button`,\n    role: 'button',\n    \"aria-label\": locale.Mask.name,\n    onClick: props.onMaskClick\n  }), React.createElement(\"div\", {\n    className: `${classPrefix}-content`\n  }, props.children))));\n  return React.createElement(ShouldRender, {\n    active: active,\n    forceRender: props.forceRender,\n    destroyOnClose: props.destroyOnClose\n  }, renderToContainer(props.getContainer, node));\n};","map":null,"metadata":{},"sourceType":"module"}