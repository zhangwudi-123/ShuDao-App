{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport React from 'react';\nimport f7 from '../utils/f7';\nimport Utils from '../utils/utils';\nimport Mixins from '../utils/mixins';\nimport __reactComponentDispatchEvent from '../runtime-helpers/react-component-dispatch-event.js';\nimport __reactComponentSlots from '../runtime-helpers/react-component-slots.js';\nimport __reactComponentSetProps from '../runtime-helpers/react-component-set-props.js';\n\nvar F7Tab = /*#__PURE__*/function (_React$Component) {\n  _inherits(F7Tab, _React$Component);\n\n  function F7Tab(props, context) {\n    var _this;\n\n    _classCallCheck(this, F7Tab);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(F7Tab).call(this, props, context));\n    _this.__reactRefs = {};\n\n    _this.state = function () {\n      return {\n        tabContent: null\n      };\n    }();\n\n    (function () {\n      Utils.bindMethods(_assertThisInitialized(_this), ['onTabShow', 'onTabHide']);\n    })();\n\n    return _this;\n  }\n\n  _createClass(F7Tab, [{\n    key: \"show\",\n    value: function show(animate) {\n      if (!this.$f7) return;\n      this.$f7.tab.show(this.refs.el, animate);\n    }\n  }, {\n    key: \"onTabShow\",\n    value: function onTabShow(el) {\n      if (this.eventTargetEl !== el) return;\n      this.dispatchEvent('tab:show tabShow');\n    }\n  }, {\n    key: \"onTabHide\",\n    value: function onTabHide(el) {\n      if (this.eventTargetEl !== el) return;\n      this.dispatchEvent('tab:hide tabHide');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var self = this;\n      var props = self.props;\n      var tabActive = props.tabActive,\n          id = props.id,\n          className = props.className,\n          style = props.style;\n      var tabContent = self.state.tabContent;\n      var classes = Utils.classNames(className, 'tab', {\n        'tab-active': tabActive\n      }, Mixins.colorClasses(props));\n      var TabContent;\n      if (tabContent) TabContent = tabContent.component;\n      {\n        return React.createElement('div', {\n          id: id,\n          style: style,\n          ref: function ref(__reactNode) {\n            _this2.__reactRefs['el'] = __reactNode;\n          },\n          className: classes\n        }, tabContent ? React.createElement(TabContent, Object.assign({\n          key: tabContent.id\n        }, tabContent.props)) : this.slots['default']);\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var self = this;\n      var el = self.refs.el;\n      self.setState({\n        tabContent: null\n      });\n      self.$f7ready(function () {\n        self.$f7.on('tabShow', self.onTabShow);\n        self.$f7.on('tabHide', self.onTabHide);\n        self.eventTargetEl = el;\n        self.routerData = {\n          el: el,\n          component: self,\n          setTabContent: function setTabContent(tabContent) {\n            self.setState({\n              tabContent: tabContent\n            });\n          }\n        };\n        f7.routers.tabs.push(self.routerData);\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var self = this;\n\n      if (self.$f7) {\n        self.$f7.off('tabShow', self.onTabShow);\n        self.$f7.off('tabHide', self.onTabHide);\n      }\n\n      if (!self.routerData) return;\n      f7.routers.tabs.splice(f7.routers.tabs.indexOf(self.routerData), 1);\n      self.routerData = null;\n      self.eventTargetEl = null;\n      delete self.routerData;\n      delete self.eventTargetEl;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var self = this;\n      if (!self.routerData) return;\n      f7.events.emit('tabRouterDidUpdate', self.routerData);\n    }\n  }, {\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(events) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return __reactComponentDispatchEvent.apply(void 0, [this, events].concat(args));\n    }\n  }, {\n    key: \"slots\",\n    get: function get() {\n      return __reactComponentSlots(this.props);\n    }\n  }, {\n    key: \"refs\",\n    get: function get() {\n      return this.__reactRefs;\n    },\n    set: function set(refs) {}\n  }]);\n\n  return F7Tab;\n}(React.Component);\n\n__reactComponentSetProps(F7Tab, Object.assign({\n  id: [String, Number],\n  className: String,\n  style: Object,\n  tabActive: Boolean\n}, Mixins.colorProps));\n\nF7Tab.displayName = 'f7-tab';\nexport default F7Tab;","map":null,"metadata":{},"sourceType":"module"}