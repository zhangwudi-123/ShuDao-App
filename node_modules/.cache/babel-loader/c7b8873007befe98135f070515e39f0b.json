{"ast":null,"code":"import React, { useState, useRef, memo } from 'react';\nimport classNames from 'classnames';\nimport { CloseOutline, SoundOutline } from 'antd-mobile-icons';\nimport { useTimeout } from 'ahooks';\nimport { mergeProps } from '../../utils/with-default-props';\nimport { withNativeProps } from '../../utils/native-props';\nimport { useResizeEffect } from '../../utils/use-resize-effect';\nimport { useMutationEffect } from '../../utils/use-mutation-effect';\nconst classPrefix = `adm-notice-bar`;\nconst defaultProps = {\n  color: 'default',\n  delay: 2000,\n  speed: 50,\n  wrap: false,\n  icon: React.createElement(SoundOutline, null)\n};\nexport const NoticeBar = memo(p => {\n  const props = mergeProps(defaultProps, p);\n  const containerRef = useRef(null);\n  const textRef = useRef(null);\n  const [visible, setVisible] = useState(true);\n  const speed = props.speed;\n  const delayLockRef = useRef(true);\n  const animatingRef = useRef(false);\n\n  function start() {\n    if (delayLockRef.current || props.wrap) return;\n    const container = containerRef.current;\n    const text = textRef.current;\n    if (!container || !text) return;\n\n    if (container.offsetWidth >= text.offsetWidth) {\n      animatingRef.current = false;\n      text.style.removeProperty('transition-duration');\n      text.style.removeProperty('transform');\n      return;\n    }\n\n    if (animatingRef.current) return;\n    const initial = !text.style.transform;\n    text.style.transitionDuration = '0s';\n\n    if (initial) {\n      text.style.transform = 'translateX(0)';\n    } else {\n      text.style.transform = `translateX(${container.offsetWidth}px)`;\n    }\n\n    const distance = initial ? text.offsetWidth : container.offsetWidth + text.offsetWidth;\n    animatingRef.current = true;\n    text.style.transitionDuration = `${Math.round(distance / speed)}s`;\n    text.style.transform = `translateX(-${text.offsetWidth}px)`;\n  }\n\n  useTimeout(() => {\n    delayLockRef.current = false;\n    start();\n  }, props.delay);\n  useResizeEffect(() => {\n    start();\n  }, containerRef);\n  useMutationEffect(() => {\n    start();\n  }, textRef, {\n    subtree: true,\n    childList: true,\n    characterData: true\n  });\n  if (!visible) return null;\n  return withNativeProps(props, React.createElement(\"div\", {\n    className: classNames(classPrefix, `${classPrefix}-${props.color}`, {\n      [`${classPrefix}-wrap`]: props.wrap\n    })\n  }, props.icon && React.createElement(\"span\", {\n    className: `${classPrefix}-left`\n  }, props.icon), React.createElement(\"span\", {\n    ref: containerRef,\n    className: `${classPrefix}-content`\n  }, React.createElement(\"span\", {\n    onTransitionEnd: () => {\n      animatingRef.current = false;\n      start();\n    },\n    ref: textRef,\n    className: `${classPrefix}-content-inner`\n  }, props.content)), (props.closeable || props.extra) && React.createElement(\"span\", {\n    className: `${classPrefix}-right`\n  }, props.extra, props.closeable && React.createElement(\"div\", {\n    className: `${classPrefix}-close`,\n    onClick: () => {\n      var _a;\n\n      setVisible(false);\n      (_a = props.onClose) === null || _a === void 0 ? void 0 : _a.call(props);\n    }\n  }, React.createElement(CloseOutline, {\n    className: `${classPrefix}-close-icon`\n  })))));\n});","map":null,"metadata":{},"sourceType":"module"}