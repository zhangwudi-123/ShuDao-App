{"ast":null,"code":"import React, { useState, useEffect, forwardRef, useImperativeHandle } from 'react';\nimport Popup from '../popup';\nimport { mergeProps } from '../../utils/with-default-props';\nimport { withNativeProps } from '../../utils/native-props';\nimport { usePropsValue } from '../../utils/use-props-value';\nimport CascaderView from '../cascader-view';\nimport { useConfig } from '../config-provider';\nimport { useCascaderValueExtend } from '../cascader-view/use-cascader-value-extend';\nconst classPrefix = `adm-cascader`;\nconst defaultProps = {\n  defaultValue: [],\n  destroyOnClose: true,\n  forceRender: false\n};\nexport const Cascader = forwardRef((p, ref) => {\n  var _a;\n\n  const {\n    locale\n  } = useConfig();\n  const props = mergeProps(defaultProps, {\n    confirmText: locale.common.confirm,\n    cancelText: locale.common.cancel,\n    placeholder: locale.Cascader.placeholder\n  }, p);\n  const [visible, setVisible] = usePropsValue({\n    value: props.visible,\n    defaultValue: false,\n    onChange: v => {\n      var _a;\n\n      if (v === false) {\n        (_a = props.onClose) === null || _a === void 0 ? void 0 : _a.call(props);\n      }\n    }\n  });\n  const actions = {\n    toggle: () => {\n      setVisible(v => !v);\n    },\n    open: () => {\n      setVisible(true);\n    },\n    close: () => {\n      setVisible(false);\n    }\n  };\n  useImperativeHandle(ref, () => actions);\n  const [value, setValue] = usePropsValue(Object.assign(Object.assign({}, props), {\n    onChange: val => {\n      var _a;\n\n      (_a = props.onConfirm) === null || _a === void 0 ? void 0 : _a.call(props, val, generateValueExtend(val));\n    }\n  }));\n  const generateValueExtend = useCascaderValueExtend(props.options);\n  const [innerValue, setInnerValue] = useState(value);\n  useEffect(() => {\n    if (!visible) {\n      setInnerValue(value);\n    }\n  }, [visible]);\n  useEffect(() => {\n    if (!visible) {\n      setInnerValue(value);\n    }\n  }, [value]);\n  const cascaderElement = withNativeProps(props, React.createElement(\"div\", {\n    className: classPrefix\n  }, React.createElement(\"div\", {\n    className: `${classPrefix}-header`\n  }, React.createElement(\"a\", {\n    className: `${classPrefix}-header-button`,\n    onClick: () => {\n      var _a;\n\n      (_a = props.onCancel) === null || _a === void 0 ? void 0 : _a.call(props);\n      setVisible(false);\n    }\n  }, props.cancelText), React.createElement(\"div\", {\n    className: `${classPrefix}-header-title`\n  }, props.title), React.createElement(\"a\", {\n    className: `${classPrefix}-header-button`,\n    onClick: () => {\n      setValue(innerValue, true);\n      setVisible(false);\n    }\n  }, props.confirmText)), React.createElement(\"div\", {\n    className: `${classPrefix}-body`\n  }, React.createElement(CascaderView, Object.assign({}, props, {\n    value: innerValue,\n    onChange: (val, ext) => {\n      var _a;\n\n      setInnerValue(val);\n\n      if (visible) {\n        (_a = props.onSelect) === null || _a === void 0 ? void 0 : _a.call(props, val, ext);\n      }\n    }\n  })))));\n  const popupElement = React.createElement(Popup, {\n    visible: visible,\n    position: 'bottom',\n    onMaskClick: () => {\n      var _a;\n\n      (_a = props.onCancel) === null || _a === void 0 ? void 0 : _a.call(props);\n      setVisible(false);\n    },\n    getContainer: props.getContainer,\n    destroyOnClose: props.destroyOnClose,\n    forceRender: props.forceRender,\n    afterShow: props.afterShow,\n    afterClose: props.afterClose,\n    onClick: props.onClick,\n    stopPropagation: props.stopPropagation\n  }, cascaderElement);\n  return React.createElement(React.Fragment, null, popupElement, (_a = props.children) === null || _a === void 0 ? void 0 : _a.call(props, generateValueExtend(value).items, actions));\n});","map":null,"metadata":{},"sourceType":"module"}