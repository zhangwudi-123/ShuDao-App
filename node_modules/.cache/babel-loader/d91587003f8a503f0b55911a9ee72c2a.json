{"ast":null,"code":"import React, { useCallback, useMemo } from 'react';\nimport PickerView from '../picker-view';\nimport { withNativeProps } from '../../utils/native-props';\nimport { mergeProps } from '../../utils/with-default-props';\nimport { usePropsValue } from '../../utils/use-props-value';\nimport { generateDatePickerColumns, convertDateToStringArray, convertStringArrayToDate } from '../date-picker/date-picker-utils';\nimport useRenderLabel from './useRenderLabel';\nconst thisYear = new Date().getFullYear();\nconst defaultProps = {\n  min: new Date(new Date().setFullYear(thisYear - 10)),\n  max: new Date(new Date().setFullYear(thisYear + 10)),\n  precision: 'day'\n};\nexport const DatePickerView = p => {\n  var _a;\n\n  const props = mergeProps(defaultProps, p);\n  const {\n    renderLabel\n  } = props;\n  const [value, setValue] = usePropsValue({\n    value: props.value,\n    defaultValue: (_a = props.defaultValue) !== null && _a !== void 0 ? _a : null\n  });\n  const mergedRenderLabel = useRenderLabel(renderLabel);\n  const pickerValue = useMemo(() => convertDateToStringArray(value, props.precision), [value, props.precision]);\n  const onChange = useCallback(val => {\n    var _a;\n\n    const date = convertStringArrayToDate(val, props.precision);\n\n    if (date) {\n      setValue(date);\n      (_a = props.onChange) === null || _a === void 0 ? void 0 : _a.call(props, date);\n    }\n  }, [props.onChange, props.precision]);\n  return withNativeProps(props, React.createElement(PickerView, {\n    columns: selected => generateDatePickerColumns(selected, props.min, props.max, props.precision, mergedRenderLabel, props.filter),\n    loading: props.loading,\n    loadingContent: props.loadingContent,\n    value: pickerValue,\n    mouseWheel: props.mouseWheel,\n    onChange: onChange\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}