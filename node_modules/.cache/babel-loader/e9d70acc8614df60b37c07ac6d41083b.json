{"ast":null,"code":"import $ from 'dom7';\nimport { window } from 'ssr-window';\nimport Utils from '../../utils/utils';\nimport Modal from '../modal/modal-class';\n\nclass Notification extends Modal {\n  constructor(app, params) {\n    const extendedParams = Utils.extend({\n      on: {}\n    }, app.params.notification, params); // Extends with open/close Modal methods;\n\n    super(app, extendedParams);\n    const notification = this;\n    notification.app = app;\n    notification.params = extendedParams;\n    const {\n      icon,\n      title,\n      titleRightText,\n      subtitle,\n      text,\n      closeButton,\n      closeTimeout,\n      cssClass,\n      closeOnClick\n    } = notification.params;\n    let $el;\n\n    if (!notification.params.el) {\n      // Find Element\n      const notificationHtml = notification.render({\n        icon,\n        title,\n        titleRightText,\n        subtitle,\n        text,\n        closeButton,\n        cssClass\n      });\n      $el = $(notificationHtml);\n    } else {\n      $el = $(notification.params.el);\n    }\n\n    if ($el && $el.length > 0 && $el[0].f7Modal) {\n      return $el[0].f7Modal;\n    }\n\n    if ($el.length === 0) {\n      return notification.destroy();\n    }\n\n    Utils.extend(notification, {\n      $el,\n      el: $el[0],\n      type: 'notification'\n    });\n    $el[0].f7Modal = notification;\n\n    if (closeButton) {\n      $el.find('.notification-close-button').on('click', () => {\n        notification.close();\n      });\n    }\n\n    $el.on('click', e => {\n      if (closeButton && $(e.target).closest('.notification-close-button').length) {\n        return;\n      }\n\n      notification.emit('local::click notificationClick', notification);\n      if (closeOnClick) notification.close();\n    });\n    notification.on('beforeDestroy', () => {\n      $el.off('click');\n    });\n    /* Touch Events */\n\n    let isTouched;\n    let isMoved;\n    let isScrolling;\n    let touchesDiff;\n    let touchStartTime;\n    let notificationHeight;\n    const touchesStart = {};\n\n    function handleTouchStart(e) {\n      if (isTouched) return;\n      isTouched = true;\n      isMoved = false;\n      isScrolling = undefined;\n      touchStartTime = Utils.now();\n      touchesStart.x = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;\n      touchesStart.y = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;\n    }\n\n    function handleTouchMove(e) {\n      if (!isTouched) return;\n      const pageX = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;\n      const pageY = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;\n\n      if (typeof isScrolling === 'undefined') {\n        isScrolling = !!(isScrolling || Math.abs(pageY - touchesStart.y) < Math.abs(pageX - touchesStart.x));\n      }\n\n      if (isScrolling) {\n        isTouched = false;\n        return;\n      }\n\n      e.preventDefault();\n\n      if (!isMoved) {\n        notification.$el.removeClass('notification-transitioning');\n        notification.$el.transition(0);\n        notificationHeight = notification.$el[0].offsetHeight / 2;\n      }\n\n      isMoved = true;\n      touchesDiff = pageY - touchesStart.y;\n      let newTranslate = touchesDiff;\n\n      if (touchesDiff > 0) {\n        newTranslate = touchesDiff ** 0.8;\n      }\n\n      notification.$el.transform(`translate3d(0, ${newTranslate}px, 0)`);\n    }\n\n    function handleTouchEnd() {\n      if (!isTouched || !isMoved) {\n        isTouched = false;\n        isMoved = false;\n        return;\n      }\n\n      isTouched = false;\n      isMoved = false;\n\n      if (touchesDiff === 0) {\n        return;\n      }\n\n      const timeDiff = Utils.now() - touchStartTime;\n      notification.$el.transition('');\n      notification.$el.addClass('notification-transitioning');\n      notification.$el.transform('');\n\n      if (touchesDiff < -10 && timeDiff < 300 || -touchesDiff >= notificationHeight / 1) {\n        notification.close();\n      }\n    }\n\n    function attachTouchEvents() {\n      notification.$el.on(app.touchEvents.start, handleTouchStart, {\n        passive: true\n      });\n      app.on('touchmove:active', handleTouchMove);\n      app.on('touchend:passive', handleTouchEnd);\n    }\n\n    function detachTouchEvents() {\n      notification.$el.off(app.touchEvents.start, handleTouchStart, {\n        passive: true\n      });\n      app.off('touchmove:active', handleTouchMove);\n      app.off('touchend:passive', handleTouchEnd);\n    }\n\n    let timeoutId;\n\n    function closeOnTimeout() {\n      timeoutId = Utils.nextTick(() => {\n        if (isTouched && isMoved) {\n          closeOnTimeout();\n          return;\n        }\n\n        notification.close();\n      }, closeTimeout);\n    }\n\n    notification.on('open', () => {\n      if (notification.params.swipeToClose) {\n        attachTouchEvents();\n      }\n\n      $('.notification.modal-in').each((index, openedEl) => {\n        const notificationInstance = app.notification.get(openedEl);\n\n        if (openedEl !== notification.el && notificationInstance) {\n          notificationInstance.close();\n        }\n      });\n\n      if (closeTimeout) {\n        closeOnTimeout();\n      }\n    });\n    notification.on('close beforeDestroy', () => {\n      if (notification.params.swipeToClose) {\n        detachTouchEvents();\n      }\n\n      window.clearTimeout(timeoutId);\n    });\n    return notification;\n  }\n\n  render() {\n    const notification = this;\n    if (notification.params.render) return notification.params.render.call(notification, notification);\n    const {\n      icon,\n      title,\n      titleRightText,\n      subtitle,\n      text,\n      closeButton,\n      cssClass\n    } = notification.params;\n    return `\n      <div class=\"notification ${cssClass || ''}\">\n        <div class=\"notification-header\">\n          ${icon ? `<div class=\"notification-icon\">${icon}</div>` : ''}\n          ${title ? `<div class=\"notification-title\">${title}</div>` : ''}\n          ${titleRightText ? `<div class=\"notification-title-right-text\">${titleRightText}</div>` : ''}\n          ${closeButton ? '<span class=\"notification-close-button\"></span>' : ''}\n        </div>\n        <div class=\"notification-content\">\n          ${subtitle ? `<div class=\"notification-subtitle\">${subtitle}</div>` : ''}\n          ${text ? `<div class=\"notification-text\">${text}</div>` : ''}\n        </div>\n      </div>\n    `.trim();\n  }\n\n}\n\nexport default Notification;","map":null,"metadata":{},"sourceType":"module"}