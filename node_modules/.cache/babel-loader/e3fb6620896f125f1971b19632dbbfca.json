{"ast":null,"code":"import $ from 'dom7';\nimport Utils from '../../utils/utils';\nimport Framework7Class from '../../utils/class';\nconst textEditorButtonsMap = {\n  // f7-icon, material-icon, command\n  bold: ['bold', 'format_bold', 'bold'],\n  italic: ['italic', 'format_italic', 'italic'],\n  underline: ['underline', 'format_underline', 'underline'],\n  strikeThrough: ['strikethrough', 'strikethrough_s', 'strikeThrough'],\n  orderedList: ['list_number', 'format_list_numbered', 'insertOrderedList'],\n  unorderedList: ['list_bullet', 'format_list_bulleted', 'insertUnorderedList'],\n  link: ['link', 'link', 'createLink'],\n  image: ['photo', 'image', 'insertImage'],\n  paragraph: ['paragraph', '<i class=\"icon\">Â¶</i>', 'formatBlock.P'],\n  h1: ['<i class=\"icon\">H<sub>1</sub></i>', '<i class=\"icon\">H<sub>1</sub></i>', 'formatBlock.H1'],\n  h2: ['<i class=\"icon\">H<sub>2</sub></i>', '<i class=\"icon\">H<sub>2</sub></i>', 'formatBlock.H2'],\n  h3: ['<i class=\"icon\">H<sub>3</sub></i>', '<i class=\"icon\">H<sub>3</sub></i>', 'formatBlock.H3'],\n  alignLeft: ['text_alignleft', 'format_align_left', 'justifyLeft'],\n  alignCenter: ['text_aligncenter', 'format_align_center', 'justifyCenter'],\n  alignRight: ['text_alignright', 'format_align_right', 'justifyRight'],\n  alignJustify: ['text_justify', 'format_align_justify', 'justifyFull'],\n  subscript: ['textformat_subscript', '<i class=\"icon\">A<sub>1</sub></i>', 'subscript'],\n  superscript: ['textformat_superscript', '<i class=\"icon\">A<sup>1</sup></i>', 'superscript'],\n  indent: ['increase_indent', 'format_indent_increase', 'indent'],\n  outdent: ['decrease_indent', 'format_indent_decrease', 'outdent']\n};\n\nclass TextEditor extends Framework7Class {\n  constructor(app, params) {\n    super(params, [app]);\n    const self = this;\n    const defaults = Utils.extend({}, app.params.textEditor); // Extend defaults with modules params\n\n    self.useModulesParams(defaults);\n    self.params = Utils.extend(defaults, params);\n    const el = self.params.el;\n    if (!el) return self;\n    const $el = $(el);\n    if ($el.length === 0) return self;\n    if ($el[0].f7TextEditor) return $el[0].f7TextEditor;\n    let $contentEl = $el.children('.text-editor-content');\n\n    if (!$contentEl.length) {\n      $el.append('<div class=\"text-editor-content\" contenteditable></div>');\n      $contentEl = $el.children('.text-editor-content');\n    }\n\n    Utils.extend(self, {\n      app,\n      $el,\n      el: $el[0],\n      $contentEl,\n      contentEl: $contentEl[0]\n    });\n\n    if ('value' in params) {\n      self.value = self.params.value;\n    }\n\n    if (self.params.mode === 'keyboard-toolbar') {\n      if (!app.device.cordova && !app.device.android) {\n        self.params.mode = 'popover';\n      }\n    }\n\n    if (typeof self.params.buttons === 'string') {\n      try {\n        self.params.buttons = JSON.parse(self.params.buttons);\n      } catch (err) {\n        throw new Error('Framework7: TextEditor: wrong \"buttons\" parameter format');\n      }\n    }\n\n    $el[0].f7TextEditor = self; // Bind\n\n    self.onButtonClick = self.onButtonClick.bind(self);\n    self.onFocus = self.onFocus.bind(self);\n    self.onBlur = self.onBlur.bind(self);\n    self.onInput = self.onInput.bind(self);\n    self.onPaste = self.onPaste.bind(self);\n    self.onSelectionChange = self.onSelectionChange.bind(self); // Handle Events\n\n    self.attachEvents = function attachEvents() {\n      if (self.params.mode === 'toolbar') {\n        self.$el.find('.text-editor-toolbar').on('click', 'button', self.onButtonClick);\n      }\n\n      if (self.params.mode === 'keyboard-toolbar') {\n        self.$keyboardToolbarEl.on('click', 'button', self.onButtonClick);\n      }\n\n      if (self.params.mode === 'popover' && self.popover) {\n        self.popover.$el.on('click', 'button', self.onButtonClick);\n      }\n\n      self.$contentEl.on('paste', self.onPaste);\n      self.$contentEl.on('focus', self.onFocus);\n      self.$contentEl.on('blur', self.onBlur);\n      self.$contentEl.on('input', self.onInput, true);\n      $(document).on('selectionchange', self.onSelectionChange);\n    };\n\n    self.detachEvents = function detachEvents() {\n      if (self.params.mode === 'toolbar') {\n        self.$el.find('.text-editor-toolbar').off('click', 'button', self.onButtonClick);\n      }\n\n      if (self.params.mode === 'keyboard-toolbar') {\n        self.$keyboardToolbarEl.off('click', 'button', self.onButtonClick);\n      }\n\n      if (self.params.mode === 'popover' && self.popover) {\n        self.popover.$el.off('click', 'button', self.onButtonClick);\n      }\n\n      self.$contentEl.off('paste', self.onPaste);\n      self.$contentEl.off('focus', self.onFocus);\n      self.$contentEl.off('blur', self.onBlur);\n      self.$contentEl.off('input', self.onInput, true);\n      $(document).off('selectionchange', self.onSelectionChange);\n    }; // Install Modules\n\n\n    self.useModules(); // Init\n\n    self.init();\n    return self;\n  }\n\n  setValue(newValue) {\n    const self = this;\n    const currentValue = self.value;\n    if (currentValue === newValue) return self;\n    self.value = newValue;\n    self.$contentEl.html(newValue);\n    self.$el.trigger('texteditor:change', self.value);\n    self.emit('local::change textEditorChange', self, self.value);\n    return self;\n  }\n\n  getValue() {\n    const self = this;\n    return self.value;\n  }\n\n  createLink() {\n    const self = this;\n    const currentSelection = window.getSelection();\n    const selectedNodes = [];\n    let $selectedLinks;\n\n    if (currentSelection && currentSelection.anchorNode && $(currentSelection.anchorNode).parents(self.$el).length) {\n      let anchorNode = currentSelection.anchorNode;\n\n      while (anchorNode) {\n        selectedNodes.push(anchorNode);\n\n        if (!anchorNode.nextSibling || anchorNode === currentSelection.focusNode) {\n          anchorNode = null;\n        }\n\n        if (anchorNode) {\n          anchorNode = anchorNode.nextSibling;\n        }\n      }\n\n      $selectedLinks = $(selectedNodes).closest('a').add($(selectedNodes).children('a'));\n    }\n\n    if ($selectedLinks && $selectedLinks.length) {\n      $selectedLinks.each((linkIndex, linkNode) => {\n        const selection = window.getSelection();\n        const range = document.createRange();\n        range.selectNodeContents(linkNode);\n        selection.removeAllRanges();\n        selection.addRange(range);\n        document.execCommand('unlink', false);\n        selection.removeAllRanges();\n      });\n      return self;\n    }\n\n    const currentRange = self.getSelectionRange();\n    if (!currentRange) return self;\n    const dialog = self.app.dialog.prompt(self.params.linkUrlText, '', link => {\n      if (link && link.trim().length) {\n        self.setSelectionRange(currentRange);\n        document.execCommand('createLink', false, link.trim());\n      }\n    });\n    dialog.$el.find('input').focus();\n    return self;\n  }\n\n  insertImage() {\n    const self = this;\n    const currentRange = self.getSelectionRange();\n    if (!currentRange) return self;\n    const dialog = self.app.dialog.prompt(self.params.imageUrlText, '', imageUrl => {\n      if (imageUrl && imageUrl.trim().length) {\n        self.setSelectionRange(currentRange);\n        document.execCommand('insertImage', false, imageUrl.trim());\n      }\n    });\n    dialog.$el.find('input').focus();\n    return self;\n  }\n\n  removePlaceholder() {\n    const self = this;\n    self.$contentEl.find('.text-editor-placeholder').remove();\n  }\n\n  insertPlaceholder() {\n    const self = this;\n    self.$contentEl.append(`<div class=\"text-editor-placeholder\">${self.params.placeholder}</div>`);\n  }\n\n  onSelectionChange() {\n    const self = this;\n    if (self.params.mode === 'toolbar') return;\n    const selection = window.getSelection();\n    const selectionIsInContent = $(selection.anchorNode).parents(self.contentEl).length || selection.anchorNode === self.contentEl;\n\n    if (self.params.mode === 'keyboard-toolbar') {\n      if (!selectionIsInContent) {\n        self.closeKeyboardToolbar();\n      } else {\n        self.openKeyboardToolbar();\n      }\n\n      return;\n    }\n\n    if (self.params.mode === 'popover') {\n      const selectionIsInPopover = $(selection.anchorNode).parents(self.popover.el).length || selection.anchorNode === self.popover.el;\n\n      if (!selectionIsInContent && !selectionIsInPopover) {\n        self.closePopover();\n        return;\n      }\n\n      if (!selection.isCollapsed && selection.rangeCount) {\n        const range = selection.getRangeAt(0);\n        const rect = range.getBoundingClientRect();\n        self.openPopover(rect.x + (window.scrollX || 0), rect.y + (window.scrollY || 0), rect.width, rect.height);\n      } else if (selection.isCollapsed) {\n        self.closePopover();\n      }\n    }\n  }\n\n  onPaste(e) {\n    const self = this;\n\n    if (self.params.clearFormattingOnPaste && e.clipboardData && e.clipboardData.getData) {\n      const text = e.clipboardData.getData('text/plain');\n      e.preventDefault();\n      document.execCommand('insertText', false, text);\n    }\n  }\n\n  onInput() {\n    const self = this;\n    const value = self.$contentEl.html();\n    self.$el.trigger('texteditor:input');\n    self.emit('local:input textEditorInput', self);\n    self.value = value;\n    self.$el.trigger('texteditor:change', self.value);\n    self.emit('local::change textEditorChange', self, self.value);\n  }\n\n  onFocus() {\n    const self = this;\n    self.removePlaceholder();\n    self.$contentEl.focus();\n    self.$el.trigger('texteditor:focus');\n    self.emit('local::focus textEditorFocus', self);\n  }\n\n  onBlur() {\n    const self = this;\n\n    if (self.params.placeholder && self.$contentEl.html() === '') {\n      self.insertPlaceholder();\n    }\n\n    if (self.params.mode === 'popover') {\n      const selection = window.getSelection();\n      const selectionIsInContent = $(selection.anchorNode).parents(self.contentEl).length || selection.anchorNode === self.contentEl;\n      const inPopover = document.activeElement && self.popover && $(document.activeElement).closest(self.popover.$el).length;\n\n      if (!inPopover && !selectionIsInContent) {\n        self.closePopover();\n      }\n    }\n\n    if (self.params.mode === 'keyboard-toolbar') {\n      const selection = window.getSelection();\n      const selectionIsInContent = $(selection.anchorNode).parents(self.contentEl).length || selection.anchorNode === self.contentEl;\n\n      if (!selectionIsInContent) {\n        self.closeKeyboardToolbar();\n      }\n    }\n\n    self.$el.trigger('texteditor:blur');\n    self.emit('local::blur textEditorBlur', self);\n  }\n\n  onButtonClick(e) {\n    const self = this;\n    const selection = window.getSelection();\n    const selectionIsInContent = $(selection.anchorNode).parents(self.contentEl).length || selection.anchorNode === self.contentEl;\n    if (!selectionIsInContent) return;\n    const $buttonEl = $(e.target).closest('button');\n\n    if ($buttonEl.parents('form').length) {\n      e.preventDefault();\n    }\n\n    const button = $buttonEl.attr('data-button');\n    const buttonData = self.params.customButtons && self.params.customButtons[button];\n    if (!button || !(textEditorButtonsMap[button] || buttonData)) return;\n    $buttonEl.trigger('texteditor:buttonclick', button);\n    self.emit('local::buttonClick textEditorButtonClick', self, button);\n\n    if (buttonData) {\n      if (buttonData.onClick) buttonData.onClick();\n      return;\n    }\n\n    const command = textEditorButtonsMap[button][2];\n\n    if (command === 'createLink') {\n      self.createLink();\n      return;\n    }\n\n    if (command === 'insertImage') {\n      self.insertImage();\n      return;\n    }\n\n    if (command.indexOf('formatBlock') === 0) {\n      const tagName = command.split('.')[1];\n      const $anchorNode = $(selection.anchorNode);\n\n      if ($anchorNode.parents(tagName.toLowerCase()).length || $anchorNode.is(tagName)) {\n        document.execCommand('formatBlock', false, 'div');\n      } else {\n        document.execCommand('formatBlock', false, tagName);\n      }\n\n      return;\n    }\n\n    document.execCommand(command, false);\n  } // eslint-disable-next-line\n\n\n  getSelectionRange() {\n    if (window.getSelection) {\n      const sel = window.getSelection();\n\n      if (sel.getRangeAt && sel.rangeCount) {\n        return sel.getRangeAt(0);\n      }\n    } else if (document.selection && document.selection.createRange) {\n      return document.selection.createRange();\n    }\n\n    return null;\n  } // eslint-disable-next-line\n\n\n  setSelectionRange(range) {\n    if (range) {\n      if (window.getSelection) {\n        const sel = window.getSelection();\n        sel.removeAllRanges();\n        sel.addRange(range);\n      } else if (document.selection && range.select) {\n        range.select();\n      }\n    }\n  }\n\n  renderButtons() {\n    const self = this;\n    let html = '';\n\n    function renderButton(button) {\n      const iconClass = self.app.theme === 'md' ? 'material-icons' : 'f7-icons';\n\n      if (self.params.customButtons && self.params.customButtons[button]) {\n        const buttonData = self.params.customButtons[button];\n        return `<button class=\"text-editor-button\" data-button=\"${button}\">${buttonData.content || ''}</button>`;\n      }\n\n      if (!textEditorButtonsMap[button]) return '';\n      const iconContent = textEditorButtonsMap[button][self.app.theme === 'md' ? 1 : 0];\n      return `<button class=\"text-editor-button\" data-button=\"${button}\">${iconContent.indexOf('<') >= 0 ? iconContent : `<i class=\"${iconClass}\">${iconContent}</i>`}</button>`.trim();\n    }\n\n    self.params.buttons.forEach((button, buttonIndex) => {\n      if (Array.isArray(button)) {\n        button.forEach(b => {\n          html += renderButton(b);\n        });\n\n        if (buttonIndex < self.params.buttons.length - 1 && self.params.dividers) {\n          html += '<div class=\"text-editor-button-divider\"></div>';\n        }\n      } else {\n        html += renderButton(button);\n      }\n    });\n    return html;\n  }\n\n  createToolbar() {\n    const self = this;\n    self.$el.prepend(`<div class=\"text-editor-toolbar\">${self.renderButtons()}</div>`);\n  }\n\n  createKeyboardToolbar() {\n    const self = this;\n    const isDark = self.$el.closest('.theme-dark').length > 0 || self.app.device.prefersColorScheme() === 'dark';\n    self.$keyboardToolbarEl = $(`<div class=\"toolbar toolbar-bottom text-editor-keyboard-toolbar ${isDark ? 'theme-dark' : ''}\"><div class=\"toolbar-inner\">${self.renderButtons()}</div></div>`);\n  }\n\n  createPopover() {\n    const self = this;\n    const isDark = self.$el.closest('.theme-dark').length > 0;\n    self.popover = self.app.popover.create({\n      content: `\n        <div class=\"popover ${isDark ? 'theme-light' : 'theme-dark'} text-editor-popover\">\n          <div class=\"popover-inner\">${self.renderButtons()}</div>\n        </div>\n      `,\n      closeByOutsideClick: false,\n      backdrop: false\n    });\n  }\n\n  openKeyboardToolbar() {\n    const self = this;\n    if (self.$keyboardToolbarEl.parent(self.app.root).length) return;\n    self.$el.trigger('texteditor:keyboardopen');\n    self.emit('local::keyboardOpen textEditorKeyboardOpen', self);\n    self.app.root.append(self.$keyboardToolbarEl);\n  }\n\n  closeKeyboardToolbar() {\n    const self = this;\n    self.$keyboardToolbarEl.remove();\n    self.$el.trigger('texteditor:keyboardclose');\n    self.emit('local::keyboardClose textEditorKeyboardClose', self);\n  }\n\n  openPopover(targetX, targetY, targetWidth, targetHeight) {\n    const self = this;\n    if (!self.popover) return;\n    Object.assign(self.popover.params, {\n      targetX,\n      targetY,\n      targetWidth,\n      targetHeight\n    });\n    clearTimeout(self.popoverTimeout);\n    self.popoverTimeout = setTimeout(() => {\n      if (!self.popover) return;\n\n      if (self.popover.opened) {\n        self.popover.resize();\n      } else {\n        self.$el.trigger('texteditor:popoveropen');\n        self.emit('local::popoverOpen textEditorPopoverOpen', self);\n        self.popover.open();\n      }\n    }, 400);\n  }\n\n  closePopover() {\n    const self = this;\n    clearTimeout(self.popoverTimeout);\n    if (!self.popover || !self.popover.opened) return;\n    self.popoverTimeout = setTimeout(() => {\n      if (!self.popover) return;\n      self.$el.trigger('texteditor:popoverclose');\n      self.emit('local::popoverClose textEditorPopoverClose', self);\n      self.popover.close();\n    }, 400);\n  }\n\n  init() {\n    const self = this;\n\n    if (self.value) {\n      self.$contentEl.html(self.value);\n    } else {\n      self.value = self.$contentEl.html();\n    }\n\n    if (self.params.placeholder && self.value === '') {\n      self.insertPlaceholder();\n    }\n\n    if (self.params.mode === 'toolbar') {\n      self.createToolbar();\n    } else if (self.params.mode === 'popover') {\n      self.createPopover();\n    } else if (self.params.mode === 'keyboard-toolbar') {\n      self.createKeyboardToolbar();\n    }\n\n    self.attachEvents();\n    return self;\n  }\n\n  destroy() {\n    let self = this;\n    self.$el.trigger('texteditor:beforedestroy');\n    self.emit('local::beforeDestroy textEditorBeforeDestroy', self);\n    self.detachEvents();\n\n    if (self.popover) {\n      self.popover.close(false);\n      self.popover.destroy();\n    }\n\n    delete self.$el[0].f7TextEditor;\n    Utils.deleteProps(self);\n    self = null;\n  }\n\n}\n\nexport default TextEditor;","map":null,"metadata":{},"sourceType":"module"}