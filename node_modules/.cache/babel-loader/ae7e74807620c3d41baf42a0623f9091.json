{"ast":null,"code":"import $ from 'dom7';\nimport Utils from '../../utils/utils';\nimport SmartSelect from './smart-select-class';\nimport ConstructorMethods from '../../utils/constructor-methods';\nexport default {\n  name: 'smartSelect',\n  params: {\n    smartSelect: {\n      el: undefined,\n      valueEl: undefined,\n      setValueText: true,\n      formatValueText: null,\n      openIn: 'page',\n      // or 'popup' or 'sheet' or 'popover'\n      popupPush: false,\n      popupSwipeToClose: undefined,\n      // defaults to app\n      sheetPush: false,\n      sheetSwipeToClose: undefined,\n      // defaults to app\n      pageTitle: undefined,\n      pageBackLinkText: 'Back',\n      popupCloseLinkText: 'Close',\n      popupTabletFullscreen: false,\n      sheetCloseLinkText: 'Done',\n      searchbar: false,\n      searchbarPlaceholder: 'Search',\n      searchbarDisableText: 'Cancel',\n      searchbarDisableButton: undefined,\n      closeOnSelect: false,\n      virtualList: false,\n      virtualListHeight: undefined,\n      scrollToSelectedItem: false,\n      formColorTheme: undefined,\n      navbarColorTheme: undefined,\n      routableModals: true,\n      url: 'select/',\n      cssClass: '',\n\n      /*\r\n        Custom render functions\r\n      */\n      renderPage: undefined,\n      renderPopup: undefined,\n      renderSheet: undefined,\n      renderPopover: undefined,\n      renderItems: undefined,\n      renderItem: undefined,\n      renderSearchbar: undefined\n    }\n  },\n  static: {\n    SmartSelect\n  },\n\n  create() {\n    const app = this;\n    app.smartSelect = Utils.extend(ConstructorMethods({\n      defaultSelector: '.smart-select',\n      constructor: SmartSelect,\n      app,\n      domProp: 'f7SmartSelect'\n    }), {\n      open(smartSelectEl) {\n        const ss = app.smartSelect.get(smartSelectEl);\n        if (ss && ss.open) return ss.open();\n        return undefined;\n      },\n\n      close(smartSelectEl) {\n        const ss = app.smartSelect.get(smartSelectEl);\n        if (ss && ss.close) return ss.close();\n        return undefined;\n      }\n\n    });\n  },\n\n  on: {\n    tabMounted(tabEl) {\n      const app = this;\n      $(tabEl).find('.smart-select-init').each((index, smartSelectEl) => {\n        app.smartSelect.create(Utils.extend({\n          el: smartSelectEl\n        }, $(smartSelectEl).dataset()));\n      });\n    },\n\n    tabBeforeRemove(tabEl) {\n      $(tabEl).find('.smart-select-init').each((index, smartSelectEl) => {\n        if (smartSelectEl.f7SmartSelect && smartSelectEl.f7SmartSelect.destroy) {\n          smartSelectEl.f7SmartSelect.destroy();\n        }\n      });\n    },\n\n    pageInit(page) {\n      const app = this;\n      page.$el.find('.smart-select-init').each((index, smartSelectEl) => {\n        app.smartSelect.create(Utils.extend({\n          el: smartSelectEl\n        }, $(smartSelectEl).dataset()));\n      });\n    },\n\n    pageBeforeRemove(page) {\n      page.$el.find('.smart-select-init').each((index, smartSelectEl) => {\n        if (smartSelectEl.f7SmartSelect && smartSelectEl.f7SmartSelect.destroy) {\n          smartSelectEl.f7SmartSelect.destroy();\n        }\n      });\n    }\n\n  },\n  clicks: {\n    '.smart-select': function open($clickedEl, data) {\n      const app = this;\n\n      if (!$clickedEl[0].f7SmartSelect) {\n        const ss = app.smartSelect.create(Utils.extend({\n          el: $clickedEl\n        }, data));\n        ss.open();\n      }\n    }\n  },\n  vnode: {\n    'smart-select-init': {\n      insert(vnode) {\n        const app = this;\n        const smartSelectEl = vnode.elm;\n        app.smartSelect.create(Utils.extend({\n          el: smartSelectEl\n        }, $(smartSelectEl).dataset()));\n      },\n\n      destroy(vnode) {\n        const smartSelectEl = vnode.elm;\n\n        if (smartSelectEl.f7SmartSelect && smartSelectEl.f7SmartSelect.destroy) {\n          smartSelectEl.f7SmartSelect.destroy();\n        }\n      }\n\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}