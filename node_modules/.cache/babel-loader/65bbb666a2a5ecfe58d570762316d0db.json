{"ast":null,"code":"const Utils = {\n  noUndefinedProps(obj) {\n    const o = {};\n    Object.keys(obj).forEach(key => {\n      if (typeof obj[key] !== 'undefined') o[key] = obj[key];\n    });\n    return o;\n  },\n\n  isTrueProp(val) {\n    return val === true || val === '';\n  },\n\n  isStringProp(val) {\n    return typeof val === 'string' && val !== '';\n  },\n\n  isObject(o) {\n    return typeof o === 'object' && o !== null && o.constructor && o.constructor === Object;\n  },\n\n  now() {\n    return Date.now();\n  },\n\n  extend() {\n    let deep = true;\n    let to;\n    let from;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (typeof args[0] === 'boolean') {\n      [deep, to] = args;\n      args.splice(0, 2);\n      from = args;\n    } else {\n      [to] = args;\n      args.splice(0, 1);\n      from = args;\n    }\n\n    for (let i = 0; i < from.length; i += 1) {\n      const nextSource = args[i];\n\n      if (nextSource !== undefined && nextSource !== null) {\n        const keysArray = Object.keys(Object(nextSource));\n\n        for (let nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex += 1) {\n          const nextKey = keysArray[nextIndex];\n          const desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\n\n          if (desc !== undefined && desc.enumerable) {\n            if (!deep) {\n              to[nextKey] = nextSource[nextKey];\n            } else if (Utils.isObject(to[nextKey]) && Utils.isObject(nextSource[nextKey])) {\n              Utils.extend(to[nextKey], nextSource[nextKey]);\n            } else if (!Utils.isObject(to[nextKey]) && Utils.isObject(nextSource[nextKey])) {\n              to[nextKey] = {};\n              Utils.extend(to[nextKey], nextSource[nextKey]);\n            } else {\n              to[nextKey] = nextSource[nextKey];\n            }\n          }\n        }\n      }\n    }\n\n    return to;\n  },\n\n  flattenArray() {\n    const arr = [];\n\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    args.forEach(arg => {\n      if (Array.isArray(arg)) arr.push(...Utils.flattenArray(...arg));else arr.push(arg);\n    });\n    return arr;\n  },\n\n  classNames() {\n    const classes = [];\n\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    args.forEach(arg => {\n      if (typeof arg === 'object' && arg.constructor === Object) {\n        Object.keys(arg).forEach(key => {\n          if (arg[key]) classes.push(key);\n        });\n      } else if (arg) classes.push(arg);\n    });\n    const uniqueClasses = [];\n    classes.forEach(c => {\n      if (uniqueClasses.indexOf(c) < 0) uniqueClasses.push(c);\n    });\n    return uniqueClasses.join(' ');\n  },\n\n  bindMethods(context) {\n    let methods = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    for (let i = 0; i < methods.length; i += 1) {\n      if (context[methods[i]]) context[methods[i]] = context[methods[i]].bind(context);\n    }\n  }\n\n};\nexport default Utils;","map":null,"metadata":{},"sourceType":"module"}