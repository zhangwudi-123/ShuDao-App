{"ast":null,"code":"class EventsClass {\n  constructor() {\n    let parents = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    const self = this;\n    self.eventsParents = parents;\n    self.eventsListeners = {};\n  }\n\n  on(events, handler, priority) {\n    const self = this;\n    if (typeof handler !== 'function') return self;\n    const method = priority ? 'unshift' : 'push';\n    events.split(' ').forEach(event => {\n      if (!self.eventsListeners[event]) self.eventsListeners[event] = [];\n      self.eventsListeners[event][method](handler);\n    });\n    return self;\n  }\n\n  once(events, handler, priority) {\n    const self = this;\n    if (typeof handler !== 'function') return self;\n\n    function onceHandler() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      handler.apply(self, args);\n      self.off(events, onceHandler);\n\n      if (onceHandler.f7proxy) {\n        delete onceHandler.f7proxy;\n      }\n    }\n\n    onceHandler.f7proxy = handler;\n    return self.on(events, onceHandler, priority);\n  }\n\n  off(events, handler) {\n    const self = this;\n    if (!self.eventsListeners) return self;\n    events.split(' ').forEach(event => {\n      if (typeof handler === 'undefined') {\n        self.eventsListeners[event] = [];\n      } else if (self.eventsListeners[event]) {\n        self.eventsListeners[event].forEach((eventHandler, index) => {\n          if (eventHandler === handler || eventHandler.f7proxy && eventHandler.f7proxy === handler) {\n            self.eventsListeners[event].splice(index, 1);\n          }\n        });\n      }\n    });\n    return self;\n  }\n\n  emit() {\n    const self = this;\n    if (!self.eventsListeners) return self;\n    let events;\n    let data;\n    let context;\n    let eventsParents;\n\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    if (typeof args[0] === 'string' || Array.isArray(args[0])) {\n      events = args[0];\n      data = args.slice(1, args.length);\n      context = self;\n      eventsParents = self.eventsParents;\n    } else {\n      events = args[0].events;\n      data = args[0].data;\n      context = args[0].context || self;\n      eventsParents = args[0].local ? [] : args[0].parents || self.eventsParents;\n    }\n\n    const eventsArray = Array.isArray(events) ? events : events.split(' ');\n    const localEvents = eventsArray.map(eventName => eventName.replace('local::', ''));\n    const parentEvents = eventsArray.filter(eventName => eventName.indexOf('local::') < 0);\n    localEvents.forEach(event => {\n      if (self.eventsListeners && self.eventsListeners[event]) {\n        const handlers = [];\n        self.eventsListeners[event].forEach(eventHandler => {\n          handlers.push(eventHandler);\n        });\n        handlers.forEach(eventHandler => {\n          eventHandler.apply(context, data);\n        });\n      }\n    });\n\n    if (eventsParents && eventsParents.length > 0) {\n      eventsParents.forEach(eventsParent => {\n        eventsParent.emit(parentEvents, ...data);\n      });\n    }\n\n    return self;\n  }\n\n}\n\nexport default EventsClass;","map":null,"metadata":{},"sourceType":"module"}