{"ast":null,"code":"import Utils from '../../utils/utils';\nexport default {\n  name: 'routerComponentLoader',\n  proto: {\n    componentLoader(component, componentUrl) {\n      let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      let resolve = arguments.length > 3 ? arguments[3] : undefined;\n      let reject = arguments.length > 4 ? arguments[4] : undefined;\n      const router = this;\n      const {\n        app\n      } = router;\n      const url = typeof component === 'string' ? component : componentUrl;\n      const compiledUrl = router.replaceRequestUrlParams(url, options);\n\n      function compile(componentOptions) {\n        let context = options.context || {};\n        if (typeof context === 'function') context = context.call(router);else if (typeof context === 'string') {\n          try {\n            context = JSON.parse(context);\n          } catch (err) {\n            reject();\n            throw err;\n          }\n        }\n        const extendContext = Utils.merge({}, context, {\n          $route: options.route,\n          $f7route: options.route,\n          $router: router,\n          $f7router: router,\n          $theme: {\n            ios: app.theme === 'ios',\n            md: app.theme === 'md',\n            aurora: app.theme === 'aurora'\n          }\n        });\n        app.component.create(componentOptions, extendContext).then(createdComponent => {\n          resolve(createdComponent.el);\n        }).catch(err => {\n          reject();\n          throw new Error(err);\n        });\n      }\n\n      let cachedComponent;\n\n      if (compiledUrl && router.params.componentCache) {\n        router.cache.components.forEach(cached => {\n          if (cached.url === compiledUrl) cachedComponent = cached.component;\n        });\n      }\n\n      if (compiledUrl && cachedComponent) {\n        compile(cachedComponent);\n      } else if (compiledUrl && !cachedComponent) {\n        // Load via XHR\n        if (router.xhr) {\n          router.xhr.abort();\n          router.xhr = false;\n        }\n\n        router.xhrRequest(url, options).then(loadedComponent => {\n          const parsedComponent = app.component.parse(loadedComponent);\n\n          if (router.params.componentCache) {\n            router.cache.components.push({\n              url: compiledUrl,\n              component: parsedComponent\n            });\n          }\n\n          compile(parsedComponent);\n        }).catch(err => {\n          reject();\n          throw err;\n        });\n      } else {\n        compile(component);\n      }\n    },\n\n    modalComponentLoader(rootEl, component, componentUrl, options, resolve, reject) {\n      const router = this;\n      router.componentLoader(component, componentUrl, options, el => {\n        resolve(el);\n      }, reject);\n    },\n\n    tabComponentLoader(tabEl, component, componentUrl, options, resolve, reject) {\n      const router = this;\n      router.componentLoader(component, componentUrl, options, el => {\n        resolve(el);\n      }, reject);\n    },\n\n    pageComponentLoader(routerEl, component, componentUrl, options, resolve, reject) {\n      const router = this;\n      router.componentLoader(component, componentUrl, options, function (el) {\n        let newOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        resolve(el, newOptions);\n      }, reject);\n    }\n\n  }\n};","map":null,"metadata":{},"sourceType":"module"}