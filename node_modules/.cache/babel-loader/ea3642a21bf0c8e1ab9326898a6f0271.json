{"ast":null,"code":"import React, { forwardRef, useState, useImperativeHandle, useMemo } from 'react';\nimport { withNativeProps } from '../../utils/native-props';\nimport dayjs from 'dayjs';\nimport classNames from 'classnames';\nimport { mergeProps } from '../../utils/with-default-props';\nimport { ArrowLeft } from './arrow-left';\nimport { ArrowLeftDouble } from './arrow-left-double';\nimport { useConfig } from '../config-provider';\nimport isoWeek from 'dayjs/plugin/isoWeek';\nimport { useUpdateEffect } from 'ahooks';\nimport { usePropsValue } from '../../utils/use-props-value';\nimport { convertValueToRange, convertPageToDayjs } from './convert';\ndayjs.extend(isoWeek);\nconst classPrefix = 'adm-calendar';\nconst defaultProps = {\n  weekStartsOn: 'Sunday',\n  defaultValue: null,\n  allowClear: true,\n  prevMonthButton: React.createElement(ArrowLeft, null),\n  prevYearButton: React.createElement(ArrowLeftDouble, null),\n  nextMonthButton: React.createElement(ArrowLeft, null),\n  nextYearButton: React.createElement(ArrowLeftDouble, null)\n};\nexport const Calendar = forwardRef((p, ref) => {\n  const today = dayjs();\n  const props = mergeProps(defaultProps, p);\n  const {\n    locale\n  } = useConfig();\n  const markItems = [...locale.Calendar.markItems];\n\n  if (props.weekStartsOn === 'Sunday') {\n    const item = markItems.pop();\n    if (item) markItems.unshift(item);\n  }\n\n  const [dateRange, setDateRange] = usePropsValue({\n    value: props.value === undefined ? undefined : convertValueToRange(props.selectionMode, props.value),\n    defaultValue: convertValueToRange(props.selectionMode, props.defaultValue),\n    onChange: v => {\n      var _a, _b;\n\n      if (props.selectionMode === 'single') {\n        (_a = props.onChange) === null || _a === void 0 ? void 0 : _a.call(props, v ? v[0] : null);\n      } else if (props.selectionMode === 'range') {\n        (_b = props.onChange) === null || _b === void 0 ? void 0 : _b.call(props, v);\n      }\n    }\n  });\n  const [intermediate, setIntermediate] = useState(false);\n  const [current, setCurrent] = useState(() => dayjs(dateRange ? dateRange[0] : today).date(1));\n  useUpdateEffect(() => {\n    var _a;\n\n    (_a = props.onPageChange) === null || _a === void 0 ? void 0 : _a.call(props, current.year(), current.month() + 1);\n  }, [current]);\n  useImperativeHandle(ref, () => ({\n    jumpTo: pageOrPageGenerator => {\n      let page;\n\n      if (typeof pageOrPageGenerator === 'function') {\n        page = pageOrPageGenerator({\n          year: current.year(),\n          month: current.month() + 1\n        });\n      } else {\n        page = pageOrPageGenerator;\n      }\n\n      setCurrent(convertPageToDayjs(page));\n    },\n    jumpToToday: () => {\n      setCurrent(dayjs().date(1));\n    }\n  }));\n\n  const handlePageChange = (action, num, type) => {\n    const nxtCurrent = current[action](num, type);\n\n    if (action === 'subtract' && props.minPage) {\n      const minPage = convertPageToDayjs(props.minPage);\n\n      if (nxtCurrent.isBefore(minPage, type)) {\n        return;\n      }\n    }\n\n    if (action === 'add' && props.maxPage) {\n      const maxPage = convertPageToDayjs(props.maxPage);\n\n      if (nxtCurrent.isAfter(maxPage, type)) {\n        return;\n      }\n    }\n\n    setCurrent(nxtCurrent);\n  };\n\n  const header = React.createElement(\"div\", {\n    className: `${classPrefix}-header`\n  }, React.createElement(\"a\", {\n    className: `${classPrefix}-arrow-button ${classPrefix}-arrow-button-year`,\n    onClick: () => {\n      handlePageChange('subtract', 1, 'year');\n    }\n  }, props.prevYearButton), React.createElement(\"a\", {\n    className: `${classPrefix}-arrow-button ${classPrefix}-arrow-button-month`,\n    onClick: () => {\n      handlePageChange('subtract', 1, 'month');\n    }\n  }, props.prevMonthButton), React.createElement(\"div\", {\n    className: `${classPrefix}-title`\n  }, locale.Calendar.renderYearAndMonth(current.year(), current.month() + 1)), React.createElement(\"a\", {\n    className: classNames(`${classPrefix}-arrow-button`, `${classPrefix}-arrow-button-right`, `${classPrefix}-arrow-button-right-month`),\n    onClick: () => {\n      handlePageChange('add', 1, 'month');\n    }\n  }, props.nextMonthButton), React.createElement(\"a\", {\n    className: classNames(`${classPrefix}-arrow-button`, `${classPrefix}-arrow-button-right`, `${classPrefix}-arrow-button-right-year`),\n    onClick: () => {\n      handlePageChange('add', 1, 'year');\n    }\n  }, props.nextYearButton));\n  const maxDay = useMemo(() => props.max && dayjs(props.max), [props.max]);\n  const minDay = useMemo(() => props.min && dayjs(props.min), [props.min]);\n\n  function renderCells() {\n    var _a;\n\n    const cells = [];\n    let iterator = current.subtract(current.isoWeekday(), 'day');\n\n    if (props.weekStartsOn === 'Monday') {\n      iterator = iterator.add(1, 'day');\n    }\n\n    while (cells.length < 6 * 7) {\n      const d = iterator;\n      let isSelect = false;\n      let isBegin = false;\n      let isEnd = false;\n      let isSelectRowBegin = false;\n      let isSelectRowEnd = false;\n\n      if (dateRange) {\n        const [begin, end] = dateRange;\n        isBegin = d.isSame(begin, 'day');\n        isEnd = d.isSame(end, 'day');\n        isSelect = isBegin || isEnd || d.isAfter(begin, 'day') && d.isBefore(end, 'day');\n\n        if (isSelect) {\n          isSelectRowBegin = (cells.length % 7 === 0 || d.isSame(d.startOf('month'), 'day')) && !isBegin;\n          isSelectRowEnd = (cells.length % 7 === 6 || d.isSame(d.endOf('month'), 'day')) && !isEnd;\n        }\n      }\n\n      const inThisMonth = d.month() === current.month();\n      const disabled = props.shouldDisableDate ? props.shouldDisableDate(d.toDate()) : maxDay && d.isAfter(maxDay, 'day') || minDay && d.isBefore(minDay, 'day');\n      cells.push(React.createElement(\"div\", {\n        key: d.valueOf(),\n        className: classNames(`${classPrefix}-cell`, (disabled || !inThisMonth) && `${classPrefix}-cell-disabled`, inThisMonth && {\n          [`${classPrefix}-cell-today`]: d.isSame(today, 'day'),\n          [`${classPrefix}-cell-selected`]: isSelect,\n          [`${classPrefix}-cell-selected-begin`]: isBegin,\n          [`${classPrefix}-cell-selected-end`]: isEnd,\n          [`${classPrefix}-cell-selected-row-begin`]: isSelectRowBegin,\n          [`${classPrefix}-cell-selected-row-end`]: isSelectRowEnd\n        }),\n        onClick: () => {\n          if (!props.selectionMode) return;\n          if (disabled) return;\n          const date = d.toDate();\n\n          if (!inThisMonth) {\n            setCurrent(d.clone().date(1));\n          }\n\n          function shouldClear() {\n            if (!props.allowClear) return false;\n            if (!dateRange) return false;\n            const [begin, end] = dateRange;\n            return d.isSame(begin, 'date') && d.isSame(end, 'day');\n          }\n\n          if (props.selectionMode === 'single') {\n            if (props.allowClear && shouldClear()) {\n              setDateRange(null);\n              return;\n            }\n\n            setDateRange([date, date]);\n          } else if (props.selectionMode === 'range') {\n            if (!dateRange) {\n              setDateRange([date, date]);\n              setIntermediate(true);\n              return;\n            }\n\n            if (shouldClear()) {\n              setDateRange(null);\n              setIntermediate(false);\n              return;\n            }\n\n            if (intermediate) {\n              const another = dateRange[0];\n              setDateRange(another > date ? [date, another] : [another, date]);\n              setIntermediate(false);\n            } else {\n              setDateRange([date, date]);\n              setIntermediate(true);\n            }\n          }\n        }\n      }, React.createElement(\"div\", {\n        className: `${classPrefix}-cell-top`\n      }, props.renderDate ? props.renderDate(d.toDate()) : d.date()), React.createElement(\"div\", {\n        className: `${classPrefix}-cell-bottom`\n      }, (_a = props.renderLabel) === null || _a === void 0 ? void 0 : _a.call(props, d.toDate()))));\n      iterator = iterator.add(1, 'day');\n    }\n\n    return cells;\n  }\n\n  const body = React.createElement(\"div\", {\n    className: `${classPrefix}-cells`\n  }, renderCells());\n  const mark = React.createElement(\"div\", {\n    className: `${classPrefix}-mark`\n  }, markItems.map((item, index) => React.createElement(\"div\", {\n    key: index,\n    className: `${classPrefix}-mark-cell`\n  }, item)));\n  return withNativeProps(props, React.createElement(\"div\", {\n    className: classPrefix\n  }, header, mark, body));\n});","map":null,"metadata":{},"sourceType":"module"}