{"ast":null,"code":"import React, { useState, forwardRef, useImperativeHandle, useRef } from 'react';\nimport { usePropsValue } from '../../utils/use-props-value';\nimport { CloseCircleFill } from 'antd-mobile-icons';\nimport { withNativeProps } from '../../utils/native-props';\nimport { mergeProps } from '../../utils/with-default-props';\nimport classNames from 'classnames';\nimport { useIsomorphicLayoutEffect } from 'ahooks';\nimport { bound } from '../../utils/bound';\nimport { isIOS } from '../../utils/validate';\nimport { useConfig } from '../config-provider';\nconst classPrefix = `adm-input`;\nconst defaultProps = {\n  defaultValue: '',\n  onlyShowClearWhenFocus: true\n};\nexport const Input = forwardRef((p, ref) => {\n  const props = mergeProps(defaultProps, p);\n  const [value, setValue] = usePropsValue(props);\n  const [hasFocus, setHasFocus] = useState(false);\n  const compositionStartRef = useRef(false);\n  const nativeInputRef = useRef(null);\n  const {\n    locale\n  } = useConfig();\n  useImperativeHandle(ref, () => ({\n    clear: () => {\n      setValue('');\n    },\n    focus: () => {\n      var _a;\n\n      (_a = nativeInputRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n    },\n    blur: () => {\n      var _a;\n\n      (_a = nativeInputRef.current) === null || _a === void 0 ? void 0 : _a.blur();\n    },\n\n    get nativeElement() {\n      return nativeInputRef.current;\n    }\n\n  }));\n\n  const handleKeydown = e => {\n    var _a;\n\n    if (props.onEnterPress && (e.code === 'Enter' || e.keyCode === 13)) {\n      props.onEnterPress(e);\n    }\n\n    (_a = props.onKeyDown) === null || _a === void 0 ? void 0 : _a.call(props, e);\n  };\n\n  useIsomorphicLayoutEffect(() => {\n    var _a;\n\n    if (!props.enterKeyHint) return;\n    (_a = nativeInputRef.current) === null || _a === void 0 ? void 0 : _a.setAttribute('enterkeyhint', props.enterKeyHint);\n    return () => {\n      var _a;\n\n      (_a = nativeInputRef.current) === null || _a === void 0 ? void 0 : _a.removeAttribute('enterkeyhint');\n    };\n  }, [props.enterKeyHint]);\n\n  function checkValue() {\n    let nextValue = value;\n\n    if (props.type === 'number') {\n      nextValue = nextValue && bound(parseFloat(nextValue), props.min, props.max).toString();\n    }\n\n    if (nextValue !== value) {\n      setValue(nextValue);\n    }\n  }\n\n  const shouldShowClear = (() => {\n    if (!props.clearable || !value || props.readOnly) return false;\n\n    if (props.onlyShowClearWhenFocus) {\n      return hasFocus;\n    } else {\n      return true;\n    }\n  })();\n\n  return withNativeProps(props, React.createElement(\"div\", {\n    className: classNames(`${classPrefix}`, props.disabled && `${classPrefix}-disabled`)\n  }, React.createElement(\"input\", {\n    ref: nativeInputRef,\n    className: `${classPrefix}-element`,\n    value: value,\n    onChange: e => {\n      setValue(e.target.value);\n    },\n    onFocus: e => {\n      var _a;\n\n      setHasFocus(true);\n      (_a = props.onFocus) === null || _a === void 0 ? void 0 : _a.call(props, e);\n    },\n    onBlur: e => {\n      var _a;\n\n      setHasFocus(false);\n      checkValue();\n      (_a = props.onBlur) === null || _a === void 0 ? void 0 : _a.call(props, e);\n    },\n    id: props.id,\n    placeholder: props.placeholder,\n    disabled: props.disabled,\n    readOnly: props.readOnly,\n    maxLength: props.maxLength,\n    minLength: props.minLength,\n    max: props.max,\n    min: props.min,\n    autoComplete: props.autoComplete,\n    autoFocus: props.autoFocus,\n    pattern: props.pattern,\n    inputMode: props.inputMode,\n    type: props.type,\n    name: props.name,\n    autoCapitalize: props.autoCapitalize,\n    autoCorrect: props.autoCorrect,\n    onKeyDown: handleKeydown,\n    onKeyUp: props.onKeyUp,\n    onCompositionStart: e => {\n      var _a;\n\n      compositionStartRef.current = true;\n      (_a = props.onCompositionStart) === null || _a === void 0 ? void 0 : _a.call(props, e);\n    },\n    onCompositionEnd: e => {\n      var _a;\n\n      compositionStartRef.current = false;\n      (_a = props.onCompositionEnd) === null || _a === void 0 ? void 0 : _a.call(props, e);\n    },\n    onClick: props.onClick,\n    step: props.step,\n    role: props.role,\n    \"aria-valuenow\": props['aria-valuenow'],\n    \"aria-valuemax\": props['aria-valuemax'],\n    \"aria-valuemin\": props['aria-valuemin'],\n    \"aria-label\": props['aria-label']\n  }), shouldShowClear && React.createElement(\"div\", {\n    className: `${classPrefix}-clear`,\n    onMouseDown: e => {\n      e.preventDefault();\n    },\n    onClick: () => {\n      var _a, _b;\n\n      setValue('');\n      (_a = props.onClear) === null || _a === void 0 ? void 0 : _a.call(props); // https://github.com/ant-design/ant-design-mobile/issues/5212\n\n      if (isIOS() && compositionStartRef.current) {\n        compositionStartRef.current = false;\n        (_b = nativeInputRef.current) === null || _b === void 0 ? void 0 : _b.blur();\n      }\n    },\n    \"aria-label\": locale.Input.clear\n  }, React.createElement(CloseCircleFill, null))));\n});","map":null,"metadata":{},"sourceType":"module"}