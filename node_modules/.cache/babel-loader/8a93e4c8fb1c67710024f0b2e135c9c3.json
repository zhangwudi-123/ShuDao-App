{"ast":null,"code":"import $ from 'dom7';\nimport { window } from 'ssr-window';\nimport Utils from '../../utils/utils';\nimport Framework7Class from '../../utils/class';\nimport pickerColumn from './picker-column';\n\nclass Picker extends Framework7Class {\n  constructor(app) {\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(params, [app]);\n    const picker = this;\n    picker.params = Utils.extend({}, app.params.picker, params);\n    let $containerEl;\n\n    if (picker.params.containerEl) {\n      $containerEl = $(picker.params.containerEl);\n      if ($containerEl.length === 0) return picker;\n    }\n\n    let $inputEl;\n\n    if (picker.params.inputEl) {\n      $inputEl = $(picker.params.inputEl);\n    }\n\n    let view;\n\n    if ($inputEl) {\n      view = $inputEl.parents('.view').length && $inputEl.parents('.view')[0].f7View;\n    }\n\n    if (!view) view = app.views.main;\n    Utils.extend(picker, {\n      app,\n      $containerEl,\n      containerEl: $containerEl && $containerEl[0],\n      inline: $containerEl && $containerEl.length > 0,\n      needsOriginFix: app.device.ios || window.navigator.userAgent.toLowerCase().indexOf('safari') >= 0 && window.navigator.userAgent.toLowerCase().indexOf('chrome') < 0 && !app.device.android,\n      cols: [],\n      $inputEl,\n      inputEl: $inputEl && $inputEl[0],\n      initialized: false,\n      opened: false,\n      url: picker.params.url,\n      view\n    });\n\n    function onResize() {\n      picker.resizeCols();\n    }\n\n    function onInputClick() {\n      picker.open();\n    }\n\n    function onInputFocus(e) {\n      e.preventDefault();\n    }\n\n    function onHtmlClick(e) {\n      if (picker.destroyed || !picker.params) return;\n      const $targetEl = $(e.target);\n      if (picker.isPopover()) return;\n      if (!picker.opened || picker.closing) return;\n      if ($targetEl.closest('[class*=\"backdrop\"]').length) return;\n\n      if ($inputEl && $inputEl.length > 0) {\n        if ($targetEl[0] !== $inputEl[0] && $targetEl.closest('.sheet-modal').length === 0) {\n          picker.close();\n        }\n      } else if ($(e.target).closest('.sheet-modal').length === 0) {\n        picker.close();\n      }\n    } // Events\n\n\n    Utils.extend(picker, {\n      attachResizeEvent() {\n        app.on('resize', onResize);\n      },\n\n      detachResizeEvent() {\n        app.off('resize', onResize);\n      },\n\n      attachInputEvents() {\n        picker.$inputEl.on('click', onInputClick);\n\n        if (picker.params.inputReadOnly) {\n          picker.$inputEl.on('focus mousedown', onInputFocus);\n        }\n      },\n\n      detachInputEvents() {\n        picker.$inputEl.off('click', onInputClick);\n\n        if (picker.params.inputReadOnly) {\n          picker.$inputEl.off('focus mousedown', onInputFocus);\n        }\n      },\n\n      attachHtmlEvents() {\n        app.on('click', onHtmlClick);\n      },\n\n      detachHtmlEvents() {\n        app.off('click', onHtmlClick);\n      }\n\n    });\n    picker.init();\n    return picker;\n  }\n\n  initInput() {\n    const picker = this;\n    if (!picker.$inputEl) return;\n    if (picker.params.inputReadOnly) picker.$inputEl.prop('readOnly', true);\n  }\n\n  resizeCols() {\n    const picker = this;\n    if (!picker.opened) return;\n\n    for (let i = 0; i < picker.cols.length; i += 1) {\n      if (!picker.cols[i].divider) {\n        picker.cols[i].calcSize();\n        picker.cols[i].setValue(picker.cols[i].value, 0, false);\n      }\n    }\n  }\n\n  isPopover() {\n    const picker = this;\n    const {\n      app,\n      modal,\n      params\n    } = picker;\n    if (params.openIn === 'sheet') return false;\n    if (modal && modal.type !== 'popover') return false;\n\n    if (!picker.inline && picker.inputEl) {\n      if (params.openIn === 'popover') return true;\n\n      if (app.device.ios) {\n        return !!app.device.ipad;\n      }\n\n      if (app.width >= 768) {\n        return true;\n      }\n\n      if (app.device.desktop && app.theme === 'aurora') {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  formatValue() {\n    const picker = this;\n    const {\n      value,\n      displayValue\n    } = picker;\n\n    if (picker.params.formatValue) {\n      return picker.params.formatValue.call(picker, value, displayValue);\n    }\n\n    return value.join(' ');\n  }\n\n  setValue(values, transition) {\n    const picker = this;\n    let valueIndex = 0;\n\n    if (picker.cols.length === 0) {\n      picker.value = values;\n      picker.updateValue(values);\n      return;\n    }\n\n    for (let i = 0; i < picker.cols.length; i += 1) {\n      if (picker.cols[i] && !picker.cols[i].divider) {\n        picker.cols[i].setValue(values[valueIndex], transition);\n        valueIndex += 1;\n      }\n    }\n  }\n\n  getValue() {\n    const picker = this;\n    return picker.value;\n  }\n\n  updateValue(forceValues) {\n    const picker = this;\n    const newValue = forceValues || [];\n    const newDisplayValue = [];\n    let column;\n\n    if (picker.cols.length === 0) {\n      const noDividerColumns = picker.params.cols.filter(c => !c.divider);\n\n      for (let i = 0; i < noDividerColumns.length; i += 1) {\n        column = noDividerColumns[i];\n\n        if (column.displayValues !== undefined && column.values !== undefined && column.values.indexOf(newValue[i]) !== -1) {\n          newDisplayValue.push(column.displayValues[column.values.indexOf(newValue[i])]);\n        } else {\n          newDisplayValue.push(newValue[i]);\n        }\n      }\n    } else {\n      for (let i = 0; i < picker.cols.length; i += 1) {\n        if (!picker.cols[i].divider) {\n          newValue.push(picker.cols[i].value);\n          newDisplayValue.push(picker.cols[i].displayValue);\n        }\n      }\n    }\n\n    if (newValue.indexOf(undefined) >= 0) {\n      return;\n    }\n\n    picker.value = newValue;\n    picker.displayValue = newDisplayValue;\n    picker.emit('local::change pickerChange', picker, picker.value, picker.displayValue);\n\n    if (picker.inputEl) {\n      picker.$inputEl.val(picker.formatValue());\n      picker.$inputEl.trigger('change');\n    }\n  }\n\n  initColumn(colEl, updateItems) {\n    const picker = this;\n    pickerColumn.call(picker, colEl, updateItems);\n  } // eslint-disable-next-line\n\n\n  destroyColumn(colEl) {\n    const picker = this;\n    const $colEl = $(colEl);\n    const index = $colEl.index();\n\n    if (picker.cols[index] && picker.cols[index].destroy) {\n      picker.cols[index].destroy();\n    }\n  }\n\n  renderToolbar() {\n    const picker = this;\n    if (picker.params.renderToolbar) return picker.params.renderToolbar.call(picker, picker);\n    return `\n      <div class=\"toolbar toolbar-top no-shadow\">\n        <div class=\"toolbar-inner\">\n          <div class=\"left\"></div>\n          <div class=\"right\">\n            <a class=\"link sheet-close popover-close\">${picker.params.toolbarCloseText}</a>\n          </div>\n        </div>\n      </div>\n    `.trim();\n  } // eslint-disable-next-line\n\n\n  renderColumn(col, onlyItems) {\n    const colClasses = `picker-column ${col.textAlign ? `picker-column-${col.textAlign}` : ''} ${col.cssClass || ''}`;\n    let columnHtml;\n    let columnItemsHtml;\n\n    if (col.divider) {\n      columnHtml = `\n        <div class=\"${colClasses} picker-column-divider\">${col.content}</div>\n      `;\n    } else {\n      columnItemsHtml = col.values.map((value, index) => `\n        <div class=\"picker-item\" data-picker-value=\"${value}\">\n          <span>${col.displayValues ? col.displayValues[index] : value}</span>\n        </div>\n      `).join('');\n      columnHtml = `\n        <div class=\"${colClasses}\">\n          <div class=\"picker-items\">${columnItemsHtml}</div>\n        </div>\n      `;\n    }\n\n    return onlyItems ? columnItemsHtml.trim() : columnHtml.trim();\n  }\n\n  renderInline() {\n    const picker = this;\n    const {\n      rotateEffect,\n      cssClass,\n      toolbar\n    } = picker.params;\n    const inlineHtml = `\n      <div class=\"picker picker-inline ${rotateEffect ? 'picker-3d' : ''} ${cssClass || ''}\">\n        ${toolbar ? picker.renderToolbar() : ''}\n        <div class=\"picker-columns\">\n          ${picker.cols.map(col => picker.renderColumn(col)).join('')}\n          <div class=\"picker-center-highlight\"></div>\n        </div>\n      </div>\n    `.trim();\n    return inlineHtml;\n  }\n\n  renderSheet() {\n    const picker = this;\n    const {\n      rotateEffect,\n      cssClass,\n      toolbar\n    } = picker.params;\n    const sheetHtml = `\n      <div class=\"sheet-modal picker picker-sheet ${rotateEffect ? 'picker-3d' : ''} ${cssClass || ''}\">\n        ${toolbar ? picker.renderToolbar() : ''}\n        <div class=\"sheet-modal-inner picker-columns\">\n          ${picker.cols.map(col => picker.renderColumn(col)).join('')}\n          <div class=\"picker-center-highlight\"></div>\n        </div>\n      </div>\n    `.trim();\n    return sheetHtml;\n  }\n\n  renderPopover() {\n    const picker = this;\n    const {\n      rotateEffect,\n      cssClass,\n      toolbar\n    } = picker.params;\n    const popoverHtml = `\n      <div class=\"popover picker-popover\">\n        <div class=\"popover-inner\">\n          <div class=\"picker ${rotateEffect ? 'picker-3d' : ''} ${cssClass || ''}\">\n            ${toolbar ? picker.renderToolbar() : ''}\n            <div class=\"picker-columns\">\n              ${picker.cols.map(col => picker.renderColumn(col)).join('')}\n              <div class=\"picker-center-highlight\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    `.trim();\n    return popoverHtml;\n  }\n\n  render() {\n    const picker = this;\n    if (picker.params.render) return picker.params.render.call(picker);\n\n    if (!picker.inline) {\n      if (picker.isPopover()) return picker.renderPopover();\n      return picker.renderSheet();\n    }\n\n    return picker.renderInline();\n  }\n\n  onOpen() {\n    const picker = this;\n    const {\n      initialized,\n      $el,\n      app,\n      $inputEl,\n      inline,\n      value,\n      params\n    } = picker;\n    picker.opened = true;\n    picker.closing = false;\n    picker.opening = true; // Init main events\n\n    picker.attachResizeEvent(); // Init cols\n\n    $el.find('.picker-column').each((index, colEl) => {\n      let updateItems = true;\n\n      if (!initialized && params.value || initialized && value) {\n        updateItems = false;\n      }\n\n      picker.initColumn(colEl, updateItems);\n    }); // Set value\n\n    if (!initialized) {\n      if (value) picker.setValue(value, 0);else if (params.value) {\n        picker.setValue(params.value, 0);\n      }\n    } else if (value) {\n      picker.setValue(value, 0);\n    } // Extra focus\n\n\n    if (!inline && $inputEl && $inputEl.length && app.theme === 'md') {\n      $inputEl.trigger('focus');\n    }\n\n    picker.initialized = true; // Trigger events\n\n    if ($el) {\n      $el.trigger('picker:open');\n    }\n\n    if ($inputEl) {\n      $inputEl.trigger('picker:open');\n    }\n\n    picker.emit('local::open pickerOpen', picker);\n  }\n\n  onOpened() {\n    const picker = this;\n    picker.opening = false;\n\n    if (picker.$el) {\n      picker.$el.trigger('picker:opened');\n    }\n\n    if (picker.$inputEl) {\n      picker.$inputEl.trigger('picker:opened');\n    }\n\n    picker.emit('local::opened pickerOpened', picker);\n  }\n\n  onClose() {\n    const picker = this;\n    const app = picker.app;\n    picker.opening = false;\n    picker.closing = true; // Detach events\n\n    picker.detachResizeEvent();\n    picker.cols.forEach(col => {\n      if (col.destroy) col.destroy();\n    });\n\n    if (picker.$inputEl && app.theme === 'md') {\n      picker.$inputEl.trigger('blur');\n    }\n\n    if (picker.$el) {\n      picker.$el.trigger('picker:close');\n    }\n\n    if (picker.$inputEl) {\n      picker.$inputEl.trigger('picker:close');\n    }\n\n    picker.emit('local::close pickerClose', picker);\n  }\n\n  onClosed() {\n    const picker = this;\n    picker.opened = false;\n    picker.closing = false;\n\n    if (!picker.inline) {\n      Utils.nextTick(() => {\n        if (picker.modal && picker.modal.el && picker.modal.destroy) {\n          if (!picker.params.routableModals) {\n            picker.modal.destroy();\n          }\n        }\n\n        delete picker.modal;\n      });\n    }\n\n    if (picker.$el) {\n      picker.$el.trigger('picker:closed');\n    }\n\n    if (picker.$inputEl) {\n      picker.$inputEl.trigger('picker:closed');\n    }\n\n    picker.emit('local::closed pickerClosed', picker);\n  }\n\n  open() {\n    const picker = this;\n    const {\n      app,\n      opened,\n      inline,\n      $inputEl,\n      params\n    } = picker;\n    if (opened) return;\n\n    if (picker.cols.length === 0 && params.cols.length) {\n      params.cols.forEach(col => {\n        picker.cols.push(col);\n      });\n    }\n\n    if (inline) {\n      picker.$el = $(picker.render());\n      picker.$el[0].f7Picker = picker;\n      picker.$containerEl.append(picker.$el);\n      picker.onOpen();\n      picker.onOpened();\n      return;\n    }\n\n    const isPopover = picker.isPopover();\n    const modalType = isPopover ? 'popover' : 'sheet';\n    const modalParams = {\n      targetEl: $inputEl,\n      scrollToEl: params.scrollToInput ? $inputEl : undefined,\n      content: picker.render(),\n      backdrop: isPopover,\n      on: {\n        open() {\n          const modal = this;\n          picker.modal = modal;\n          picker.$el = isPopover ? modal.$el.find('.picker') : modal.$el;\n          picker.$el[0].f7Picker = picker;\n          picker.onOpen();\n        },\n\n        opened() {\n          picker.onOpened();\n        },\n\n        close() {\n          picker.onClose();\n        },\n\n        closed() {\n          picker.onClosed();\n        }\n\n      }\n    };\n\n    if (modalType === 'sheet') {\n      modalParams.push = params.sheetPush;\n      modalParams.swipeToClose = params.sheetSwipeToClose;\n    }\n\n    if (params.routableModals) {\n      picker.view.router.navigate({\n        url: picker.url,\n        route: {\n          path: picker.url,\n          [modalType]: modalParams\n        }\n      });\n    } else {\n      picker.modal = app[modalType].create(modalParams);\n      picker.modal.open();\n    }\n  }\n\n  close() {\n    const picker = this;\n    const {\n      opened,\n      inline\n    } = picker;\n    if (!opened) return;\n\n    if (inline) {\n      picker.onClose();\n      picker.onClosed();\n      return;\n    }\n\n    if (picker.params.routableModals) {\n      picker.view.router.back();\n    } else {\n      picker.modal.close();\n    }\n  }\n\n  init() {\n    const picker = this;\n    picker.initInput();\n\n    if (picker.inline) {\n      picker.open();\n      picker.emit('local::init pickerInit', picker);\n      return;\n    }\n\n    if (!picker.initialized && picker.params.value) {\n      picker.setValue(picker.params.value);\n    } // Attach input Events\n\n\n    if (picker.$inputEl) {\n      picker.attachInputEvents();\n    }\n\n    if (picker.params.closeByOutsideClick) {\n      picker.attachHtmlEvents();\n    }\n\n    picker.emit('local::init pickerInit', picker);\n  }\n\n  destroy() {\n    const picker = this;\n    if (picker.destroyed) return;\n    const {\n      $el\n    } = picker;\n    picker.emit('local::beforeDestroy pickerBeforeDestroy', picker);\n    if ($el) $el.trigger('picker:beforedestroy');\n    picker.close(); // Detach Events\n\n    if (picker.$inputEl) {\n      picker.detachInputEvents();\n    }\n\n    if (picker.params.closeByOutsideClick) {\n      picker.detachHtmlEvents();\n    }\n\n    if ($el && $el.length) delete picker.$el[0].f7Picker;\n    Utils.deleteProps(picker);\n    picker.destroyed = true;\n  }\n\n}\n\nexport default Picker;","map":null,"metadata":{},"sourceType":"module"}