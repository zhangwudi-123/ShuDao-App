{"ast":null,"code":"import React, { memo, useCallback, useEffect, useState } from 'react';\nimport { mergeProps } from '../../utils/with-default-props';\nimport { Wheel } from './wheel';\nimport { useColumnsExtend } from './columns-extend';\nimport { withNativeProps } from '../../utils/native-props';\nimport { useDebounceEffect } from 'ahooks';\nimport { defaultRenderLabel } from '../picker/picker-utils';\nimport SpinLoading from '../spin-loading';\nconst classPrefix = `adm-picker-view`;\nconst defaultProps = {\n  defaultValue: [],\n  renderLabel: defaultRenderLabel,\n  mouseWheel: false,\n  loadingContent: React.createElement(\"div\", {\n    className: `${classPrefix}-loading-content`\n  }, React.createElement(SpinLoading, null))\n};\nexport const PickerView = memo(p => {\n  const props = mergeProps(defaultProps, p);\n  const [innerValue, setInnerValue] = useState(props.value === undefined ? props.defaultValue : props.value); // Sync `value` to `innerValue`\n\n  useEffect(() => {\n    if (props.value === undefined) return; // Uncontrolled mode\n\n    if (props.value === innerValue) return;\n    setInnerValue(props.value);\n  }, [props.value]);\n  useEffect(() => {\n    if (props.value === innerValue) return;\n    const timeout = window.setTimeout(() => {\n      if (props.value !== undefined && props.value !== innerValue) {\n        setInnerValue(props.value);\n      }\n    }, 1000);\n    return () => {\n      window.clearTimeout(timeout);\n    };\n  }, [props.value, innerValue]);\n  const extend = useColumnsExtend(props.columns, innerValue);\n  const columns = extend.columns;\n  useDebounceEffect(() => {\n    var _a;\n\n    if (props.value === innerValue) return;\n    (_a = props.onChange) === null || _a === void 0 ? void 0 : _a.call(props, innerValue, extend);\n  }, [innerValue], {\n    wait: 0,\n    leading: false,\n    trailing: true\n  });\n  const handleSelect = useCallback((val, index) => {\n    setInnerValue(prev => {\n      const next = [...prev];\n      next[index] = val;\n      return next;\n    });\n  }, []);\n  return withNativeProps(props, React.createElement(\"div\", {\n    className: `${classPrefix}`\n  }, props.loading ? props.loadingContent : React.createElement(React.Fragment, null, columns.map((column, index) => React.createElement(Wheel, {\n    key: index,\n    index: index,\n    column: column,\n    value: innerValue[index],\n    onSelect: handleSelect,\n    renderLabel: props.renderLabel,\n    mouseWheel: props.mouseWheel\n  })), React.createElement(\"div\", {\n    className: `${classPrefix}-mask`\n  }, React.createElement(\"div\", {\n    className: `${classPrefix}-mask-top`\n  }), React.createElement(\"div\", {\n    className: `${classPrefix}-mask-middle`\n  }), React.createElement(\"div\", {\n    className: `${classPrefix}-mask-bottom`\n  })))));\n});\nPickerView.displayName = 'PickerView';","map":null,"metadata":{},"sourceType":"module"}