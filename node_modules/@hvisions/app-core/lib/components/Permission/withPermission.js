"use strict";

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.find");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.function.name");

require("core-js/modules/es.object.get-own-property-descriptor");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/es.weak-map");

require("core-js/modules/web.dom-collections.iterator");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _lodash = require("lodash");

var _toolkit = require("@hvisions/toolkit");

var _Context = _interopRequireDefault(require("./Context"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var getLocalSettings = _toolkit.i18n.getLocalSettings;

var getDisplayName = function getDisplayName(WrappedComponent) {
  return WrappedComponent.displayName || WrappedComponent.name || 'Component';
};

var withPermission = function withPermission(Component, permission, type) {
  var ContextConfig = function ContextConfig(props) {
    var PermissionComponent = function PermissionComponent(permissions, props) {
      var _permissions = (0, _lodash.isArray)(permissions) ? permissions : [];

      var hasPer = _permissions.find(function (per) {
        return per.encode.toUpperCase() === permission.toUpperCase();
      });

      if ((0, _lodash.isEmpty)(hasPer)) {
        return _react.default.createElement(_react.Fragment, null);
      }

      if (type === 'icon') {
        return _react.default.createElement(Component, props);
      } else {
        return _react.default.createElement(Component, props, getLocalSettings() == 'zh_CN' ? hasPer.fullName : hasPer.englishName);
      }
    };

    return _react.default.createElement(_Context.default.Consumer, null, function (context) {
      return PermissionComponent(context, props);
    });
  };

  ContextConfig.displayName = "WithPermission([".concat(permission, "]").concat(getDisplayName(Component), ")");
  return ContextConfig;
};

var _default = withPermission;
exports.default = _default;