"use strict";

require("core-js/modules/es.symbol");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.array.find");

require("core-js/modules/es.object.get-own-property-descriptor");

require("core-js/modules/es.object.get-own-property-descriptors");

require("core-js/modules/es.object.keys");

require("core-js/modules/web.dom-collections.for-each");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addPlugin = addPlugin;
exports.registerPlugins = registerPlugins;
exports.getComponent = getComponent;
exports.pluginEvent = void 0;

var _toolkit = require("@hvisions/toolkit");

var _events = _interopRequireDefault(require("events"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * @typedef {Object} NeedleRouter
 * @property {string} path
 * @property {boolean} [auth = true]
 * @property {React.ReactNode} component
 * @property {() => void} [beforeEnter]
 * @property {() => void} [afterEnter]
 * @property {() => void} [beforeLeave]
 *
 * @typedef {Object} LayoutExtraComponent
 * @property {string} [type]
 * @property {number} [index] 排序
 * @property {React.ReactNode} component
 *
 * @typedef {Object} NeedlePlugin
 * @property {(opt: {core: any}) => { router?: NeedleRouter[]; store?: any[], locale?: any[] }} [install]
 * @property {(opt: {core: any}) => { router?: NeedleRouter[]; store?: any[], locale?: any[] }} [default]
 * @property {'layout' | 'login'} [type]
 * @property {(opt: {core: any; config: Record<string, any>; loginComplete: (token: string, authData: any) => void}) => React.ReactNode} [getLoginComponent]
 * @property {(opt: {core: any; config: Record<string, any>; extraComponents: LayoutExtraComponent[]; logoutComplete: () => void; routers: NeedleRouter[]; routeView: React.ReactNode}) => React.ReactNode} [getLayoutComponent]
 * @property {(opt: {core: any}) => LayoutExtraComponent | LayoutExtraComponent[]} [layoutExtraComponents]
 * @property {(e: EventEmitter, opt: { core: any }) => void} [eventHandler]
 */

/**
 * @type {NeedlePlugin[]}
 */
var plugins = [];
var pluginEvent = new _events.default();
/**
 *
 *
 * @export
 * @param {NeedlePlugin} p
 */

exports.pluginEvent = pluginEvent;

function addPlugin(p) {
  plugins.push(p);
}
/**
 *
 *
 * @export
 * @param {any} core
 * @returns {{ router: NeedleRouter[]; store: any{}, locales: any{} }}
 */


function registerPlugins(core) {
  var routers = [];
  var stores = [];
  var locales = []; // 获取路由/redux/国际化

  plugins.forEach(function (p) {
    if (p.install) {
      var _ref = p.install({
        core: core
      }) || {},
          _ref$router = _ref.router,
          router = _ref$router === void 0 ? [] : _ref$router,
          _ref$store = _ref.store,
          store = _ref$store === void 0 ? {} : _ref$store,
          _ref$locale = _ref.locale,
          locale = _ref$locale === void 0 ? {} : _ref$locale;

      routers = routers.concat(router);
      stores.push(store);
      locales.push(locale);
    } // 处理事件


    if (p.eventHandler) {
      p.eventHandler(pluginEvent, {
        core: core
      });
    }
  });
  return {
    routers: routers,
    stores: stores,
    locales: locales
  };
}
/**
 * ### 获取自定义插件组件
 * 
 * 内置插件不需要使用插件方式加载.
 * 
 * 这里只用来加载自定义插件,目前只支持`'layout | login'`两种插件.
 * 
 * @param {string} key layout | login
 * @returns 
 */


function getComponent(key) {
  var p = plugins.find(function (p) {
    return p.type.toLowerCase() === key;
  });

  if (p && p.getComponent) {
    return function (props) {
      return p.getComponent(_objectSpread({
        config: _toolkit.config.getPartConfig(key)
      }, props));
    };
  }

  return null;
}