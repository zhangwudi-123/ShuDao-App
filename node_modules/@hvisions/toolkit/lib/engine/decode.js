"use strict";

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/es.string.split");

require("core-js/modules/web.dom-collections.iterator");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

module.exports = function (dict) {
  var _dict = _slicedToArray(dict, 1),
      word = _dict[0];

  var keys = dict[1].split(',');
  var map = {};

  if (!dict.length) {
    return map;
  }

  for (var i = 0, charCode = 0, len = word.length; i < len; i++, charCode++) {
    var val = word[i]; // 处理偏移

    if (val < 0) {
      charCode -= val + 1;
      continue;
    }

    var char = String.fromCharCode(charCode);

    if (typeof val === 'number') {
      map[char] = [keys[val]];
    } else {
      map[char] = [];

      for (var w = 0, l = val.length; w < l; w++) {
        map[char].push(keys[val[w]]);
      }
    }
  }

  return map;
};