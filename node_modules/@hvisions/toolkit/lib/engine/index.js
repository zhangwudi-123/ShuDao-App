"use strict";

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.join");

require("core-js/modules/es.array.map");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/es.string.replace");

require("core-js/modules/web.dom-collections.iterator");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * 建立索引
 * @param   {[string]|[Object]}	 data         数据
 * @param	{string|[string]}    indexs       如果 data 为 [Object]，这里需要建立拼音索引 key
 * @param   {array}              dict         词典数据
 */
var Engine =
/*#__PURE__*/
function () {
  function Engine(data) {
    var indexs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var dict = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var prefix = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';

    _classCallCheck(this, Engine);

    this.indexs = [];
    this.history = {
      keyword: '',
      indexs: [],
      data: []
    };
    this.data = data;
    this.dict = dict;
    this.prefix = prefix; // 建立拼音关键词索引

    indexs = typeof indexs === 'string' ? [indexs] : indexs;
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var item = _step.value;
        var keywords = '';

        if (typeof item === 'string') {
          keywords = Engine.participle(item, dict, prefix);
        } else {
          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = indexs[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var key = _step2.value;
              var words = item[key];

              if (words) {
                keywords += Engine.participle(words, dict, prefix);
              }
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                _iterator2.return();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }
        }

        this.indexs.push(keywords.toLowerCase());
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }
  /**
   * 查询
   * @param   {string}    keyword     拼音或者关键字
   * @return  {[string]|{Object}}
   */


  _createClass(Engine, [{
    key: "query",
    value: function query(keyword) {
      keyword = keyword.replace(/\s/g, '').toLowerCase();
      var indexs = this.indexs;
      var data = this.data;
      var history = this.history;
      var result = []; // 性能优化：在上一次搜索结果中查询

      if (history.data.length && keyword.indexOf(history.keyword) === 0) {
        indexs = history.indexs;
        data = history.data;
      }

      history.keyword = keyword;
      history.indexs = [];

      for (var index = 0; index < indexs.length; index++) {
        if (indexs[index].indexOf(this.prefix + keyword) !== -1) {
          history.indexs.push(indexs[index]);
          result.push(data[index]);
        }
      }

      return result;
    }
    /**
     * 将内容进行分词
     * @param	{string}		  words        目标字符串
     * @param   {Object}          dict         字典
     * @return	{string}
     */

  }], [{
    key: "participle",
    value: function participle(words, dict) {
      var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
      words = words.replace(/\s/g, '');
      var result = "".concat(prefix).concat(words);
      var keywords = [[], []];
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = words[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var char = _step3.value;
          var pinyin = dict[char];

          if (pinyin) {
            keywords[0].push(pinyin);

            if (words.length > 1) {
              keywords[1].push(pinyin.map(function (p) {
                return p.charAt(0);
              }));
            }
          }
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      for (var _i = 0, _keywords = keywords; _i < _keywords.length; _i++) {
        var list = _keywords[_i];
        var current = list.shift();

        while (list.length) {
          var array = [];
          var next = list.shift();
          var _iteratorNormalCompletion4 = true;
          var _didIteratorError4 = false;
          var _iteratorError4 = undefined;

          try {
            for (var _iterator4 = current[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
              var c = _step4.value;
              var _iteratorNormalCompletion5 = true;
              var _didIteratorError5 = false;
              var _iteratorError5 = undefined;

              try {
                for (var _iterator5 = next[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                  var n = _step5.value;
                  array.push(c + n);
                }
              } catch (err) {
                _didIteratorError5 = true;
                _iteratorError5 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion5 && _iterator5.return != null) {
                    _iterator5.return();
                  }
                } finally {
                  if (_didIteratorError5) {
                    throw _iteratorError5;
                  }
                }
              }
            }
          } catch (err) {
            _didIteratorError4 = true;
            _iteratorError4 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
                _iterator4.return();
              }
            } finally {
              if (_didIteratorError4) {
                throw _iteratorError4;
              }
            }
          }

          current = array;
        }

        if (current) {
          result += "\x01".concat(prefix).concat(current.join("\x01".concat(prefix)));
        }
      }

      return result;
    }
  }]);

  return Engine;
}();

module.exports = Engine;