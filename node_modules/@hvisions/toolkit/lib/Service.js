"use strict";

require("core-js/modules/es.symbol");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.array.includes");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.object.get-own-property-descriptor");

require("core-js/modules/es.object.get-own-property-descriptors");

require("core-js/modules/es.object.keys");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.promise");

require("core-js/modules/web.dom-collections.for-each");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _axios2 = _interopRequireDefault(require("axios"));

var _lodash = require("lodash");

var _session = require("./session");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var codeMessage = {
  200: '服务器成功返回请求的数据',
  201: '新建或修改数据成功。',
  202: '一个请求已经进入后台排队（异步任务）',
  204: '删除数据成功。',
  400: '发出的请求有错误，服务器没有进行新建或修改数据的操作。',
  401: '用户没有权限（令牌、用户名、密码错误）。',
  403: '用户得到授权，但是访问是被禁止的。',
  404: '发出的请求针对的是不存在的记录，服务器没有进行操作',
  406: '请求的格式不可得。',
  410: '请求的资源被永久删除，且不会再得到的。',
  422: '当创建一个对象时，发生一个验证错误。',
  500: '服务器发生错误，请检查服务器',
  502: '网关错误',
  503: '服务不可用，服务器暂时过载或维护',
  504: '网关超时',
  601: '系统授权'
};
var config = {
  // baseURL: process.env.baseURL || process.env.apiUrl || ""
  // timeout: 60 * 1000, // Timeout
  // withCredentials: true, // Check cross-site Access-Control
  'X-Requested-With': 'XMLHttpRequest',
  // xhr
  'Cache-Control': 'no-cache'
};

function formatUrl(path, isRoot) {
  if (/^http/.test(path)) {
    return path;
  }

  var reqPath = "".concat(isRoot ? '/auth' : '').concat(path);
  var url = "".concat((0, _session.getApiAddress)()).concat(reqPath);
  return url;
}

var Service =
/*#__PURE__*/
function () {
  function Service() {
    var _options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Service);

    var _axios = _axios2.default.create(config); // 拦截请求


    _axios.interceptors.request.use(function (config) {
      var conf = _objectSpread({}, config, {
        deviceType: 'WEB'
      });

      var token = {};

      if ((0, _session.getSaas)()) {
        token = {
          'jwt-token': (0, _session.getJwtToken)(),
          refreshToken: (0, _session.getRefreshToken)()
        };
      } else {
        token = {
          token: (0, _session.getToken)()
        };
      }

      if (token && !conf.headers.token) {
        // header 中加入 token
        conf = (0, _lodash.merge)(conf, {
          headers: token
        });
      }

      return conf;
    }, function (error) {
      return Promise.reject(error);
    }); // 拦截返回


    _axios.interceptors.response.use( // response => response.data.data,
    function (response) {
      var _response$data = response.data,
          code = _response$data.code,
          message = _response$data.message;
      var successCode = [200];

      if (!successCode.includes(code)) {
        throw new Error(message);
      }

      return response.data.data;
    }, function (error) {
      var err = {};

      if (error.response) {
        var _error$response$confi = error.response.config,
            cfg = _error$response$confi === void 0 ? {} : _error$response$confi; // The request was made, but the server responded with a status code
        // that falls out of the range of 2xx

        var _e = typeof error.response.data === 'string' ? {
          error_message: error.response.data
        } : error.response.data;

        err = _objectSpread({}, _e, {
          status: error.response.status,
          url: cfg.url || ''
        });
      } else {
        // Something happened in setting up the request that triggered an Error
        err = error;
      }

      var errortext = err.error_message || err.message || codeMessage[err.status]; // log to console

      console.error(err);

      switch (+err.status) {
        case 401:
          (0, _session.clear)();
          window.location.href = '/401';
          break;

        case 404:
          window.location.href = '/404';
          break;

        case 500:
          window.location.href = '/500';
          break;

        case 601:
          window.location.href = '/601';
          break;

        default:
          if ([408].includes(err.status)) {
            // 授权失败， 登录失效或未登录
            // 清除用户与token信息
            (0, _session.clear)();
            return;
          }

          break;
      }

      var e = new Error(errortext);
      e.status = err.status;
      e.response = error.response;
      throw e;
    });

    this.$http = _axios; // 支持添加 url 前缀

    this.baseURL = _options.baseURL || '';
  }

  _createClass(Service, [{
    key: "request",
    value: function request(url, method) {
      var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
          params = _ref.params,
          data = _ref.data,
          _ref$headers = _ref.headers,
          headers = _ref$headers === void 0 ? {} : _ref$headers,
          _ref$isRoot = _ref.isRoot,
          isRoot = _ref$isRoot === void 0 ? false : _ref$isRoot,
          others = _objectWithoutProperties(_ref, ["params", "data", "headers", "isRoot"]);

      if (!url) return;

      var conf = _objectSpread({}, others, {
        url: formatUrl("".concat(this.baseURL).concat(url), isRoot),
        method: method,
        headers: headers,
        // disable browser's cache
        // always make a new request
        params: _objectSpread({}, params, {
          timestamp: new Date().getTime()
        }),
        data: data
      });

      conf.headers = (0, _lodash.omitBy)(conf.headers, function (v) {
        return typeof v === 'undefined';
      });
      return this.$http.request(conf);
    }
  }, {
    key: "get",
    value: function get(url, params) {
      var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return this.request(url, 'GET', _objectSpread({}, config, {
        params: params
      }));
    }
  }, {
    key: "post",
    value: function post(url, data) {
      var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return this.request(url, 'POST', _objectSpread({}, config, {
        data: data
      }));
    }
  }, {
    key: "put",
    value: function put(url, data) {
      var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return this.request(url, 'PUT', _objectSpread({}, config, {
        data: data
      }));
    }
  }, {
    key: "delete",
    value: function _delete(url, data) {
      var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return this.request(url, 'DELETE', _objectSpread({}, config, {
        data: data
      }));
    }
  }]);

  return Service;
}();

exports.default = Service;