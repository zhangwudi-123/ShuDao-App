"use strict";

require("core-js/modules/es.symbol");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.object.get-own-property-descriptor");

require("core-js/modules/es.object.get-own-property-descriptors");

require("core-js/modules/es.object.keys");

require("core-js/modules/web.dom-collections.for-each");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getApiIP = getApiIP;
exports.getApiPort = getApiPort;
exports.getApiHttps = getApiHttps;
exports.getApiAddress = getApiAddress;
exports.setSaas = setSaas;
exports.getSaas = getSaas;
exports.saveApiIP = saveApiIP;
exports.saveApiPort = saveApiPort;
exports.saveApiHttps = saveApiHttps;
exports.getLoginKey = getLoginKey;
exports.saveLoginKey = saveLoginKey;
exports.getToken = getToken;
exports.saveToken = saveToken;
exports.getJwtToken = getJwtToken;
exports.saveJwtToken = saveJwtToken;
exports.getRefreshToken = getRefreshToken;
exports.saveRefreshToken = saveRefreshToken;
exports.getAuthData = getAuthData;
exports.setAuthData = setAuthData;
exports.updateAuthData = updateAuthData;
exports.setLocale = setLocale;
exports.getLocale = getLocale;
exports.clear = clear;
exports.isLoggedIn = isLoggedIn;
exports.default = void 0;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var AUTH_DATA_KEY = 'AUTH_DATA';
var AUTH_JWT_TOKEN = 'AUTH_JWT_TOKEN';
var AUTH_REFRESH_TOKEN = 'AUTH_REFRESH_TOKEN';
var AUTH_TOKEN_KEY = 'AUTH_TOKEN_KEY';
var AUTH_LOGIN_KEY = 'AUTH_LOGIN_KEY';
var API_IP_KEY = 'API_IP_KEY';
var API_PORT_KEY = 'API_PORT_KEY';
var API_HTTPS_KEY = 'API_HTTPS_KEY';
var SAAS_KEY = 'SAAS_KEY';

function getApiIP() {
  return localStorage.getItem(API_IP_KEY) || process.env.__API_HOST__ || '';
}

function getApiPort() {
  return localStorage.getItem(API_PORT_KEY) || process.env.__API_PORT__ || '';
}

function getApiHttps() {
  var https = localStorage.getItem(API_HTTPS_KEY) || process.env.__API_HTTPS__;

  return https === 'true';
}

function getApiAddress() {
  var isHttps = getApiHttps();
  var prefix = isHttps ? 'https' : 'http';
  var port = ":".concat(getApiPort());

  if (!isHttps && port == 80 || isHttps && port == 443) {
    // 默认端口就不需要加在后面了
    port = '';
  }

  return "".concat(prefix, "://").concat(getApiIP()).concat(port);
}

function setSaas(params) {
  return localStorage.setItem(SAAS_KEY, params);
}

function getSaas() {
  return localStorage.getItem(SAAS_KEY) === 'true';
}

function saveApiIP(params) {
  return localStorage.setItem(API_IP_KEY, params);
}

function saveApiPort(params) {
  return localStorage.setItem(API_PORT_KEY, params);
}

function saveApiHttps(params) {
  return localStorage.setItem(API_HTTPS_KEY, params);
}

function getLoginKey() {
  return localStorage.getItem(AUTH_LOGIN_KEY);
}

function saveLoginKey(key) {
  return localStorage.setItem(AUTH_LOGIN_KEY, key);
}

function getToken() {
  return localStorage.getItem(AUTH_TOKEN_KEY);
}

function saveToken(token) {
  return localStorage.setItem(AUTH_TOKEN_KEY, token);
}

function getJwtToken() {
  return localStorage.getItem(AUTH_JWT_TOKEN);
}

function saveJwtToken(token) {
  return localStorage.setItem(AUTH_JWT_TOKEN, token);
}

function getRefreshToken() {
  return localStorage.getItem(AUTH_REFRESH_TOKEN);
}

function saveRefreshToken(token) {
  return localStorage.setItem(AUTH_REFRESH_TOKEN, token);
}

function getAuthData() {
  var data;

  try {
    data = JSON.parse(localStorage.getItem(AUTH_DATA_KEY));
  } catch (e) {
    // do nothing
    data = null;
  }

  return data;
}

function setAuthData(data) {
  return localStorage.setItem(AUTH_DATA_KEY, JSON.stringify(data));
}

function updateAuthData(key, value) {
  if (!isLoggedIn()) {
    return false;
  }

  var data = getAuthData();

  if (data) {
    data = _objectSpread({}, data, _defineProperty({}, key, value));
    setAuthData(data);
  }
}

function setLocale(locale) {
  return localStorage.setItem('locale', locale);
}

function getLocale() {
  return localStorage.getItem('locale') || 'zh_CN';
}

function clear() {
  localStorage.removeItem(AUTH_DATA_KEY);

  if (getSaas()) {
    localStorage.removeItem(AUTH_JWT_TOKEN);
    localStorage.removeItem(AUTH_REFRESH_TOKEN);
  } else {
    localStorage.removeItem(AUTH_TOKEN_KEY);
  }
}

function isLoggedIn() {
  var token = getSaas() ? getJwtToken() : getToken();
  var data = getAuthData();
  return Boolean(token) && Boolean(data);
}

var _default = {
  clear: clear,
  getApiAddress: getApiAddress,
  getApiIP: getApiIP,
  getApiPort: getApiPort,
  getApiHttps: getApiHttps,
  getAuthData: getAuthData,
  getJwtToken: getJwtToken,
  getLocale: getLocale,
  getLoginKey: getLoginKey,
  getRefreshToken: getRefreshToken,
  getSaas: getSaas,
  getToken: getToken,
  isLoggedIn: isLoggedIn,
  saveApiIP: saveApiIP,
  saveApiPort: saveApiPort,
  saveApiHttps: saveApiHttps,
  saveJwtToken: saveJwtToken,
  saveLoginKey: saveLoginKey,
  saveRefreshToken: saveRefreshToken,
  saveToken: saveToken,
  setAuthData: setAuthData,
  setLocale: setLocale,
  setSaas: setSaas,
  updateAuthData: updateAuthData
};
exports.default = _default;