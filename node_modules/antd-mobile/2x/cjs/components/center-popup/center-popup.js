"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CenterPopup = void 0;
var _react = _interopRequireWildcard(require("react"));
var _renderToContainer = require("../../utils/render-to-container");
var _mask = _interopRequireDefault(require("../mask"));
var _withStopPropagation = require("../../utils/with-stop-propagation");
var _withDefaultProps = require("../../utils/with-default-props");
var _ahooks = require("ahooks");
var _web = require("@react-spring/web");
var _useInnerVisible = require("../../utils/use-inner-visible");
var _classnames = _interopRequireDefault(require("classnames"));
var _nativeProps = require("../../utils/native-props");
var _shouldRender = require("../../utils/should-render");
var _useLockScroll = require("../../utils/use-lock-scroll");
var _antdMobileIcons = require("antd-mobile-icons");
var _popupBaseProps = require("../popup/popup-base-props");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const defaultProps = Object.assign(Object.assign({}, _popupBaseProps.defaultPopupBaseProps), {
  getContainer: null
});
const CenterPopup = p => {
  const props = (0, _withDefaultProps.mergeProps)(defaultProps, p);
  const unmountedRef = (0, _ahooks.useUnmountedRef)();
  const style = (0, _web.useSpring)({
    scale: props.visible ? 1 : 0.8,
    opacity: props.visible ? 1 : 0,
    config: {
      mass: 1.2,
      tension: 200,
      friction: 25,
      clamp: true
    },
    onRest: () => {
      var _a, _b;
      if (unmountedRef.current) return;
      setActive(props.visible);
      if (props.visible) {
        (_a = props.afterShow) === null || _a === void 0 ? void 0 : _a.call(props);
      } else {
        (_b = props.afterClose) === null || _b === void 0 ? void 0 : _b.call(props);
      }
    }
  });
  const [active, setActive] = (0, _react.useState)(props.visible);
  (0, _ahooks.useIsomorphicLayoutEffect)(() => {
    if (props.visible) {
      setActive(true);
    }
  }, [props.visible]);
  const ref = (0, _react.useRef)(null);
  (0, _useLockScroll.useLockScroll)(ref, props.disableBodyScroll && active);
  const maskVisible = (0, _useInnerVisible.useInnerVisible)(active && props.visible);
  const body = _react.default.createElement("div", {
    className: (0, _classnames.default)('adm-center-popup-body', props.bodyClassName),
    style: props.bodyStyle
  }, props.children);
  const node = (0, _withStopPropagation.withStopPropagation)(props.stopPropagation, (0, _nativeProps.withNativeProps)(props, _react.default.createElement("div", {
    className: 'adm-center-popup',
    style: {
      display: active ? undefined : 'none',
      pointerEvents: active ? undefined : 'none'
    }
  }, props.mask && _react.default.createElement(_mask.default, {
    visible: maskVisible,
    forceRender: props.forceRender,
    destroyOnClose: props.destroyOnClose,
    onMaskClick: e => {
      var _a, _b;
      (_a = props.onMaskClick) === null || _a === void 0 ? void 0 : _a.call(props, e);
      if (props.closeOnMaskClick) {
        (_b = props.onClose) === null || _b === void 0 ? void 0 : _b.call(props);
      }
    },
    style: props.maskStyle,
    className: (0, _classnames.default)('adm-center-popup-mask', props.maskClassName),
    disableBodyScroll: false,
    stopPropagation: props.stopPropagation
  }), _react.default.createElement("div", {
    className: 'adm-center-popup-wrap',
    role: props.role,
    "aria-label": props['aria-label']
  }, _react.default.createElement(_web.animated.div, {
    style: style,
    ref: ref
  }, props.showCloseButton && _react.default.createElement("a", {
    className: (0, _classnames.default)('adm-center-popup-close', 'adm-plain-anchor'),
    onClick: () => {
      var _a;
      (_a = props.onClose) === null || _a === void 0 ? void 0 : _a.call(props);
    }
  }, _react.default.createElement(_antdMobileIcons.CloseOutline, null)), body)))));
  return _react.default.createElement(_shouldRender.ShouldRender, {
    active: active,
    forceRender: props.forceRender,
    destroyOnClose: props.destroyOnClose
  }, (0, _renderToContainer.renderToContainer)(props.getContainer, node));
};
exports.CenterPopup = CenterPopup;